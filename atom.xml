<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未读代码</title>
  
  <subtitle>专注Java</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codingme.net/"/>
  <updated>2019-11-04T00:57:36.226Z</updated>
  <id>https://www.codingme.net/</id>
  
  <author>
    <name>未读代码</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jdk14都要出了，还不能使用 Optional优雅的处理空指针？</title>
    <link href="https://www.codingme.net/2019/11/jdk/jdk8-optional/"/>
    <id>https://www.codingme.net/2019/11/jdk/jdk8-optional/</id>
    <published>2019-11-04T00:01:01.000Z</published>
    <updated>2019-11-04T00:57:36.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><blockquote><p>如果你没有处理过空指针，那么你不是一位真正的 Java 程序员。</p></blockquote><p>空指针确实会产生很多问题，我们经常遇到空的引用，然后又想从这个空的引用上去获取其他的值，接着理所当然的碰到了 <code>NullPointException</code>。这是你可能会想，这报错很好处理，然后你看了眼报错行数，对比了下代码。脑海里瞬间闪过 ”对对对，这里有可能为空“，然后加上 <code>null check</code>轻松处理。然而你不知道这已经是你处理的第多少个空指针异常了。<br><a id="more"></a><br>为了解决上面的问题，在 Java SE8 中引入了一个新类 <code>java.util.Optional</code>，这个类可以<strong>缓解</strong>上面的问题。</p><p>你可能已经发现了，上面我用的是<strong>缓解</strong>而不是<strong>解决</strong>。这也是很多人理解不太对的地方，以为 Java SE8 中的 <code>Optional</code> 类可以解决空指针问题。其实 Optional 类的的使用只是<strong>提示</strong>你这里可能存在空值，需要特殊处理，并提供了一些特殊处理的方法。如果你把 <code>Optional</code> 类当作空指针的救命稻草而不加思考的使用，那么依旧会碰到错误。</p><p>因为 <code>Optional</code> 是的 Java SE8 中引入的，因此本文中难免会有一些 JDK8 中的语法，如 <strong>Lambda</strong> 表达式，流处理等，但是都是基本形式，不会有过于复杂的案例。</p><h1 id="2-Optional-创建"><a href="#2-Optional-创建" class="headerlink" title="2. Optional 创建"></a>2. Optional 创建</h1><p>Optional 的创建一共有三种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个 Optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOptionalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Optional 构造方式1 - of 传入的值不能为 null</span></span><br><span class="line">    Optional&lt;String&gt; helloOption = Optional.of(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optional 构造方式2 - empty 一个空 optional</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optional 构造方式3 - ofNullable 支持传入 null 值的 optional</span></span><br><span class="line">    Optional&lt;String&gt; nullOptional = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中构造方式1中 <code>of</code> 方法，如果传入的值会空，会报出 <code>NullPointerException</code> 异常。</p><h1 id="3-Optional-判断"><a href="#3-Optional-判断" class="headerlink" title="3. Optional 判断"></a>3. Optional 判断</h1><p>Optional 只是一个包装对象，想要判断里面有没有值可以使用 <code>isPresent</code>  方法检查其中是否有值 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查是否有值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkOptionalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; helloOptional = Optional.of(<span class="string">"Hello"</span>);</span><br><span class="line">    System.out.println(helloOptional.isPresent());</span><br><span class="line"></span><br><span class="line">    Optional&lt;Object&gt; emptyOptional = Optional.empty();</span><br><span class="line">    System.out.println(emptyOptional.isPresent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>从 JDK11 开始，提供了 <code>isEmpty</code>方法用来检查相反的结果：是否为空。</p><p>如果想要在有值的时候进行一下操作。可以使用 <code>ifPresent</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果有值，输出长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenIsPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有值，获取默认值</span></span><br><span class="line">    Optional&lt;String&gt; helloOptional = Optional.of(<span class="string">"Hello"</span>);</span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    helloOptional.ifPresent(s -&gt; System.out.println(s.length()));</span><br><span class="line">    emptyOptional.ifPresent(s -&gt; System.out.println(s.length()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="4-Optional-获取值"><a href="#4-Optional-获取值" class="headerlink" title="4. Optional 获取值"></a>4. Optional 获取值</h1><p>使用 <code>get</code>方法可以获取值，但是如果值不存在，会抛出 <code>NoSuchElementException</code> 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有值，会抛异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; stringOptional = Optional.of(<span class="string">"hello"</span>);</span><br><span class="line">    System.out.println(stringOptional.get());</span><br><span class="line">    <span class="comment">// 如果没有值，会抛异常</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    System.out.println(emptyOptional.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line"></span><br><span class="line">java.util.NoSuchElementException: No value present</span><br><span class="line">at java.util.Optional.get(Optional.java:<span class="number">135</span>)</span><br><span class="line">at net.codingme.feature.jdk8.Jdk8Optional.getTest(Jdk8Optional.java:<span class="number">91</span>)</span><br></pre></td></tr></table></figure><h1 id="5-Optional-默认值"><a href="#5-Optional-默认值" class="headerlink" title="5. Optional 默认值"></a>5. Optional 默认值</h1><p>使用 <code>orElse</code>, <code>orElseGet</code> 方法可以在没有值的情况下获取给定的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有值，获取默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenIsNullGetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有值，获取默认值</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    String orElse = emptyOptional.orElse(<span class="string">"orElse default"</span>);</span><br><span class="line">    String orElseGet = emptyOptional.orElseGet(() -&gt; <span class="string">"orElseGet default"</span>);</span><br><span class="line">    System.out.println(orElse);</span><br><span class="line">    System.out.println(orElseGet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orElse default</span><br><span class="line">orElseGet default</span><br></pre></td></tr></table></figure></p><p>看到这里你可能会有些疑惑了，这两个方法看起来效果是一模一样的，为什么会提供两个呢？下面再看一个例子，你会发现两者的区别。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * orElse 和 orElseGet 的区别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orElseAndOrElseGetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有值，默认值</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    System.out.println(<span class="string">"空Optional.orElse"</span>);</span><br><span class="line">    String orElse = emptyOptional.orElse(getDefault());</span><br><span class="line">    System.out.println(<span class="string">"空Optional.orElseGet"</span>);</span><br><span class="line">    String orElseGet = emptyOptional.orElseGet(() -&gt; getDefault());</span><br><span class="line">    System.out.println(<span class="string">"空Optional.orElse结果："</span>+orElse);</span><br><span class="line">    System.out.println(<span class="string">"空Optional.orElseGet结果："</span>+orElseGet);</span><br><span class="line">    System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">    <span class="comment">// 如果没有值，默认值</span></span><br><span class="line">    Optional&lt;String&gt; stringOptional = Optional.of(<span class="string">"hello"</span>);</span><br><span class="line">    System.out.println(<span class="string">"有值Optional.orElse"</span>);</span><br><span class="line">    orElse = stringOptional.orElse(getDefault());</span><br><span class="line">    System.out.println(<span class="string">"有值Optional.orElseGet"</span>);</span><br><span class="line">    orElseGet = stringOptional.orElseGet(() -&gt; getDefault());</span><br><span class="line">    System.out.println(<span class="string">"有值Optional.orElse结果："</span>+orElse);</span><br><span class="line">    System.out.println(<span class="string">"有值Optional.orElseGet结果："</span>+orElseGet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"   获取默认值中..run getDeafult method"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">空Optional.orElse</span><br><span class="line">   获取默认值中..run getDeafult method</span><br><span class="line">空Optional.orElseGet</span><br><span class="line">   获取默认值中..run getDeafult method</span><br><span class="line">空Optional.orElse结果：hello</span><br><span class="line">空Optional.orElseGet结果：hello</span><br><span class="line">--------------------------------</span><br><span class="line">有值Optional.orElse</span><br><span class="line">   获取默认值中..run getDeafult method</span><br><span class="line">有值Optional.orElseGet</span><br><span class="line">有值Optional.orElse结果：hello</span><br><span class="line">有值Optional.orElseGet结果：hello</span><br></pre></td></tr></table></figure><p>在这个例子中会发现 <code>orElseGet</code> 传入的方法在有值的情况下并不会运行。而 <code>orElse</code>却都会运行。</p><h1 id="6-Optional-异常"><a href="#6-Optional-异常" class="headerlink" title="6. Optional 异常"></a>6. Optional 异常</h1><p>使用 <code>orElseThrow</code> 在没有值的时候抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有值，抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenIsNullThrowExceTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有值，抛出异常</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    String value = emptyOptional.orElseThrow(() -&gt; <span class="keyword">new</span> Exception(<span class="string">"发现空值"</span>));</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: 发现空值</span><br><span class="line">at net.codingme.feature.jdk8.Jdk8Optional.lambda$whenIsNullThrowExceTest$<span class="number">7</span>(Jdk8Optional.java:<span class="number">118</span>)</span><br><span class="line">at java.util.Optional.orElseThrow(Optional.java:<span class="number">290</span>)</span><br><span class="line">at net.codingme.feature.jdk8.Jdk8Optional.whenIsNullThrowExceTest(Jdk8Optional.java:<span class="number">118</span>)</span><br></pre></td></tr></table></figure><h1 id="7-Optional-函数接口"><a href="#7-Optional-函数接口" class="headerlink" title="7. Optional 函数接口"></a>7. Optional 函数接口</h1><p><code>Optional</code> 随 JDK8 一同出现，必然会有一些 JDK8 中的新特性，比如函数接口。<code>Optional</code> 中主要有三个传入函数接口的方法，分别是<code>filter</code>，<code>map</code>，<code>flatMap</code>。这里面的实现其实是 JDK8 的另一个新特性了，因此这里只是简单演示，不做解释。后面放到其他 JDK8 新特性文章里介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">functionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// filter 过滤</span></span><br><span class="line">    Optional&lt;Integer&gt; optional123 = Optional.of(<span class="number">123</span>);</span><br><span class="line">    optional123.filter(num -&gt; num == <span class="number">123</span>).ifPresent(num -&gt; System.out.println(num));</span><br><span class="line"></span><br><span class="line">    Optional&lt;Integer&gt; optional456 = Optional.of(<span class="number">456</span>);</span><br><span class="line">    optional456.filter(num -&gt; num == <span class="number">123</span>).ifPresent(num -&gt; System.out.println(num));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map 转换</span></span><br><span class="line">    Optional&lt;Integer&gt; optional789 = Optional.of(<span class="number">789</span>);</span><br><span class="line">    optional789.map(String::valueOf).map(String::length).ifPresent(length -&gt; System.out.println(length));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="8-Optional-案例"><a href="#8-Optional-案例" class="headerlink" title="8. Optional 案例"></a>8. Optional 案例</h1><p>假设有计算机、声卡、usb 三种硬件（下面的代码中使用了 <code>Lombok</code> 的 <code>@Data</code> 注解）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;SoundCard&gt; soundCard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声卡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Usb&gt; usb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * USB</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usb</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算机可能会有声卡，声卡可能会有 usb。那么怎么取得 usb 版本呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑里【有可能】有声卡</span></span><br><span class="line"><span class="comment"> * 声卡【有可能】有USB接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optionalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 没有声卡，没有 Usb 的电脑</span></span><br><span class="line">    Computer computerNoUsb = <span class="keyword">new</span> Computer();</span><br><span class="line">    computerNoUsb.setSoundCard(Optional.empty());</span><br><span class="line">    <span class="comment">// 获取 usb 版本</span></span><br><span class="line">    Optional&lt;Computer&gt; computerOptional = Optional.ofNullable(computerNoUsb);</span><br><span class="line">    String version = computerOptional.flatMap(Computer::getSoundCard).flatMap(SoundCard::getUsb)</span><br><span class="line">        .map(Usb::getVersion).orElse(<span class="string">"UNKNOWN"</span>);</span><br><span class="line">    System.out.println(version);</span><br><span class="line">    System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有值，则输出</span></span><br><span class="line">    SoundCard soundCard = <span class="keyword">new</span> SoundCard();</span><br><span class="line">    Usb usb = <span class="keyword">new</span> Usb();</span><br><span class="line">    usb.setVersion(<span class="string">"2.0"</span>);</span><br><span class="line">    soundCard.setUsb(Optional.ofNullable(usb));</span><br><span class="line">    Optional&lt;SoundCard&gt; optionalSoundCard = Optional.ofNullable(soundCard);</span><br><span class="line">    optionalSoundCard.ifPresent(System.out::println);</span><br><span class="line">    <span class="comment">// 如果有值，则输出</span></span><br><span class="line">    <span class="keyword">if</span> (optionalSoundCard.isPresent()) &#123;</span><br><span class="line">        System.out.println(optionalSoundCard.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出没有值，则没有输出</span></span><br><span class="line">    Optional&lt;SoundCard&gt; optionalSoundCardEmpty = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    optionalSoundCardEmpty.ifPresent(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选 Usb2.0</span></span><br><span class="line">    optionalSoundCard.map(SoundCard::getUsb)</span><br><span class="line">            .filter(usb1 -&gt; <span class="string">"3.0"</span>.equals(usb1.map(Usb::getVersion)</span><br><span class="line">            .orElse(<span class="string">"UBKNOW"</span>)))</span><br><span class="line">            .ifPresent(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UNKNOWN</span><br><span class="line">-----------------</span><br><span class="line">SoundCard(usb=Optional[Usb(version=<span class="number">2.0</span>)])</span><br><span class="line">SoundCard(usb=Optional[Usb(version=<span class="number">2.0</span>)])</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><h1 id="9-Optional-总结"><a href="#9-Optional-总结" class="headerlink" title="9. Optional 总结"></a>9. Optional 总结</h1><p>在本文中，我们看到了如何使用 Java SE8 的 <code>java.util.Optional</code> 类。<code>Optional</code> 类的目的不是为了替换代码中的每个空引用，而是为了帮助更好的设计程序，让使用者可以仅通过观察属性类型就可以知道会不会有空值。另外，<code>Optional</code>不提供直接获取值的方法，使用时会强迫你处理不存在的情况。间接的让你的程序免受空指针的影响。</p><p>文中代码已经上传 <a href="https://github.com/niumoo/jdk-feature" target="_blank" rel="noopener">Github</a>。</p><p><a href="https://github.com/niumoo/jdk-feature" target="_blank" rel="noopener">https://github.com/niumoo/jdk-feature</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;如果你没有处理过空指针，那么你不是一位真正的 Java 程序员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;空指针确实会产生很多问题，我们经常遇到空的引用，然后又想从这个空的引用上去获取其他的值，接着理所当然的碰到了 &lt;code&gt;NullPointException&lt;/code&gt;。这是你可能会想，这报错很好处理，然后你看了眼报错行数，对比了下代码。脑海里瞬间闪过 ”对对对，这里有可能为空“，然后加上 &lt;code&gt;null check&lt;/code&gt;轻松处理。然而你不知道这已经是你处理的第多少个空指针异常了。&lt;br&gt;
    
    </summary>
    
      <category term="Jdk 新特性" scheme="https://www.codingme.net/categories/Jdk-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="jdk8" scheme="https://www.codingme.net/tags/jdk8/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十五）如何编写自己的 Springboot starter</title>
    <link href="https://www.codingme.net/2019/11/springboot/springboot-15-my-starter/"/>
    <id>https://www.codingme.net/2019/11/springboot/springboot-15-my-starter/</id>
    <published>2019-11-01T00:08:08.000Z</published>
    <updated>2019-11-01T00:42:48.642Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/springboot-15-my-starter/1572539675483.png" alt="1572539675483"></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p><code>Springboot</code> 中的自动配置确实方便，减少了我们开发上的复杂性，那么自动配置原理是什么呢？之前我也写过了一篇文章进行了分析。<br><a href="https://www.codingme.net/2019/01/springboot/springboot03-auto-config/">Springboot 系列（三）Spring Boot 自动配置</a>。<br><a id="more"></a><br>由于自动配置用到了配置文件的绑定，如果你还不知道常见的配置文件的用法，可以参考这篇文章。<br><a href="https://www.codingme.net/2019/01/springboot/springboot03-auto-config/">Springboot 系列（二）Spring Boot 配置文件</a>。</p><p>在这一次，通过学习 <code>Springboot</code> 自动配置模式，编写一个自己的 <code>starter</code>，用来加深对自动配置的理解。</p><p>熟悉模式，有助于提升编写的 <code>starter</code> 的规范性，编写自己的 <code>starter</code> 之前先来学习 <code>Springboot</code> 官方 <code>starter</code> 以及常见框架的整合 <code>starter</code> 的编写方式 ，可以领略到其中的奥秘。</p><h1 id="2-Springboot-官方模式"><a href="#2-Springboot-官方模式" class="headerlink" title="2. Springboot 官方模式"></a>2. Springboot 官方模式</h1><p>选择一个官方的自动配置进行分析，这里就选择常见的配置端口号配置。</p><h2 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1. 引入依赖"></a>2.1. 引入依赖</h2><p>使用端口号之前我们需要先引入 web 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你观察 <code>starter</code> 多的话，也许你发已经发现了一个<strong>模式</strong>，<code>Springboot</code> 官方的 <code>starter</code>的名字都是  <code>spring-boot-starter-xxxx</code>命名的。</p><p>查看 <code>spring-boot-starter-web</code> 会发现，其实这个依赖只是一个空盒子，除了依赖其他 <code>pom</code> 之外，没有一行代码。</p><p><img src="/assets/springboot-15-my-starter/1572480685107.png" alt="spring-boot-starter-web"></p><p>这时，发现了另外一个<strong>模式</strong>：<code>starter</code> 只依赖其他 <code>pom</code>，不做代码实现。</p><p>那么 <code>spring-boot-starter-web</code> 到底依赖了哪些内容？</p><p><img src="/assets/springboot-15-my-starter/1572481136481.png" alt="spring-boot-starter-web 的依赖"></p><p>观察这个依赖信息，然后再参照其他的官方 <code>starter</code> ，可以找到几个固定的引入，可以被称之为<strong>模式</strong>的依赖引入。</p><ol><li>依赖 <code>spring-boot-starter</code>。</li><li>依赖 <code>spring-boot-autoconfigure</code>。</li></ol><h2 id="2-2-自动配置"><a href="#2-2-自动配置" class="headerlink" title="2.2. 自动配置"></a>2.2. 自动配置</h2><p>引入依赖只有配置端口号，像这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8090</span><br></pre></td></tr></table></figure><p>IDEA 中可以通过点击 <code>server.port</code> 找到这个配置绑定的类文件。可以看到配置最终会注入到类<code>ServerProperties</code> 类的 <code>port</code> 属性上。</p><p><img src="/assets/springboot-15-my-starter/1572478509712.png" alt="Server 属性配置"></p><p>那么这个 <code>ServerProperties</code> 到底是哪里使用的呢？继续查找，找到一个和 <code>Servlet</code> 的有关的调用。</p><p><img src="/assets/springboot-15-my-starter/1572478794011.png" alt="getPort 的调用"></p><p>发现是被 <code>ServletWebServerFactoryCustomizer</code>类进行了调用，这个类里面定义了 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerProperties serverProperties;</span><br></pre></td></tr></table></figure><p>用来使用配置的属性。<br>继续查看这个类的调用，发现只有一个类使用这个类，这个类是<code>ServletWebServerFactoryAutoConfiguration</code>。  </p><p><img src="/assets/springboot-15-my-starter/1572479738431.png" alt="ServletWebServerFactoryAutoConfiguration 类"></p><p>根据我们对注解的理解，这个类就是自动配置主要类了。同时自动配置类都是以 <code>AutoConfiguration</code> 结尾。</p><p>看这个类的几个注解的意思。  </p><ol><li>优先级别较高。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br></pre></td></tr></table></figure><ol start="2"><li>只有在 <code>ServletRequest</code> 类存在和是 Web 应用时生效。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest.class)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br></pre></td></tr></table></figure><ol start="3"><li>开启了 <code>ServerProperties</code> 的配置绑定。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties.class)</span><br></pre></td></tr></table></figure><ol start="4"><li>导入了几个类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span><br></pre></td></tr></table></figure><p>同时注入配置到 Bean 工厂以供其他地方调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletWebServerFactoryCustomizer <span class="title">servletWebServerFactoryCustomizer</span><span class="params">(ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动配置仅仅是这些东西吗？根据之前文章里的分析，我们知道不止代码，至少还有一个指定自动配置类的配置文件需要读取。也就是 <code>spring.factories</code> 文件。</p><p><img src="/assets/springboot-15-my-starter/1572480162756.png" alt="spring.factories"></p><p>如果你不知道，可以先看这篇文章。<a href="https://www.codingme.net/2019/01/springboot/springboot03-auto-config/">Springboot 系列（三）Spring Boot 自动配置</a> 。<br>事实确实如此，可以在 <code>spring.factories</code> 中找到上面跟踪到的类。<br>也就是 <code>ServletWebServerFactoryAutoConfiguration</code>.</p><p>根据上面的分析，可以发现 <code>Springboot</code> 官方 <code>starter</code> 的几个<strong>模式</strong>。  </p><ol><li>使用 <code>XXXProperties</code> 自动绑定 <code>XXX</code> 开头的配置信息，如：<code>ServerProperties</code>。</li><li>把 <code>XXXProperties</code> 定义到要使用的类中，如：<code>ServletWebServerFactoryCustomizer</code>。</li><li>编写一个 <code>XXXAutoConfiguration</code> ，开启  <code>XXXProperties</code> 的自动配置，限定生效场景，创建需要的类到 <code>Bean</code> 工厂。如：<code>ServletWebServerFactoryAutoConfiguration</code>。</li></ol><h1 id="3-第三方集成模式"><a href="#3-第三方集成模式" class="headerlink" title="3. 第三方集成模式"></a>3. 第三方集成模式</h1><p><code>Springboot</code> 官方如果把所有的框架都编写成 <code>starter</code>，是不现实的。因此很多第三方框架需要主动集成到 <code>springboot</code>，所以我们选择一个常用的框架分析它的 <code>starter</code> 实现。因为已经看过了 <code>springboot</code> 官方 <code>starter</code> 是如何配置的， 第三方框架也是类似，所以在下面观察的过程中会直接指出相同点，而不再做对比详细对比。</p><p>这里选择 <code>mybatis-spring-boot-starter</code> 进行学习分析。</p><h2 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里 <code>mybatis</code> 框架的 <code>starter</code> 依赖符合一定的<strong>规则</strong>，即 <strong>xxx-spring-boot-starter</strong>.</p><p>观察这个 <code>starter</code>，发现它也没有做任何的代码实现，这一点和 <code>springboot</code> 官方一致。</p><p><img src="/assets/springboot-15-my-starter/1572532932799.png" alt="mybatis-spring-boot-starter"></p><p>查看 <code>mybatis-spring-boot-starter</code> 的依赖项，有很多，其中和自动配置有关的主要是。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-自动配置"><a href="#3-2-自动配置" class="headerlink" title="3.2 自动配置"></a>3.2 自动配置</h2><p>查看 <code>mybatis-spring-boot-autoconfigure</code> 的内容发现和 <code>springboot</code> 官方的 <code>autoconfigure</code>结构上是差不多的。</p><p><img src="/assets/springboot-15-my-starter/1572533517315.png" alt="mybatis-spring-boot-autoconfigure"></p><p><code>mybatis</code> 的自动配置也是通过 <code>spring.factories</code> 来指明自动配置，然后通过 <code>XxxAutoConfiguration</code> 绑定 <code>XxxProperties</code> 来进行自动配置.</p><p><img src="/assets/springboot-15-my-starter/1572533809395.png" alt="MybatisAutoConfiguration"></p><p>在原理上，和上面 <code>springboot</code> 官方的 <code>starter</code>是相同的，所以不做过多的介绍了。</p><h1 id="4-编写自己的-starter"><a href="#4-编写自己的-starter" class="headerlink" title="4. 编写自己的 starter"></a>4. 编写自己的 starter</h1><p>说了那么多，终于到了实操环节，通过上面的介绍，我们可以大致得出编写自己的 <code>starter</code>步骤。</p><ol><li>创建名字为 <code>xxx-spring-boot-starter</code> 的启动器项目。</li><li>创建名字为 <code>xxx-spring-boot-autoconfigure</code>的项目。<ul><li>编写属性绑定类 <code>xxxProperties</code>.</li><li>编写服务类，引入 <code>xxxProperties</code>.</li><li>编写自动配置类<code>XXXAutoConfiguration</code>注入配置。</li><li>创建 <code>spring.factories</code> 文件，用于指定要自动配置的类。</li></ul></li><li>启动器项目为空项目，用来引入 <code>xxx-spring-boot-autoconfigure</code>等其他依赖。</li><li>项目引入 <code>starter</code>，配置需要配置的信息。</li></ol><h2 id="4-1-创建启动器项目"><a href="#4-1-创建启动器项目" class="headerlink" title="4.1 创建启动器项目"></a>4.1 创建启动器项目</h2><p>由于启动器不需要代码实现，只需要依赖其他项目，所以直接创建一个空的 maven 项目。但是名字要规范。<br>这里创建的 <code>starter</code> 是 <code>myapp-spring-boot-starter</code>。</p><p><img src="/assets/springboot-15-my-starter/1572534904150.png" alt="myapp-spring-boot-starter"></p><p>pom 文件非常简单，只需要引入接下来要创建的 <code>myapp-spring-boot-autoconfigure</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.codingme.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  引入自动配置项目 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.codingme.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-创建自动配置项目"><a href="#4-2-创建自动配置项目" class="headerlink" title="4.2 创建自动配置项目"></a>4.2 创建自动配置项目</h2><p>结合上面对 <code>starter</code> 的分析，直接创建一个名字为 <code>myapp-spring-boot-autoconfigure</code> 的项目。项目中只引入 <code>springboot</code> 父项目以及 <code>spring-boot-starter</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.codingme.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myapp-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目的总体结构看图。</p><p><img src="/assets/springboot-15-my-starter/1572536336072.png" alt="myapp-spring-boot-starter-autoconfigure"></p><p>在 <code>HelloProperties</code>中通过注解 <code>@ConfigurationProperties(prefix = &quot;myapp.hello&quot;)</code>让类中的属性与 <code>myapp.hello</code>开头的配置进行绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/29 23:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"myapp.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>HelloService</code>中的 <code>sayHello</code>方法使用 <code>HelloProperties</code> 中自动绑定的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">"，"</span> + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让 <code>HelloService</code> 可以自动注入且能正常使用 <code>HelloProperties</code>，所以我们在<br><code>HelloServiceAutoConfiguration</code> 类中把 <code>HelloProperties.class</code> 引入，然后把 <code>HelloService</code> 注入到 <code>Bean</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * web应用才生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 让属性文件生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties.class)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 声明是一个配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HelloService helloService = <span class="keyword">new</span> HelloService();</span><br><span class="line">        helloService.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在 <code>spring.factories</code>中只需要指定要自动配置的类即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">net.codingme.starter.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure><p>到这里，自动配置项目就完成了。可以在 <code>myapp-spring-boot-autoconfigure</code>项目执行 <code>mvn install</code> 把自动配置项目打包到本地仓库，然后使用相同的命令把 <code>myapp-spring-boot-starter</code> 安装到仓库。因为后者依赖于前者项目，所以这里前者需要先进 <code>mvn install</code>。</p><h2 id="4-3-使用自定义的启动器"><a href="#4-3-使用自定义的启动器" class="headerlink" title="4.3 使用自定义的启动器"></a>4.3 使用自定义的启动器</h2><p>创建一个 <code>springboot</code>项目<code>myapp-spring-boot-starter-test</code>。</p><p><img src="/assets/springboot-15-my-starter/1572537470601.png" alt="myapp-spring-boot-starter-test"></p><p>引入 <code>web</code> 依赖，引入自己编写的 <code>myapp-spring-boot-starter</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入自己的 starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.codingme.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一个 <code>HelloController</code> 注入自动配置里的 <code>HelloService</code>用于测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 <code>autoConfigure</code>  项目中定义了 <code>sayHello</code>  方法会输出“Hello”+传入的 name + 配置的 <code>hello.suffix</code>，所以我们在 <code>springboot</code> 配置文件中配置这个属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myapp.hello.suffix=早上好</span><br></pre></td></tr></table></figure><p>运行测试项目，访问 /hello 路径传入一个 name 看看自动配置有没有生效。</p><p><img src="/assets/springboot-15-my-starter/1572537886411.png" alt="访问测试"></p><p>从测试结果可以看到自动配置的早上好已经生效了。到这里自己编写的 <code>starter</code>也已经完工。</p><p>项目已经传到 <a href="https://github.com/niumoo/springboot/tree/master/springboot-starter" target="_blank" rel="noopener">Github</a>.<br> <a href="https://github.com/niumoo/springboot/tree/master/springboot-starter" target="_blank" rel="noopener">https://github.com/niumoo/springboot/tree/master/springboot-starter</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/springboot-15-my-starter/1572539675483.png&quot; alt=&quot;1572539675483&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Springboot&lt;/code&gt; 中的自动配置确实方便，减少了我们开发上的复杂性，那么自动配置原理是什么呢？之前我也写过了一篇文章进行了分析。&lt;br&gt;&lt;a href=&quot;https://www.codingme.net/2019/01/springboot/springboot03-auto-config/&quot;&gt;Springboot 系列（三）Spring Boot 自动配置&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="starter" scheme="https://www.codingme.net/tags/starter/"/>
    
  </entry>
  
  <entry>
    <title>原来热加载如此简单，手动写一个 Java 热加载吧</title>
    <link href="https://www.codingme.net/2019/10/jvm/java-hotput/"/>
    <id>https://www.codingme.net/2019/10/jvm/java-hotput/</id>
    <published>2019-10-28T00:35:00.000Z</published>
    <updated>2019-10-31T08:59:17.026Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="/assets/java-hotput/640.webp" alt="热加载"> </p><h1 id="1-什么是热加载"><a href="#1-什么是热加载" class="headerlink" title="1. 什么是热加载"></a>1. 什么是热加载</h1><p><strong>热加载</strong>是指可以在不重启服务的情况下让更改的代码生效，<strong>热加载</strong>可以显著的提升开发以及调试的效率，它是基于 Java 的类加载器实现的，但是由于热加载的不安全性，一般不会用于正式的生产环境。<br><a id="more"></a></p><h1 id="2-热加载与热部署的区别"><a href="#2-热加载与热部署的区别" class="headerlink" title="2. 热加载与热部署的区别"></a>2. 热加载与热部署的区别</h1><p>首先，不管是<strong>热加载</strong>还是热部署，都可以在不重启服务的情况下编译/部署项目，都是基于 Java 的类加载器实现的。</p><p>那么两者到底有什么区别呢？</p><p>在部署方式上：</p><ul><li>热部署是在服务器运行时<strong>重新部署</strong>项目。</li><li>热加载是在运行时<strong>重新加载 class</strong>。</li></ul><p>在实现原理上：</p><ul><li>热部署是直接重新<strong>加载整个应用</strong>，耗时相对较高。</li><li>热加载是在运行时<strong>重新加载 class</strong>，后台会启动一个线程不断检测你的类是否改变。</li></ul><p>在使用场景上：</p><ul><li>热部署更多的是在<strong>生产环境</strong>使用。</li><li>热加载则更多的是在<strong>开发环境</strong>上使用。线上由于安全性问题不会使用，难以监控。</li></ul><h1 id="3-类加载五个阶段"><a href="#3-类加载五个阶段" class="headerlink" title="3. 类加载五个阶段"></a>3. 类加载五个阶段</h1><p><img src="/assets/java-hotput/1572188635986.png" alt="类的生命周期"></p><p>可能你已经发现了，图中一共是7个阶段，而不是5个。是因为图是类的完整生命周期，如果要说只是类加载阶段的话，图里最后的使用（Using）和卸载（Unloading）并不算在内。</p><p>简单描述一下类加载的五个阶段：</p><ol><li><p>加载阶段：找到类的静态存储结构，加载到虚拟机，定义数据结构。用户可以自定义类加载器。</p></li><li><p>验证阶段：确保字节码是安全的，确保不会对虚拟机的安全造成危害。</p></li><li><p>准备阶段：确定内存布局，确定内存遍历，赋<strong>初始值</strong>（注意：是初始值，也有特殊情况）。</p></li><li><p>解析阶段： 将符号变成直接引用。</p></li><li><p>初始化阶段：调用程序自定义的代码。规定有且仅有5种情况必须进行初始化。</p><ol><li>new（实例化对象）、getstatic（获取类变量的值，被final修饰的除外，他的值在编译器时放到了常量池）、putstatic（给类变量赋值）、invokestatic（调用静态方法） 时会初始化</li><li>调用子类的时候，发现父类还没有初始化，则父类需要立即初始化。</li><li>虚拟机启动，用户要执行的主类，主类需要立即初始化，如 main 方法。</li><li>使用 java.lang.reflect包的方法对类进行反射调用方法 是会初始化。</li><li>当使用JDK 1.7的动态语言支持时， 如果一个java.lang.invoke.MethodHandle实例最后<br>的解析结果REF_getStatic、 REF_putStatic、 REF_invokeStatic的方法句柄， 并且这个方法句柄<br>所对应的类没有进行过初始化， 则需要先触发其初始化。  </li></ol></li></ol><p>要说明的是，类加载的 5 个阶段中，只有加载阶段是用户可以自定义处理的，而验证阶段、准备阶段、解析阶段、初始化阶段都是用 JVM 来处理的。</p><h1 id="4-实现类的热加载"><a href="#4-实现类的热加载" class="headerlink" title="4. 实现类的热加载"></a>4. 实现类的热加载</h1><h2 id="4-1-实现思路"><a href="#4-1-实现思路" class="headerlink" title="4.1 实现思路"></a>4.1 实现思路</h2><p>我们怎么才能手动写一个类的热加载呢？根据上面的分析，Java 程序在运行的时候，首先会把 class 类文件加载到 JVM 中，而类的加载过程又有五个阶段，五个阶段中只有<strong>加载阶段</strong>用户可以进行自定义处理，所以我们如果能在程序代码更改且重新编译后，让运行的进程可以实时获取到新编译后的 class 文件，然后重新进行加载的话，那么理论上就可以实现一个简单的 <strong>Java 热加载</strong>。</p><p>所以我们可以得出实现思路：</p><ol><li>实现自己的类加载器。</li><li>从自己的类加载器中加载要热加载的类。</li><li>不断轮训要热加载的类 class 文件是否有更新。</li><li>如果有更新，重新加载。</li></ol><h2 id="4-2-自定义类加载器"><a href="#4-2-自定义类加载器" class="headerlink" title="4.2 自定义类加载器"></a>4.2 自定义类加载器</h2><p>设计 Java 虚拟机的团队把类的加载阶段放到的 JVM 的外部实现（  通过一个类的全限定名来获取描述此类的二进制字节流  ）。这样就可以让程序自己决定如果获取到类信息。而实现这个加载动作的代码模块，我们就称之为 “类加载器”。</p><p>在 Java 中，类加载器也就是  <code>java.lang.ClassLoader</code>. 所以如果我们想要自己实现一个类加载器，就需要继承 <code>ClassLoader</code> 然后重写里面 <code>findClass</code>的方法，同时因为类加载器是 <code>双亲委派模型</code>实现（也就说。除了一个最顶层的类加载器之外，每个类加载器都要有父加载器，而加载时，会先询问父加载器能否加载，如果父加载器不能加载，则会自己尝试加载）所以我们还需要指定父加载器。</p><p>最后根据传入的类路径，加载类的代码看下面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自定义 Java类加载器来实现Java 类的热加载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClasslLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 要加载的 Java 类的 classpath 路径 */</span></span><br><span class="line">    <span class="keyword">private</span> String classpath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClasslLoader</span><span class="params">(String classpath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定父加载器</span></span><br><span class="line">        <span class="keyword">super</span>(ClassLoader.getSystemClassLoader());</span><br><span class="line">        <span class="keyword">this</span>.classpath = classpath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">this</span>.loadClassData(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name, data, <span class="number">0</span>, data.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载 class 文件中的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 传进来是带包名的</span></span><br><span class="line">            name = name.replace(<span class="string">"."</span>, <span class="string">"//"</span>);</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(classpath + name + <span class="string">".class"</span>));</span><br><span class="line">            <span class="comment">// 定义字节数组输出流</span></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((b = inputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">            inputStream.close();</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-定义要热加载的类"><a href="#4-3-定义要热加载的类" class="headerlink" title="4.3 定义要热加载的类"></a>4.3 定义要热加载的类</h2><p>我们假设某个接口（BaseManager.java）下的某个方法（logic）要进行热加载处理。</p><p>首先定义接口信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 实现这个接口的子类，需要动态更新。也就是热加载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logic</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个这个接口的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * BaseManager 这个接口的子类要实现类的热加载功能。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyManager</span> <span class="keyword">implements</span> <span class="title">BaseManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(LocalTime.now() + <span class="string">": Java类的热加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面我们要做的就是让这个类可以通过我们的 MyClassLoader 进行自定义加载。类的<strong>热加载</strong>应当只有在类的信息被更改然后重新编译之后进行重新加载。所以为了不意义的重复加载，我们需要判断 class 是否进行了更新，所以我们需要记录 class 类的修改时间，以及对应的类信息。</p><p>所以编译一个类用来记录某个类对应的某个类加载器以及上次加载的 class 的修改时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 封装加载类的信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 自定义的类加载器 */</span></span><br><span class="line">    <span class="keyword">private</span> MyClasslLoader myClasslLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 记录要加载的类的时间戳--&gt;加载的时间 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> loadTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 需要被热加载的类 */</span></span><br><span class="line">    <span class="keyword">private</span> BaseManager manager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadInfo</span><span class="params">(MyClasslLoader myClasslLoader, <span class="keyword">long</span> loadTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myClasslLoader = myClasslLoader;</span><br><span class="line">        <span class="keyword">this</span>.loadTime = loadTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyClasslLoader <span class="title">getMyClasslLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myClasslLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyClasslLoader</span><span class="params">(MyClasslLoader myClasslLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myClasslLoader = myClasslLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLoadTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadTime</span><span class="params">(<span class="keyword">long</span> loadTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadTime = loadTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseManager <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setManager</span><span class="params">(BaseManager manager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manager = manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-热加载获取类信息"><a href="#4-4-热加载获取类信息" class="headerlink" title="4.4 热加载获取类信息"></a>4.4 热加载获取类信息</h2><p>在实现思路里，我们知道轮训检查 class 文件是不是被更新过，所以每次调用要热加载的类时，我们都要进行检查类是否被更新然后决定要不要重新加载。为了方便这步的获取操作，可以使用一个简单的工厂模式进行封装。</p><p>要注意是加载 class 文件需要指定完整的路径，所以类中定义了 CLASS_PATH 常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 加载 manager 的工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 记录热加载类的加载信息 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, LoadInfo&gt; loadTimeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 要加载的类的 classpath */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_PATH = <span class="string">"D:\\IdeaProjectMy\\lab-notes\\target\\classes\\"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 实现热加载的类的全名称(包名+类名 ) */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MY_MANAGER = <span class="string">"net.codingme.box.classloader.MyManager"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseManager <span class="title">getManager</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        File loadFile = <span class="keyword">new</span> File(CLASS_PATH + className.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>) + <span class="string">".class"</span>);</span><br><span class="line">        <span class="comment">// 获取最后一次修改时间</span></span><br><span class="line">        <span class="keyword">long</span> lastModified = loadFile.lastModified();</span><br><span class="line">        System.out.println(<span class="string">"当前的类时间："</span> + lastModified);</span><br><span class="line">        <span class="comment">// loadTimeMap 不包含 ClassName 为 key 的信息，证明这个类没有被加载，要加载到 JVM</span></span><br><span class="line">        <span class="keyword">if</span> (loadTimeMap.get(className) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            load(className, lastModified);</span><br><span class="line">        &#125; <span class="comment">// 加载类的时间戳变化了，我们同样要重新加载这个类到 JVM。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (loadTimeMap.get(className).getLoadTime() != lastModified) &#123;</span><br><span class="line">            load(className, lastModified);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loadTimeMap.get(className).getManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载 class ，缓存到 loadTimeMap</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastModified</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String className, <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">        MyClasslLoader myClasslLoader = <span class="keyword">new</span> MyClasslLoader(className);</span><br><span class="line">        Class loadClass = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loadClass = myClasslLoader.loadClass(className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BaseManager manager = newInstance(loadClass);</span><br><span class="line">        LoadInfo loadInfo = <span class="keyword">new</span> LoadInfo(myClasslLoader, lastModified);</span><br><span class="line">        loadInfo.setManager(manager);</span><br><span class="line">        loadTimeMap.put(className, loadInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以反射的方式创建 BaseManager 的子类对象</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BaseManager <span class="title">newInstance</span><span class="params">(Class loadClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (BaseManager)loadClass.getConstructor(<span class="keyword">new</span> Class[] &#123;&#125;).newInstance(<span class="keyword">new</span> Object[] &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-热加载测试"><a href="#4-5-热加载测试" class="headerlink" title="4.5  热加载测试"></a>4.5  热加载测试</h2><p>直接写一个线程不断的检测要热加载的类是不是已经更改需要重新加载，然后运行测试即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 后台启动一条线程，不断检测是否要刷新重新加载，实现了热加载的类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgHandle</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            BaseManager manager = ManagerFactory.getManager(ManagerFactory.MY_MANAGER);</span><br><span class="line">            manager.logic();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MsgHandle()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码已经全部准备好了，最后一步，可以启动测试了。如果你是用的是 Eclipse ，直接启动就行了；如果是 IDEA ，那么你需要 DEBUG 模式启动（IDEA 对热加载有一定的限制）。</p><p>启动后看到控制台不断的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00:08:13.018: Java类的热加载</span><br><span class="line">00:08:15.018: Java类的热加载</span><br></pre></td></tr></table></figure><p>这时候我们随便更改下 MyManager 类的 logic 方法的输出内容然后保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(LocalTime.now() + <span class="string">": Java类的热加载 Oh~~~~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到控制台的输出已经自动更改了（IDEA 在更改后需要按 CTRL + F9）。</p><p><img src="/assets/java-hotput/1572192565262.png" alt="类的热加载"></p><p>代码已经放到Github: <a href="https://github.com/niumoo/lab-notes/" target="_blank" rel="noopener">https://github.com/niumoo/lab-notes/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;img src=&quot;/assets/java-hotput/640.webp&quot; alt=&quot;热加载&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;1-什么是热加载&quot;&gt;&lt;a href=&quot;#1-什么是热加载&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是热加载&quot;&gt;&lt;/a&gt;1. 什么是热加载&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;热加载&lt;/strong&gt;是指可以在不重启服务的情况下让更改的代码生效，&lt;strong&gt;热加载&lt;/strong&gt;可以显著的提升开发以及调试的效率，它是基于 Java 的类加载器实现的，但是由于热加载的不安全性，一般不会用于正式的生产环境。&lt;br&gt;
    
    </summary>
    
      <category term="Java 虚拟机" scheme="https://www.codingme.net/categories/Java-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="jvm" scheme="https://www.codingme.net/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Jdk14 都要出了，Jdk8 的时间处理姿势还不了解一下？</title>
    <link href="https://www.codingme.net/2019/10/jdk/jdk8-time/"/>
    <id>https://www.codingme.net/2019/10/jdk/jdk8-time/</id>
    <published>2019-10-24T00:01:01.000Z</published>
    <updated>2019-10-24T00:28:44.954Z</updated>
    
    <content type="html"><![CDATA[<p>当前时间：2019年10月24日。距离 JDK 14 发布时间（2020年3月17日）还有多少天？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 距离JDK 14 发布还有多少天？</span></span><br><span class="line">LocalDate jdk14 = LocalDate.of(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">17</span>);</span><br><span class="line">LocalDate nowDate = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"距离JDK 14 发布还有："</span>+nowDate.until(jdk14,ChronoUnit.DAYS)+<span class="string">"天"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>JDK 8 已经在 2014年 3月 18日正式可用 ，距离现在已经 5年多时间过去了。5年时间里很多企业也都换上了 JDK 8，明年 3月份 Jdk14 也要来了，那么 Jdk 8 的新特性你真的用起来了吗？我准备写一个 Jdk 8开始的新特性介绍以及使用的系列文章，后续 Jdk 也会继续更新，你如果需要的话不妨关注下博客或者公众号。</p><h2 id="1-时间处理类"><a href="#1-时间处理类" class="headerlink" title="1. 时间处理类"></a>1. 时间处理类</h2><p>Jdk8 带来了全新的时间处理工具类，用于代替之前存在缺陷的时间处理。新的时间处理相比之前更加简单好用。</p><p><img src="/assets/jdk8-time/1571847428464-1571848139345.png" alt="Jdk8 时间处理类"></p><p>常用的类有以下几个类。</p><table><thead><tr><th>时间相关类</th><th>介绍</th></tr></thead><tbody><tr><td>LocalDateTime</td><td>时间处理类，最高精确到纳秒</td></tr><tr><td>LocalDate</td><td>时间处理类，最高精确到天</td></tr><tr><td>DateTimeFormatter</td><td>时间格式化</td></tr><tr><td>ZoneId</td><td>时区设置类</td></tr></tbody></table><h2 id="2-时间获取"><a href="#2-时间获取" class="headerlink" title="2. 时间获取"></a>2. 时间获取</h2><p>使用不同的类可以获取不同精度的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nowTimeTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前精确时间</span></span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间："</span> + now);</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间："</span> + now.getYear() + <span class="string">"-"</span> + now.getMonthValue() + <span class="string">"-"</span> + now.getDayOfMonth() + <span class="string">" "</span> + now.getHour() + <span class="string">"-"</span> + now.getMinute() + <span class="string">"-"</span> + now.getSecond());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前日期</span></span><br><span class="line">    LocalDate localDate = LocalDate.now();</span><br><span class="line">    System.out.println(<span class="string">"当前日期："</span> + localDate);</span><br><span class="line">    System.out.println(<span class="string">"当前日期："</span> + localDate.getYear() + <span class="string">"-"</span> + localDate.getMonthValue() + <span class="string">"-"</span> + localDate.getDayOfMonth());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当天时间</span></span><br><span class="line">    LocalTime localTime = LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当天时间："</span> + localTime);</span><br><span class="line">    System.out.println(<span class="string">"当天时间："</span> + localTime.getHour() + <span class="string">":"</span> + localTime.getMinute() + <span class="string">":"</span> + localTime.getSecond());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有时区的当前精确时间</span></span><br><span class="line">    ZonedDateTime nowZone = LocalDateTime.now().atZone(ZoneId.systemDefault());</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间（有时区）："</span> + nowZone);</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间（有时区）："</span> + nowZone.getYear() + <span class="string">"-"</span> + nowZone.getMonthValue() + <span class="string">"-"</span> + nowZone.getDayOfMonth() + <span class="string">" "</span> + nowZone.getHour() + <span class="string">"-"</span> + nowZone.getMinute() + <span class="string">"-"</span> + nowZone.getSecond());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到的时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当前精确时间：2019-10-24T00:26:41.724</span><br><span class="line">当前精确时间：2019-10-24 0-26-41</span><br><span class="line">当前日期：2019-10-24</span><br><span class="line">当前日期：2019-10-24</span><br><span class="line">当前精确时间（有时区）：2019-10-24T00:26:41.725+08:00[GMT+08:00]</span><br><span class="line">当前精确时间（有时区）：2019-10-24 0-26-41</span><br><span class="line">当天时间：00:26:41.725</span><br><span class="line">当天时间：0:26:41</span><br></pre></td></tr></table></figure><h2 id="3-时间创建"><a href="#3-时间创建" class="headerlink" title="3. 时间创建"></a>3. 时间创建</h2><p>可以指定年月日时分秒创建一个时间类，也可以使用字符串直接转换成时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime ofTime = LocalDateTime.of(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间："</span> + ofTime);</span><br><span class="line"></span><br><span class="line">    LocalDate localDate = LocalDate.of(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">01</span>);</span><br><span class="line">    System.out.println(<span class="string">"当前日期："</span> + localDate);</span><br><span class="line"></span><br><span class="line">    LocalTime localTime = LocalTime.of(<span class="number">12</span>, <span class="number">01</span>, <span class="number">01</span>);</span><br><span class="line">    System.out.println(<span class="string">"当天时间："</span> + localTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前精确时间：2019-10-01T08:08:08</span><br><span class="line">当前日期：2019-10-01</span><br><span class="line">当天时间：12:01:01</span><br></pre></td></tr></table></figure><h2 id="4-时间转换"><a href="#4-时间转换" class="headerlink" title="4. 时间转换"></a>4. 时间转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 日期转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertTimeTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime parseTime = LocalDateTime.parse(<span class="string">"2019-10-01T22:22:22.222"</span>);</span><br><span class="line">    System.out.println(<span class="string">"字符串时间转换："</span> + parseTime);</span><br><span class="line"></span><br><span class="line">    LocalDate formatted = LocalDate.parse(<span class="string">"20190101"</span>, DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">    System.out.println(<span class="string">"字符串时间转换-指定格式："</span> + formatted);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Date 转换成 LocalDateTime</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    ZoneId zoneId = ZoneId.systemDefault();</span><br><span class="line">    System.out.println(<span class="string">"Date 转换成 LocalDateTime："</span> + LocalDateTime.ofInstant(date.toInstant(), zoneId));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LocalDateTime 转换成 Date</span></span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">    Date toDate = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());</span><br><span class="line">    System.out.println(<span class="string">"LocalDateTime 转换成 Date："</span> + toDate);\</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 当前时间转时间戳</span></span><br><span class="line">    <span class="keyword">long</span> epochMilli = LocalDateTime.now().toInstant(ZoneOffset.of(<span class="string">"+8"</span>)).toEpochMilli();</span><br><span class="line">    System.out.println(<span class="string">"当前时间转时间戳："</span> + epochMilli);</span><br><span class="line">    <span class="comment">// 时间戳转换成时间</span></span><br><span class="line">    LocalDateTime epochMilliTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMilli), ZoneId.systemDefault());</span><br><span class="line">    System.out.println(<span class="string">"时间戳转换成时间："</span> + epochMilliTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串时间转换：2019-10-01T22:22:22.222</span><br><span class="line">字符串时间转换-指定格式：2019-01-01</span><br><span class="line">Date 转换成 LocalDateTime：2019-10-24T00:46:41.251</span><br><span class="line">LocalDateTime 转换成 Date：Thu Oct 24 00:46:41 GMT+08:00 2019</span><br><span class="line">当前时间转时间戳：1571849201258</span><br><span class="line">时间戳转换成时间：2019-10-24T00:46:41.258</span><br></pre></td></tr></table></figure><h2 id="5-时间格式化"><a href="#5-时间格式化" class="headerlink" title="5. 时间格式化"></a>5. 时间格式化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">formatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当前时间："</span> + now);</span><br><span class="line">    System.out.println(<span class="string">"格式化后："</span> + now.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));</span><br><span class="line">    System.out.println(<span class="string">"格式化后："</span> + now.format(DateTimeFormatter.ISO_LOCAL_DATE));</span><br><span class="line">    System.out.println(<span class="string">"格式化后："</span> + now.format(DateTimeFormatter.ISO_LOCAL_TIME));</span><br><span class="line">    System.out.println(<span class="string">"格式化后："</span> + now.format(DateTimeFormatter.ofPattern(<span class="string">"YYYY-MM-dd hh:mm:ss"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前时间：2019-10-24T00:37:44.867</span><br><span class="line">格式化后：2019-10-24T00:37:44.867</span><br><span class="line">格式化后：2019-10-24</span><br><span class="line">格式化后：00:37:44.867</span><br><span class="line">格式化后：2019-10-24 12:37:44</span><br></pre></td></tr></table></figure><h2 id="6-时间比较"><a href="#6-时间比较" class="headerlink" title="6. 时间比较"></a>6. 时间比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">diffTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    LocalDateTime yestory = now.minusDays(<span class="number">1</span>);</span><br><span class="line">    System.out.println(now + <span class="string">"在"</span> + yestory + <span class="string">"之后吗?"</span> + now.isAfter(yestory));</span><br><span class="line">    System.out.println(now + <span class="string">"在"</span> + yestory + <span class="string">"之前吗?"</span> + now.isBefore(yestory));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间差</span></span><br><span class="line">    <span class="keyword">long</span> day = yestory.until(now, ChronoUnit.DAYS);</span><br><span class="line">    <span class="keyword">long</span> month = yestory.until(now, ChronoUnit.MONTHS);</span><br><span class="line">    <span class="keyword">long</span> hours = yestory.until(now, ChronoUnit.HOURS);</span><br><span class="line">    <span class="keyword">long</span> minutes = yestory.until(now, ChronoUnit.MINUTES);</span><br><span class="line">    System.out.println(<span class="string">"相差月份"</span> + month);</span><br><span class="line">    System.out.println(<span class="string">"相差天数"</span> + day);</span><br><span class="line">    System.out.println(<span class="string">"相差小时"</span> + hours);</span><br><span class="line">    System.out.println(<span class="string">"相差分钟"</span> + minutes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 距离JDK 14 发布还有多少天？</span></span><br><span class="line">    LocalDate jdk14 = LocalDate.of(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">17</span>);</span><br><span class="line">    LocalDate nowDate = LocalDate.now();</span><br><span class="line">    System.out.println(<span class="string">"距离JDK 14 发布还有："</span> + nowDate.until(jdk14, ChronoUnit.DAYS) + <span class="string">"天"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-10-24T00:39:01.589在2019-10-23T00:39:01.589之后吗?true</span><br><span class="line">2019-10-24T00:39:01.589在2019-10-23T00:39:01.589之前吗?false</span><br><span class="line">相差月份0</span><br><span class="line">相差天数1</span><br><span class="line">相差小时24</span><br><span class="line">相差分钟1440</span><br><span class="line">距离JDK 14 发布还有：145天</span><br></pre></td></tr></table></figure><h2 id="7-时间加减"><a href="#7-时间加减" class="headerlink" title="7. 时间加减"></a>7. 时间加减</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期加减</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calcTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当前时间："</span>+now);</span><br><span class="line">    LocalDateTime plusTime = now.plusMonths(<span class="number">1</span>).plusDays(<span class="number">1</span>).plusHours(<span class="number">1</span>).plusMinutes(<span class="number">1</span>).plusSeconds(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"增加1月1天1小时1分钟1秒时间后："</span> + plusTime);</span><br><span class="line">    LocalDateTime minusTime = now.minusMonths(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">"减少2个月时间后："</span> + minusTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前时间：2019-10-24T00:41:08.877</span><br><span class="line">增加1月1天1小时1分钟1秒时间后：2019-11-25T01:42:09.877</span><br><span class="line">减少2个月时间后：2019-08-24T00:41:08.877</span><br></pre></td></tr></table></figure><h2 id="8-时间扩展方法"><a href="#8-时间扩展方法" class="headerlink" title="8. 时间扩展方法"></a>8. 时间扩展方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeFunctionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当前时间："</span> + now);</span><br><span class="line">    <span class="comment">// 第一天</span></span><br><span class="line">    LocalDateTime firstDay = now.withDayOfMonth(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"本月第一天："</span> + firstDay);</span><br><span class="line">    <span class="comment">// 当天最后一秒</span></span><br><span class="line">    LocalDateTime lastSecondOfDay = now.withHour(<span class="number">23</span>).withMinute(<span class="number">59</span>).withSecond(<span class="number">59</span>);</span><br><span class="line">    System.out.println(<span class="string">"当天最后一秒："</span> + lastSecondOfDay);</span><br><span class="line">    <span class="comment">// 最后一天</span></span><br><span class="line">    LocalDateTime lastDay = now.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">    System.out.println(<span class="string">"本月最后一天:"</span> + lastDay);</span><br><span class="line">    <span class="comment">// 是否闰年</span></span><br><span class="line">    System.out.println(<span class="string">"今年是否闰年："</span> + Year.isLeap(now.getYear()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前时间：<span class="number">2019</span>-<span class="number">10</span>-<span class="number">24</span>T00:<span class="number">43</span>:<span class="number">28.296</span></span><br><span class="line">本月第一天：<span class="number">2019</span>-<span class="number">10</span>-<span class="number">01</span>T00:<span class="number">43</span>:<span class="number">28.296</span></span><br><span class="line">当天最后一秒：<span class="number">2019</span>-<span class="number">10</span>-<span class="number">24</span>T23:<span class="number">59</span>:<span class="number">59.296</span></span><br><span class="line">本月最后一天:<span class="number">2019</span>-<span class="number">10</span>-<span class="number">31</span>T00:<span class="number">43</span>:<span class="number">28.296</span></span><br><span class="line">今年是否闰年：<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>Jdk 8 新的时间类使用起来相比之前显得更加方便简单。</p><p><img src="/assets/jdk8-time/1571850210772.png" alt="JDK8 之前时间处理"></p><p>Jdk 8 也把时间处理成独立成一个包，并且使用不同的类名加以区分。而不是像之前相同的类名不同的包。这样的方式使用起来也更加清晰。</p><p>🚀 代码已经上传到 <a href="https://github.com/niumoo/jdk-feature" target="_blank" rel="noopener">Github(https://github.com/niumoo/jdk-feature)</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当前时间：2019年10月24日。距离 JDK 14 发布时间（2020年3月17日）还有多少天？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 距离JDK 14 发布还有多少天？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LocalDate jdk14 = LocalDate.of(&lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LocalDate nowDate = LocalDate.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;距离JDK 14 发布还有：&quot;&lt;/span&gt;+nowDate.until(jdk14,ChronoUnit.DAYS)+&lt;span class=&quot;string&quot;&gt;&quot;天&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Jdk 新特性" scheme="https://www.codingme.net/categories/Jdk-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="jdk8" scheme="https://www.codingme.net/tags/jdk8/"/>
    
      <category term="时间" scheme="https://www.codingme.net/tags/%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>抛弃Eclipse，投入IDEA 的独孤求败江湖</title>
    <link href="https://www.codingme.net/2019/10/develop/idea-skill/"/>
    <id>https://www.codingme.net/2019/10/develop/idea-skill/</id>
    <published>2019-10-22T17:01:01.000Z</published>
    <updated>2019-10-23T12:36:53.554Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> “工欲善其事，必先利其器”<br>出处：孔子《论语》</p></blockquote><p>两年了，这是我的 IDEA <strong>实用技巧</strong>总结，从前我是一个 Eclipse 忠实用户，直到某天我用上了  <strong>IntelliJ IDEA</strong> ，Eclipse 开始在硬盘躺尸…….</p><p><img src="/assets/idea-skill/1571750577728.png" alt="IDEA 启动"></p><p><strong>IDEA</strong> 是一个非常好用的工具，它的语法十分智能，当你写了一段不怎么聪明（很傻）的代码时候，它会告诉你有更优的写法；当你掌握了常用的快捷键后，开发效率提升 N 倍；当你熟练使用时候，编码速度与编码质量都有质的飞跃。<br><a id="more"></a><br>那么说了那么多，到底在哪里才能买到呢？哦不，到底怎么使用呢？</p><h2 id="1-窗口切换-凌波微步"><a href="#1-窗口切换-凌波微步" class="headerlink" title="1.   窗口切换 - 凌波微步"></a>1.   窗口切换 - 凌波微步</h2><blockquote><p>「凌波微步」乃是一门极上乘的轻功身法，所以列于卷轴之末，以易经八八六十四卦为基础，使用者按特定顺序踏着卦象方位行进，从第一步到最后一步正好行走一个大圈。此步法精妙异常。<br>出处：金庸《天龙八部》。</p></blockquote><p>IDEA 中的 “凌波微步” 恰好就是这么一圈常用窗口，均匀分布在编辑窗口周围，且配以方便的快捷键，切换起来十分的迅速。</p><p><img src="/assets/idea-skill/1571756048466.png" alt="IDEA 窗口"></p><p>在实际的开发过程中，窗口切换的操作是很频繁的，下面的几个快捷键必不可少。</p><p>快捷键：</p><ul><li><p><strong>ALT +１</strong>显示/隐藏文件窗口⭐。</p></li><li><p><strong>ALT + 2</strong>显示/隐藏收藏窗口  。</p></li><li><p><strong>ALT + 4</strong> 显示/隐藏运行窗口   。</p></li><li><p><strong>ALT + 6</strong>显示/隐藏Todo窗口  。</p></li><li><p><strong>ALT + 7</strong>显示/隐藏类结构窗口。</p></li></ul><h2 id="2-项目切换-来而不往"><a href="#2-项目切换-来而不往" class="headerlink" title="2. 项目切换 - 来而不往"></a>2. 项目切换 - 来而不往</h2><blockquote><p>往而不来，非礼也；来而不往，亦非礼也。<br>出处: 《<a href="https://baike.baidu.com/item/礼记" target="_blank" rel="noopener">礼记</a>·<a href="https://baike.baidu.com/item/曲礼" target="_blank" rel="noopener">曲礼</a>上》</p></blockquote><p><img src="/assets/idea-skill/1571756766101.png" alt="窗口切换"></p><p>开发当中很多时候会同时打开多个项目，如果这时候你还傻傻的点击窗口切换窗口，无疑效率低下，点来点去之间影响了敲击键盘的快感。既然同时打开了多个项目窗口，作为窗口邻居都不能自由来往有点不尽人意。</p><p>快捷键：</p><ul><li>上一个项目窗口 <strong>CTRL + ALT + [。</strong></li><li>上一个项目窗口 <strong>CTRL + ALT + ]</strong>。</li></ul><h2 id="3-文件定位-来去自如"><a href="#3-文件定位-来去自如" class="headerlink" title="3. 文件定位 - 来去自如"></a>3. 文件定位 - 来去自如</h2><blockquote><p> 身如不系之舟，一任流任坎止；心似既灰之木，何妨刀割香涂？来去自如乎。<br>出处：战国·庄子《庄子·列御寇》 </p></blockquote><p>文件定位是<strong>非常常用</strong>的操作。</p><ul><li><strong>CTRL + N</strong> 搜索 Java 类文件⭐。</li><li><p><strong>CTRL + SHIFT + N</strong> 搜索所有文件。</p></li><li><p><strong>CTRL + E</strong> 打开最近浏览文件  ，再次 <strong>CTRL + E</strong> 可以只显示更改的文件。</p></li><li><strong>CTRL + SHIFT + E</strong> 打开最近浏览文件 ，再次 <strong>CTRL + SHIFT + E</strong> 可以只显示更改的文件。</li><li><strong>SHIFT + 鼠标左键</strong>，关闭文件。</li></ul><h2 id="4-代码定位-百步穿杨"><a href="#4-代码定位-百步穿杨" class="headerlink" title="4. 代码定位 - 百步穿杨"></a>4. 代码定位 - 百步穿杨</h2><blockquote><p> 楚有养由基者，善射；去柳叶百步而射之，百发百中。<br> 出处： 《战国策 · 西周策》 </p></blockquote><p>用过 Eclipse 的想必都知道 Eclipse 的文本搜索速度是多么缓慢，多个项目搜索时候，看着那缓慢的进度条，仿佛在虚度生命。而 <strong>IDEA</strong> 速度保证让你第一次使用时就为之惊叹。毫秒级的响应速度（自动忽略CPU 百分百，手动滑稽），智能的搜索模式，不要太舒服。</p><p>那么又说了那么多，到底该怎么用呢？</p><p><strong>超级常用</strong>快捷键：</p><ul><li><strong>CTRL + SHIFT + F</strong> 项目代码全文搜索⭐。</li><li><strong>CTRL + SHIFT + ALT + N</strong> 搜索函数，自动模糊匹配，十分强大。</li><li><strong>CTRL + W</strong> 万能选中快捷键，爱不释手，多层嵌套时非常好用⭐。</li></ul><h2 id="5-代码操作-出神入化"><a href="#5-代码操作-出神入化" class="headerlink" title="5. 代码操作 - 出神入化"></a>5. 代码操作 - 出神入化</h2><blockquote><p> 我不曾出声，他连忙答应。金圣叹：‘真正出神入化之笔’<br>出处： 元·王实甫《西厢记》</p></blockquote><p>基本的代码操作在日常开发中才是用的最多的，小小的快捷键让我们的开发舒适感不断爬升。低调低调，都是基本操作。</p><ul><li><strong>ALT + ENTER</strong> 万能智能键，强大到无法自拔⭐。</li><li><strong>CTRL + ALT + L</strong> 代码格式化⭐。</li><li><strong>CTRL + SHIFT + R</strong> 项目全文代码查找与替换⭐。</li><li><strong>SHIFT + F6</strong> 重构 - 重命名⭐。</li><li><strong>iter + Tab</strong> 生成 增强for 循环⭐。</li><li><strong>itar + Tab</strong> 生成 for 循环。</li><li><strong>psvm + Tab</strong> 生成 main 方法。</li><li><strong>sout + Tab</strong> 生成 System.out.println()。</li><li><strong>CTRL + F</strong> 查找文本。</li><li><strong>CTRL + R</strong> 替换文本。</li><li><strong>CTRL + D</strong> 复制行。</li><li><strong>CTRL + X</strong> 剪切行。</li><li><strong>CTRL + Y</strong> 删除行。</li><li><strong>CTRL + /</strong>  行注释或取消行注释。</li><li><strong>CTRL + SHIFT + /</strong> 块注释或取消块注释。</li><li><strong>CTRL + SHIFT + ENTER</strong>  自动补上结尾分号，或者补上结尾花括号{}。</li><li><strong>CTRL + U</strong> 大小写切换。</li></ul><h2 id="6-惊世骇俗-深藏不露"><a href="#6-惊世骇俗-深藏不露" class="headerlink" title="6. 惊世骇俗 - 深藏不露"></a>6. 惊世骇俗 - 深藏不露</h2><p>不得不说， <strong>IDEA</strong> 用起来更加舒服的地方就是它总能想你所想，在使用的过程中，经常发现意料之外的惊喜功能。</p><h3 id="6-1-集成插件"><a href="#6-1-集成插件" class="headerlink" title="6.1  集成插件"></a>6.1  集成插件</h3><p><img src="/assets/idea-skill/1571762835305.png" alt="IDEA 插件"></p><p>一个好用的插件可以让开发事半功倍， IDEA 支持丰富的插件扩展，不管是有助于代码开发类插件，还是帮助分析类插件，还是小工具插件，亦或是主题插件等，都十分丰富，常常你在开发中因为某个问题举步维艰，可能你缺少的只是一款趁手的插件。</p><p>下面仅仅列举我常用的几款插件，更多插件可以自行探索。</p><ol><li><strong>A8Translate</strong> ，一款翻译工具，英语不够，工具来凑。</li><li><strong>Eclipse Code Formatter</strong> ，可以结合阿里代码格式化文件进行格式化。</li><li><strong>Lombok</strong> ，Lombok 注解支持。</li><li><strong>Maven Helper</strong> ，Maven 依赖处理。</li></ol><h3 id="6-2-Rest-Client"><a href="#6-2-Rest-Client" class="headerlink" title="6.2 Rest Client"></a>6.2 Rest Client</h3><p>当你想简单的测试某个接口调用响应情况时候，不必打开你的 postman，<strong>IDEA</strong> 已经默认为你集成了 Rest Client 测试工具。可以 <strong>CTRL+ SHIFT + A</strong> 然后搜索 <strong>restful</strong>。</p><h3 id="6-3-剪切板历史"><a href="#6-3-剪切板历史" class="headerlink" title="6.3 剪切板历史"></a>6.3 剪切板历史</h3><p>听说你拷贝了一串代码，又拷贝了一串代码，尴尬，之前的拷贝丢失了。莫慌， <strong>IDEA</strong> 想你所想，内置了粘贴板历史。只需要使用快捷键  <strong>CTRL + SHIFT + V</strong> 即可。</p><p><img src="/assets/idea-skill/1571788672930.png" alt="剪切板历史"></p><h3 id="6-4-JSON-格式化"><a href="#6-4-JSON-格式化" class="headerlink" title="6.4 JSON 格式化"></a>6.4 JSON 格式化</h3><p>当控制台打印了JSON 字符串时，可以右键格式化显示，对于 JSON 响应的接口调用测试时候十分好用。</p><p><img src="/assets/idea-skill/1571762204121.png" alt="JSON 格式化"></p><h3 id="6-5-演示模式"><a href="#6-5-演示模式" class="headerlink" title="6.5 演示模式"></a>6.5 演示模式</h3><p>按 ALT + V 选择 Enter Presentation Mode 进入演示模式，可以放大编辑窗口，十分适合代码操作演示，如果对于 IDEA 快捷键比较熟练，操作起来依旧行云流水。</p><h3 id="6-6-补全判断"><a href="#6-6-补全判断" class="headerlink" title="6.6 补全判断"></a>6.6 补全判断</h3><p>对某个对象判断是否为 null，或者对某个字符串判空等，都可以使用 <strong>IDEA 智能语法</strong>。</p><p>比如：</p><p><img src="/assets/idea-skill/1571763565635.png" alt="代码"></p><p><strong>content.notnull</strong> 回车可以自动生成下面的代码，类似的操作在 IDEA 中还有很多，不再一一列举。</p><p><img src="/assets/idea-skill/1571763587951.png" alt="生成代码"></p><p>文中的一些 <strong>IDEA</strong> 使用技巧都是工作中经常使用的，当然 <strong>IDEA</strong> 的功能远不止这些。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; “工欲善其事，必先利其器”&lt;br&gt;出处：孔子《论语》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两年了，这是我的 IDEA &lt;strong&gt;实用技巧&lt;/strong&gt;总结，从前我是一个 Eclipse 忠实用户，直到某天我用上了  &lt;strong&gt;IntelliJ IDEA&lt;/strong&gt; ，Eclipse 开始在硬盘躺尸…….&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/idea-skill/1571750577728.png&quot; alt=&quot;IDEA 启动&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDEA&lt;/strong&gt; 是一个非常好用的工具，它的语法十分智能，当你写了一段不怎么聪明（很傻）的代码时候，它会告诉你有更优的写法；当你掌握了常用的快捷键后，开发效率提升 N 倍；当你熟练使用时候，编码速度与编码质量都有质的飞跃。&lt;br&gt;
    
    </summary>
    
      <category term="生产工具" scheme="https://www.codingme.net/categories/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="idea" scheme="https://www.codingme.net/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十四）迅速启用 HTTPS 加密你的网站</title>
    <link href="https://www.codingme.net/2019/08/springboot/springboot-14-https/"/>
    <id>https://www.codingme.net/2019/08/springboot/springboot-14-https/</id>
    <published>2019-08-06T16:10:22.000Z</published>
    <updated>2019-10-29T00:24:30.635Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/springboot-14-https/1572308662878.png" alt="HTTPS"></p><h2 id="1-获取-HTTPS-证书"><a href="#1-获取-HTTPS-证书" class="headerlink" title="1. 获取 HTTPS 证书"></a>1. 获取 HTTPS 证书</h2><p>正常情况下 HTTPS 证书需要从证书授权中心获得，这样获得的证书才具有公信力，也会被各种浏览器客户端所认可。常见的证书品牌如 Symantec，GeoTrustm，TrustAsia，Symantec 等。不过在 Springboot 的 HTTPS 实验中就没有必要去申请了，我们可以使用 Java 自带的 <strong>keytool</strong> 生成 HTTPS 证书。</p><a id="more"></a><p>查看 keytool 工具使用说明。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;keytool</span><br><span class="line">密钥和证书管理工具</span><br><span class="line">命令:</span><br><span class="line"> -certreq            生成证书请求</span><br><span class="line"> -changealias        更改条目的别名</span><br><span class="line"> -delete             删除条目</span><br><span class="line"> -exportcert         导出证书</span><br><span class="line"> -genkeypair         生成密钥对</span><br><span class="line"> -genseckey          生成密钥</span><br><span class="line"> -gencert            根据证书请求生成证书</span><br><span class="line"> -importcert         导入证书或证书链</span><br><span class="line"> -importpass         导入口令</span><br><span class="line"> -importkeystore     从其他密钥库导入一个或所有条目</span><br><span class="line"> -keypasswd          更改条目的密钥口令</span><br><span class="line"> -list               列出密钥库中的条目</span><br><span class="line"> -printcert          打印证书内容</span><br><span class="line"> -printcertreq       打印证书请求的内容</span><br><span class="line"> -printcrl           打印 CRL 文件的内容</span><br><span class="line"> -storepasswd        更改密钥库的存储口令</span><br><span class="line"></span><br><span class="line">使用 "keytool -command_name -help" 获取 command_name 的用法</span><br><span class="line"></span><br><span class="line">D:\&gt;keytool -genkeypair --help</span><br><span class="line">keytool -genkeypair [OPTION]...</span><br><span class="line">生成密钥对</span><br><span class="line">选项:</span><br><span class="line"> -alias &lt;alias&gt;                  要处理的条目的别名</span><br><span class="line"> -keyalg &lt;keyalg&gt;                密钥算法名称</span><br><span class="line"> -keysize &lt;keysize&gt;              密钥位大小</span><br><span class="line"> -sigalg &lt;sigalg&gt;                签名算法名称</span><br><span class="line"> -destalias &lt;destalias&gt;          目标别名</span><br><span class="line"> -dname &lt;dname&gt;                  唯一判别名</span><br><span class="line"> -startdate &lt;startdate&gt;          证书有效期开始日期/时间</span><br><span class="line"> -ext &lt;value&gt;                    X.509 扩展</span><br><span class="line"> -validity &lt;valDays&gt;             有效天数</span><br><span class="line"> -keypass &lt;arg&gt;                  密钥口令</span><br><span class="line"> -keystore &lt;keystore&gt;            密钥库名称</span><br><span class="line"> -storepass &lt;arg&gt;                密钥库口令</span><br><span class="line"> -storetype &lt;storetype&gt;          密钥库类型</span><br><span class="line"> -providername &lt;providername&gt;    提供方名称</span><br><span class="line"> -providerclass &lt;providerclass&gt;  提供方类名</span><br><span class="line"> -providerarg &lt;arg&gt;              提供方参数</span><br><span class="line"> -providerpath &lt;pathlist&gt;        提供方类路径</span><br><span class="line"> -v                              详细输出</span><br><span class="line"> -protected                      通过受保护的机制的口令</span><br></pre></td></tr></table></figure><p>通过上面的 keytool ，我们生成自己的自签名证书。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;keytool -genkeypair -alias tomcat_https -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -keystore d:/tomcat_https.keystore -storepass 123456</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  darcy</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  codingme</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  codingme</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  ShangHai</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  ShangHai</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  ZN</span><br><span class="line">CN=darcy, OU=codingme, O=codingme, L=ShangHai, ST=ShangHai, C=ZN是否正确?</span><br><span class="line">  [否]:  y</span><br><span class="line">D:\&gt;</span><br></pre></td></tr></table></figure><p>这时候已经在我们指定的位置下生成了证书文件，如果需要查看证书信息，可以使用 keytool 的 list 命令，可以看到密钥库类型是 JKS，在后面的配置里会用到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;keytool -list -keystore tomcat_https.keystore</span><br><span class="line">输入密钥库口令:</span><br><span class="line"></span><br><span class="line">密钥库类型: JKS</span><br><span class="line">密钥库提供方: SUN</span><br><span class="line"></span><br><span class="line">您的密钥库包含 1 个条目</span><br><span class="line"></span><br><span class="line">tomcat_https, 2019-4-21, PrivateKeyEntry,</span><br><span class="line">证书指纹 (SHA1): 1E:5F:15:9C:45:BD:D3:2A:7E:7F:1F:83:56:B8:74:E0:8B:CA:FD:F6</span><br><span class="line"></span><br><span class="line">D:\&gt;</span><br></pre></td></tr></table></figure><p>自己生成的 HTTPS 证书只能用来自己测试，真正用于网络上时，浏览器会显示证书无法信息。因此如果想要得到一个真实有效的证书，请看文章末尾。</p><h2 id="2-配置-HTTPS-证书"><a href="#2-配置-HTTPS-证书" class="headerlink" title="2. 配置 HTTPS 证书"></a>2. 配置 HTTPS 证书</h2><p>创建一个 Springboot 项目这里不提，拷贝上一步骤中生成的 tomcat_https.keystore 证书文件到<strong>src/main/resource</strong> 文件夹下，先看下总体的项目结构。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/3f4682d8b6eaa6ac7bf29eae9f9d5109.png" alt="项目结构如下"></p><p>然后在 application.yml 文件中配置 HTTPS 相关信息。直接配置了端口号为 <strong>443</strong>，443是 HTTPS 的默认端口，这样在使用 HTTPS 就行访问的时候就不需要写额外的端口号了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 HTTPS 相关信息</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">  http-port:</span> <span class="number">80</span> <span class="comment"># 为了后面的配置使用，暂时无用</span></span><br><span class="line"><span class="attr">  ssl:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    key-store:</span> <span class="attr">classpath:tomcat_https.keystore</span> <span class="comment"># 证书文件</span></span><br><span class="line"><span class="attr">    key-password:</span> <span class="number">123456</span>  <span class="comment"># 密码</span></span><br><span class="line"><span class="attr">    key-store-type:</span> <span class="string">JKS</span> <span class="comment"># 密钥库类型</span></span><br><span class="line"><span class="attr">    key-alias:</span> <span class="string">tomcat_https</span></span><br></pre></td></tr></table></figure><p>这时，已经可以通过 HTTPS 进行页面访问了。</p><h2 id="3-测试-HTTPS-证书"><a href="#3-测试-HTTPS-证书" class="headerlink" title="3. 测试 HTTPS 证书"></a>3. 测试 HTTPS 证书</h2><p>直接编写一个 接口用于测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Https 接口控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/20 22:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello HTTPS"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动之后可以通过 <a href="https://localhost/hello" target="_blank" rel="noopener">https://localhost/hello</a> 进行访问了。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/29a658a7761aa462cb80e1e34e5b0017.png" alt="HTTPS 访问测试"></p><p>当然，由于是自己生成的证书，会提示不安全，继续访问即可，如果是正常申请或者购买的证书就不会有这个问题的。</p><h2 id="4-HTTP-跳转-HTTPS"><a href="#4-HTTP-跳转-HTTPS" class="headerlink" title="4. HTTP 跳转 HTTPS"></a>4. HTTP 跳转 HTTPS</h2><p>在上面的测试里，HTTPS 已经可以访问了，但是 HTTP 却不能访问，大多数情况下在启用了 HTTPS 之后，都会希望 HTTP 的请求会自动跳转到 HTTPS，这个在 Springboot 里自然也是可以实现的。我们只需要写一个配置类把 HTTP 请求直接转发到 HTTPS 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * HTTP 强制跳转 HTTPS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/21 17:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Http2Https</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sslPort;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.http-port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> httpPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title">servletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory tomcat = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(httpPort);</span><br><span class="line">        connector.setRedirectPort(sslPort);</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(connector);</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次启动之后，使用 <a href="http://localhost/hello" target="_blank" rel="noopener">http://localhost/hello</a> 访问会自动跳转到 <a href="https://localhost/hello" target="_blank" rel="noopener">https://localhost/hello</a>.</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>如果需要申请免费证书，可以在腾讯云上免费申请，请参考：</p><ul><li><a href="https://cloud.tencent.com/document/product/400/6813#.E8.8E.B7.E5.8F.96.E8.AF.81.E4.B9.A6" target="_blank" rel="noopener">免费版 DV SSL 证书申请</a>。</li></ul><p>如果想要自己安装证书，请参考：</p><ul><li><a href="https://cloud.tencent.com/document/product/400/35243" target="_blank" rel="noopener">Apache 服务器证书安装</a></li><li><a href="https://cloud.tencent.com/document/product/400/35244" target="_blank" rel="noopener">Nginx 服务器证书安装</a></li><li><a href="https://cloud.tencent.com/document/product/400/35224" target="_blank" rel="noopener">Tomcat 服务器证书安装</a></li><li><a href="https://cloud.tencent.com/document/product/400/35225" target="_blank" rel="noopener">Windows IIS 服务器证书安装</a></li></ul><p>🐟 文章相关代码已经上传 Github <a href="https://github.com/niumoo/springboot/tree/master/springboot-web-https" target="_blank" rel="noopener">Spring Boot https</a>， 欢迎⭐Star️，欢迎 Fork !</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/springboot-14-https/1572308662878.png&quot; alt=&quot;HTTPS&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-获取-HTTPS-证书&quot;&gt;&lt;a href=&quot;#1-获取-HTTPS-证书&quot; class=&quot;headerlink&quot; title=&quot;1. 获取 HTTPS 证书&quot;&gt;&lt;/a&gt;1. 获取 HTTPS 证书&lt;/h2&gt;&lt;p&gt;正常情况下 HTTPS 证书需要从证书授权中心获得，这样获得的证书才具有公信力，也会被各种浏览器客户端所认可。常见的证书品牌如 Symantec，GeoTrustm，TrustAsia，Symantec 等。不过在 Springboot 的 HTTPS 实验中就没有必要去申请了，我们可以使用 Java 自带的 &lt;strong&gt;keytool&lt;/strong&gt; 生成 HTTPS 证书。&lt;/p&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="Https" scheme="https://www.codingme.net/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十三）使用邮件服务</title>
    <link href="https://www.codingme.net/2019/03/springboot/springboot-13-email/"/>
    <id>https://www.codingme.net/2019/03/springboot/springboot-13-email/</id>
    <published>2019-03-11T16:20:22.000Z</published>
    <updated>2019-05-20T16:29:37.608Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/00a2b4768bf601da67118c0acb347876.jpg" alt="桌面生活（来自网络）">我们这个时代，邮件服务不管是对于工作上的交流，还是平时的各种邮件通知，都是一个十分重要的存在。Java 从很早时候就可以通过 Java mail 支持邮件服务。Spring 更是对 Java mail 进行了进一步的封装，抽象出了 <code>JavaMailSender</code>. 后来随着 Springboot 的出现，理所当然的出现了 <code>spring-boot-starter-mail</code>. 不管怎么说，每次的封装都让使用变得越来越简单。<br><a id="more"></a></p><h2 id="Springboot-mail-依赖"><a href="#Springboot-mail-依赖" class="headerlink" title="Springboot mail 依赖"></a>Springboot mail 依赖</h2><p>创建 Springboot 项目不提，先看一下总体目录结构。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/87989c22d455e3d428811562649c840d.jpg" alt="项目结构"></p><p>直接引入 Springboot 邮件服务所需的依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 邮件服务 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- Thymeleaf 模版，用于发送模版邮件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Springboot-mail-配置"><a href="#Springboot-mail-配置" class="headerlink" title="Springboot mail 配置"></a>Springboot mail 配置</h2><p>使用邮件服务需要配置自己可以使用的邮箱信息，一般需要配置发送协议 SMTP、邮箱帐号（本次以126邮箱为例）、邮箱密码以及编码格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.mail.host=smtp.126.com</span><br><span class="line">spring.mail.port=25</span><br><span class="line"># 你的邮箱地址</span><br><span class="line">spring.mail.username=niumoo@126.com </span><br><span class="line"># 你的授权码（126 和 163 以及 qq 邮箱 都需要授权码登录，没有授权码的直接登录网页版邮箱设置里设置）</span><br><span class="line">spring.mail.password=password</span><br><span class="line">spring.mail.default-encoding=UTF-8</span><br></pre></td></tr></table></figure></p><h2 id="Springboot-mail-文本邮件"><a href="#Springboot-mail-文本邮件" class="headerlink" title="Springboot mail 文本邮件"></a>Springboot mail 文本邮件</h2><p>文本邮件是最简单也是最基础的一种邮件，使用 Spring 封装的 <code>JavaMailSender</code> 直接发送就可以了。</p><p>创建 <code>MailService</code> 类，注入 <code>JavaMailSender</code> 用于发送邮件，使用 <code>@Value(&quot;${spring.mail.username}&quot;)</code> 绑定配置文件中的参数用于设置邮件发送的来邮箱。使用 <code>@Service</code> 注解把 <code>MailService</code> 注入到 Spring 容器，使用 <code>Lombok</code> 的 <code>@Slf4j</code> 引入日志。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 邮件服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/10 21:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.mail.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送简单文本邮件</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleTextMail</span><span class="params">(String to, String subject, String content)</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(content);</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        mailSender.send(message);</span><br><span class="line">        log.info(<span class="string">"【文本邮件】成功发送！to=&#123;&#125;"</span>, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建 Springboot 的单元测试类测试文本邮件，实验中的收信人为了方便，都设置成了自己的邮箱。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailService mailService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleTextMailTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">        String subject = <span class="string">"Springboot 发送简单文本邮件"</span>;</span><br><span class="line">        String content = <span class="string">"&lt;p&gt;第一封 Springboot 简单文本邮件&lt;/p&gt;"</span>;</span><br><span class="line">        mailService.sendSimpleTextMail(to, subject, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行单元测试，测试文本邮件的发送。</p><p>PS：如果运行报出异常 <code>AuthenticationFailedException: 535 Error</code>. 一般都是用户名和密码有误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Caused by: javax.mail.AuthenticationFailedException: 535 Error: authentication failed</span><br><span class="line"></span><br><span class="line">at com.sun.mail.smtp.SMTPTransport$Authenticator.authenticate(SMTPTransport.java:965)</span><br><span class="line">at com.sun.mail.smtp.SMTPTransport.authenticate(SMTPTransport.java:876)</span><br><span class="line">at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:780)</span><br><span class="line">at javax.mail.Service.connect(Service.java:366)</span><br><span class="line">at org.springframework.mail.javamail.JavaMailSenderImpl.connectTransport(JavaMailSenderImpl.java:517)</span><br><span class="line">at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:436)</span><br><span class="line">... 34 more</span><br></pre></td></tr></table></figure></p><p>正常运行输出成功发送的日志。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-03-11 23:35:14.743  INFO 13608 --- [           main] n.codingme.boot.service.MailServiceTest  : Started MailServiceTest in 3.964 seconds (JVM running for 5.749)</span><br><span class="line">2019-03-11 23:35:24.718  INFO 13608 --- [           main] net.codingme.boot.service.MailService    : 【文本邮件】成功发送！to=niumoo@126.com</span><br></pre></td></tr></table></figure></p><p>查看邮箱中的收信。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/e391dbce4b614779ae9a024908ef0275.jpg" alt="文本邮件"></p><p>文本邮件正常收到，同时可见文本邮件中的 HTML 标签也不会被解析。</p><h2 id="Springboot-mail-HTML-邮件"><a href="#Springboot-mail-HTML-邮件" class="headerlink" title="Springboot mail HTML 邮件"></a>Springboot mail HTML 邮件</h2><p>在上面的 <code>MailService</code> 类里新加一个方法 <code>sendHtmlMail</code>，用于测试 HTML 邮件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送 HTML 邮件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String to, String subject, String content)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    messageHelper.setFrom(from);</span><br><span class="line">    messageHelper.setTo(to);</span><br><span class="line">    messageHelper.setSubject(subject);</span><br><span class="line">    <span class="comment">// true 为 HTML 邮件</span></span><br><span class="line">    messageHelper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">    mailSender.send(message);</span><br><span class="line">    log.info(<span class="string">"【HTML 邮件】成功发送！to=&#123;&#125;"</span>, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在测试方法中增加 HTML 邮件测试方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMailTest</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">    String subject = <span class="string">"Springboot 发送 HTML 邮件"</span>;</span><br><span class="line">    String content = <span class="string">"&lt;h2&gt;Hi~&lt;/h2&gt;&lt;p&gt;第一封 Springboot HTML 邮件&lt;/p&gt;"</span>;</span><br><span class="line">    mailService.sendHtmlMail(to, subject, content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行单元测试，查看收信情况。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/147b7f68d12e0080b408a581414fb92a.jpg" alt="HTML 邮件"></p><p>HTML 邮件正常收到，HTML 标签也被解析成对应的样式。</p><h2 id="Springboot-mail-附件邮件"><a href="#Springboot-mail-附件邮件" class="headerlink" title="Springboot mail 附件邮件"></a>Springboot mail 附件邮件</h2><p>在上面的 <code>MailService</code> 类里新加一个方法 <code>sendAttachmentMail</code>，用于测试 附件邮件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送带附件的邮件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileArr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentMail</span><span class="params">(String to, String subject, String content, String... fileArr)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">    messageHelper.setFrom(from);</span><br><span class="line">    messageHelper.setTo(to);</span><br><span class="line">    messageHelper.setSubject(subject);</span><br><span class="line">    messageHelper.setText(content, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加附件</span></span><br><span class="line">    <span class="keyword">for</span> (String filePath : fileArr) &#123;</span><br><span class="line">        FileSystemResource fileResource = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(filePath));</span><br><span class="line">        <span class="keyword">if</span> (fileResource.exists()) &#123;</span><br><span class="line">            String filename = fileResource.getFilename();</span><br><span class="line">            messageHelper.addAttachment(filename, fileResource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">    log.info(<span class="string">"【附件邮件】成功发送！to=&#123;&#125;"</span>, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在测试方法中增加附件邮件测试方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentTest</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">    String subject = <span class="string">"Springboot 发送 HTML 附件邮件"</span>;</span><br><span class="line">    String content = <span class="string">"&lt;h2&gt;Hi~&lt;/h2&gt;&lt;p&gt;第一封 Springboot HTML 附件邮件&lt;/p&gt;"</span>;</span><br><span class="line">    String filePath = <span class="string">"pom.xml"</span>;</span><br><span class="line">    mailService.sendAttachmentMail(to, subject, content, filePath, filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行单元测试，查看收信情况。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/0ab42e65ae35c7970d7954bf5a985a79.jpg" alt="附件邮件"></p><p>带附件的邮件正常收到，多个附件的实现方式同理。</p><h2 id="Springboot-mail-图片邮件"><a href="#Springboot-mail-图片邮件" class="headerlink" title="Springboot mail 图片邮件"></a>Springboot mail 图片邮件</h2><p>图片邮件和其他的邮件方式略有不同，图片邮件需要先在内容中定义好图片的位置并出给一个记录 ID ，然后在把图片加到邮件中的对于的 ID 位置。</p><p>在上面的 <code>MailService</code> 类里新加一个方法 <code>sendImgMail</code>，用于测试 附件邮件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 发送带图片的邮件</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> imgMap</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendImgMail</span><span class="params">(String to, String subject, String content, Map&lt;String, String&gt; imgMap)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">     MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">     MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">     messageHelper.setFrom(from);</span><br><span class="line">     messageHelper.setTo(to);</span><br><span class="line">     messageHelper.setSubject(subject);</span><br><span class="line">     messageHelper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">     <span class="comment">// 添加图片</span></span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : imgMap.entrySet()) &#123;</span><br><span class="line">         FileSystemResource fileResource = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(entry.getValue()));</span><br><span class="line">         <span class="keyword">if</span> (fileResource.exists()) &#123;</span><br><span class="line">             String filename = fileResource.getFilename();</span><br><span class="line">             messageHelper.addInline(entry.getKey(), fileResource);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     mailSender.send(mimeMessage);</span><br><span class="line">     log.info(<span class="string">"【图片邮件】成功发送！to=&#123;&#125;"</span>, to);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>在测试方法中增加图片邮件测试方法，测试方法中使用的 apple.png 是项目里的一个图片。可以看上面的项目结构。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendImgTest</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">    String subject = <span class="string">"Springboot 发送 HTML 图片邮件"</span>;</span><br><span class="line">    String content =</span><br><span class="line">        <span class="string">"&lt;h2&gt;Hi~&lt;/h2&gt;&lt;p&gt;第一封 Springboot HTML 图片邮件&lt;/p&gt;&lt;br/&gt;&lt;img src=\"cid:img01\" /&gt;&lt;img src=\"cid:img02\" /&gt;"</span>;</span><br><span class="line">    String imgPath = <span class="string">"apple.png"</span>;</span><br><span class="line">    Map&lt;String, String&gt; imgMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    imgMap.put(<span class="string">"img01"</span>, imgPath);</span><br><span class="line">    imgMap.put(<span class="string">"img02"</span>, imgPath);</span><br><span class="line">    mailService.sendImgMail(to, subject, content, imgMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行单元测试，查看收信情况。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/a676fadf6b40195c7de746adff0700bc.jpg" alt="图片邮件"></p><p>两个图片正常显示在邮件里。</p><h2 id="Springboot-mail-模版邮件"><a href="#Springboot-mail-模版邮件" class="headerlink" title="Springboot mail 模版邮件"></a>Springboot mail 模版邮件</h2><p>模版邮件的用处很广泛，像经常收到的注册成功邮件或者是操作通知邮件等都是模版邮件，模版邮件往往只需要更改其中的几个变量。Springboot 中的模版邮件首选需要选择一款模版引擎，在引入依赖的时候已经增加了模版引擎 <code>Thymeleaf</code>.</p><p>模版邮件首先需要一个邮件模版，我们在 <code>Templates</code> 下新建一个 <code>HTML</code> 文件 <code>RegisterSuccess.html</code>. 其中的 username 是给我们自定义的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册成功通知<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>[[$&#123;username&#125;]]，您好!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    新的公钥已添加到你的账户:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    标题: HP-WIN10 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    如果公钥无法使用，你可以在这里重新添加： SSH Keys</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在邮件服务 <code>MailService</code> 中注入模版引擎,然后编写邮件模版发送代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送模版邮件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paramMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> template</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTemplateMail</span><span class="params">(String to, String subject, Map&lt;String, Object&gt; paramMap, String template)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    Context context = <span class="keyword">new</span> Context();</span><br><span class="line">    <span class="comment">// 设置变量的值</span></span><br><span class="line">    context.setVariables(paramMap);</span><br><span class="line">    String emailContent = templateEngine.process(template, context);</span><br><span class="line">    sendHtmlMail(to, subject, emailContent);</span><br><span class="line">    log.info(<span class="string">"【模版邮件】成功发送！paramsMap=&#123;&#125;，template=&#123;&#125;"</span>, paramMap, template);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在单元单元测试中增加模版邮件测试方法，然后发送邮件测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTemplateMailTest</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">    String subject = <span class="string">"Springboot 发送 模版邮件"</span>;</span><br><span class="line">    Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    paramMap.put(<span class="string">"username"</span>, <span class="string">"Darcy"</span>);</span><br><span class="line">    mailService.sendTemplateMail(to, subject, paramMap, <span class="string">"RegisterSuccess"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看收信情况。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/8244d50efe797cfa3ceb14aab7b7b461.jpg" alt="模版邮件"></p><p>可以发现模版邮件已经正常发送了。</p><h2 id="Springboot-mail-补充"><a href="#Springboot-mail-补充" class="headerlink" title="Springboot mail 补充"></a>Springboot mail 补充</h2><p>上面的例子中，是 Springboot 邮件服务的基本用法，代码也有很多重复，和实际的使用情况相比还有很多不足，比如缺少<code>异常处理机制</code>，在发送失败时的<code>重试机制</code>也没有，实际情况中邮件服务往往对实时性不高，多说情况下会用于<code>异步请求</code>。</p><p>文章相关代码已经上传 Github <a href="https://github.com/niumoo/springboot/tree/master/springboot-mail" target="_blank" rel="noopener">Spring Boot 相关整合 - 邮件服务</a>。</p><p>&lt;完&gt;<br>本文原发于个人博客：<a href="https://www.codingme.net">https://www.codingme.net</a> 转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/00a2b4768bf601da67118c0acb347876.jpg&quot; alt=&quot;桌面生活（来自网络）&quot;&gt;我们这个时代，邮件服务不管是对于工作上的交流，还是平时的各种邮件通知，都是一个十分重要的存在。Java 从很早时候就可以通过 Java mail 支持邮件服务。Spring 更是对 Java mail 进行了进一步的封装，抽象出了 &lt;code&gt;JavaMailSender&lt;/code&gt;. 后来随着 Springboot 的出现，理所当然的出现了 &lt;code&gt;spring-boot-starter-mail&lt;/code&gt;. 不管怎么说，每次的封装都让使用变得越来越简单。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="邮件" scheme="https://www.codingme.net/tags/%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十二）使用 Mybatis 集成 pagehelper 分页插件和 mapper 插件</title>
    <link href="https://www.codingme.net/2019/03/springboot/springboot-12-data-mybatis-page/"/>
    <id>https://www.codingme.net/2019/03/springboot/springboot-12-data-mybatis-page/</id>
    <published>2019-03-07T16:40:22.000Z</published>
    <updated>2019-05-20T16:26:48.646Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/64cccddf32b7e3f4069ca2459057496e.png" alt="桌面生活（来自网络）"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Springboot 系列文章第十一篇里（<a href="https://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483756&amp;idx=1&amp;sn=902dba8ed665131453bc26de246ccaa1&amp;chksm=e984e808def3611edf0949a9db71ea6dc29432b25fb27015d78bc8117a50a3bedd79194de5ea&amp;token=93558379&amp;lang=zh_CN#rd" target="_blank" rel="noopener">使用 Mybatis（自动生成插件） 访问数据库</a>），实验了 Springboot 结合 Mybatis 以及 Mybatis-generator 生成插件的开发过程，其实对于 Mybatis 来讲还有很多优秀方便好用的插件，比如这次要演示的 通用 Mapper 生成插件和分页插件。<br><a id="more"></a></p><h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p> 既然是持久层框架，先准备一个用于实验操作的数据表，这次还是使用上一个实验使用的 mysql 数据库中的 springboot.book 数据表。</p><p>未创建的可以在 mysql 数据库的 springboot 库中创建表 book 用于演示。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍作者'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍名称'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">float</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍价格'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍描述'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">15</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>增加测试数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (2, &apos;金庸&apos;, &apos;笑傲江湖&apos;, 12, &apos;2018-09-01 10:10:12&apos;, &apos;是作家金庸创作的一部长篇武侠小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (3, &apos;罗贯中&apos;, &apos;三国演义&apos;, 22, &apos;2018-09-01 10:10:16&apos;, &apos;是作家罗贯中创作的一部长篇历史小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (4, &apos;吴承恩&apos;, &apos;西游记&apos;, 17, &apos;2018-09-01 10:10:19&apos;, &apos;是作家吴承恩创作的一部长篇小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (5, &apos;金庸1535767819284&apos;, &apos;笑傲江湖1535767819284&apos;, 43, &apos;2018-09-01 10:10:19&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535767819284&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (6, &apos;金庸1535767819679&apos;, &apos;笑傲江湖1535767819679&apos;, 24, &apos;2018-09-01 10:10:20&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535767819679&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (7, &apos;罗贯中1535769035138&apos;, &apos;三国演义1535769035138&apos;, 20, &apos;2018-09-01 10:30:35&apos;, &apos;是罗贯中创作的一部小说1535769035138&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (9, &apos;金庸1535783613226&apos;, &apos;笑傲江湖1535783613226&apos;, 30, &apos;2018-09-01 14:33:33&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783613226&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (10, &apos;金庸1535783618455&apos;, &apos;笑傲江湖1535783618455&apos;, 30, &apos;2018-09-01 14:33:38&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783618455&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (11, &apos;金庸1535783620634&apos;, &apos;笑傲江湖1535783620634&apos;, 30, &apos;2018-09-01 14:33:41&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783620634&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (12, &apos;金庸1535783672457&apos;, &apos;笑傲江湖1535783672457&apos;, 30, &apos;2018-09-01 14:34:32&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783672457&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (13, &apos;金庸1535783673664&apos;, &apos;笑傲江湖1535783673664&apos;, 30, &apos;2018-09-01 14:34:34&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783673664&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (14, &apos;金庸1535783939262&apos;, &apos;笑傲江湖1535783939262&apos;, 30, &apos;2018-09-01 14:38:59&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783939262&apos;);</span><br></pre></td></tr></table></figure></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>创建 Springboot 项目不提，引入 maven 依赖，主要是 mybastis 核心依赖以及 mybatis mapper 自动生成插件、分页插件、通用 Mapper 插件。依赖中的 druid 数据源部分，可以参考系列文章第九篇。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Spring Boot web 开发整合 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 阿里 fastjson --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Lombok 工具 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 导入配置文件处理器，在配置springboot相关文件时候会有提示 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--添加数据库链接 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Druid 数据源 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis mapper自动生成插件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis pagehelper 分页插件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis 通用 Mapper --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>简单说明一下几个不常见依赖的作用。</p><ol><li>mybatis-generator-core 用于自动生成 model、mapper 接口、mapper xml。</li><li>pagehelper-spring-boot-starter 用于分页</li><li>mapper 用于增强增删改查功能，集成了很多常用操作。</li></ol><h2 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h2><p>关于 Druid 数据源的配置不再说明，可以参考系列文章第九篇。配置中主要配置了项目编码、数据源信息、durid 数据源和 mybatis 的 mapper 位置以及 mybatis 映射别名的包路径。还有 pagehelper 分页插件部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># 服务启动端口号</span><br><span class="line">server.port=8080</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"># 编码</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line">spring.http.encoding.force=true</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">############################################################</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line"># 使用 druid 数据源</span><br><span class="line">spring.datasource.type:com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.initialSize:5</span><br><span class="line">spring.datasource.minIdle:5</span><br><span class="line">spring.datasource.maxActive:20</span><br><span class="line">spring.datasource.maxWait:60000</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis:60000</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis:300000</span><br><span class="line">spring.datasource.validationQuery:SELECT 1 FROM DUAL</span><br><span class="line">spring.datasource.testWhileIdle:true</span><br><span class="line">spring.datasource.testOnBorrow:false</span><br><span class="line">spring.datasource.testOnReturn:false</span><br><span class="line">spring.datasource.poolPreparedStatements:true</span><br><span class="line">spring.datasource.filters:stat</span><br><span class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize:20</span><br><span class="line">spring.datasource.useGlobalDataSourceStat:true</span><br><span class="line">spring.datasource.connectionProperties:druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line">############################################################</span><br><span class="line"># mybatis</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br><span class="line">mybatis.type-aliases-package=net.codingme.boot.domain</span><br><span class="line">############## mybatis page配置#######################</span><br><span class="line"># restart 类加载加载 include 进去的 jar 包。</span><br><span class="line">restart.include.mapper=/mapper-[\\w-\\.]+jar</span><br><span class="line">restart.include.pagehelper=/pagehelper-[\\w-\\.]+jar</span><br><span class="line"># mappers 多个接口时逗号隔开</span><br><span class="line">mapper.mappers=net.codingme.boot.util.MybatisMapper</span><br><span class="line">mapper.not-empty=false</span><br><span class="line">mapper.identity=MYSQL</span><br><span class="line"># pagehelper</span><br><span class="line">pagehelper.helperDialect=mysql</span><br><span class="line">pagehelper.reasonable=true</span><br><span class="line">pagehelper.supportMethodsArguments=true</span><br><span class="line">pagehelper.params=count=countSql</span><br><span class="line"># 输出 mybatis SQL 日志</span><br><span class="line">logging.level.net.codingme.boot.domain.mapper=debug</span><br></pre></td></tr></table></figure><p>一些说明。</p><ol><li><code>mapper.mappers=net.codingme.boot.util.MybatisMapper</code> 用于包含一个自己编写的 mapper。</li><li><code>restart.include</code> 热部署</li><li><code>logging.level.net.codingme.boot.domain.mapper=debug</code> 输出 Mybatis SQL 这里要指定自己 mapper 所在的包路径</li></ol><h2 id="通用-Mapper"><a href="#通用-Mapper" class="headerlink" title="通用 Mapper"></a>通用 Mapper</h2><p>在上一篇文章中也演示了自动生成，那是通用的一种生成方式，这次我们引入通用 Mapper 再进行生成，这样生成的代码更加简洁。</p><p>为了方便理解，先看一下项目最终结构。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/58fef28ddbcf12f769f2424db21d7fa3.png" alt="项目接口"></p><h3 id="自动生成配置"><a href="#自动生成配置" class="headerlink" title="自动生成配置"></a>自动生成配置</h3><p>自动生成通用接口分为两步，第一步是编写生成配置文件，注释已经添加了，直接看代码。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MysqlContext"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否使用通用 Mapper 提供的注释工具，默认 true 使用，这样在生成代码时会包含字段的注释（目前只有 mysql 和 oracle 支持）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useMapperCommentGenerator"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置后生成的 Mapper 接口都会自动继承这个接口--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.common.MySqlMapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置后生成的 Mapper 接口都会自动继承这个接口 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.common.Mapper"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否区分大小写，默认 false --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caseSensitive"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;amp;serverTimezone=GMT%2B8&amp;amp;nullCatalogMeansCurrent=true"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对于生成的pojo所在包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"net.codingme.boot.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对于生成的mapper所在目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置mapper对应的java映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"net.codingme.boot.domain.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 要生成那些表(更改tableName和domainObjectName就可以) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"book"</span> <span class="attr">domainObjectName</span>=<span class="string">"Book"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>与上次不同的是这次增加了两个 <code>plugin</code>，后面生成的 Mapper 接口都会自动继承这些类。</p><h3 id="自动生成代码"><a href="#自动生成代码" class="headerlink" title="自动生成代码"></a>自动生成代码</h3><p>写好配置文件之后，还需要写一个生成程序，用于加载配置文件，运行就可以生成相关的实体类、Mapper 接口、Mapper xml .<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Mybatis generator的逆向生成工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 指定你想工程配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>);</span><br><span class="line">        System.out.println(configFile.getAbsolutePath());</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (String warning : warnings) &#123;</span><br><span class="line">            System.out.println(warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MybatisGenerator mybatisGenerator = <span class="keyword">new</span> MybatisGenerator();</span><br><span class="line">        mybatisGenerator.generator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自动生成结果"><a href="#自动生成结果" class="headerlink" title="自动生成结果"></a>自动生成结果</h3><p>运行完毕上面程序之后，自动生成了 Book.java.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"book"</span>)</span><br><span class="line"><span class="meta">@ToString</span> <span class="comment">// 手动添加的 tostring 注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍作者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略下面的自动生成代码</span></span><br></pre></td></tr></table></figure></p><h3 id="通用-Mapper-1"><a href="#通用-Mapper-1" class="headerlink" title="通用 Mapper"></a>通用 Mapper</h3><p>上面的程序也自动生成了 BookMapper 接口，且继承了配置的 MySqlMapper 和 Mapper 接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> <span class="keyword">extends</span> <span class="title">MySqlMapper</span>&lt;<span class="title">Book</span>&gt;, <span class="title">Mapper</span>&lt;<span class="title">Book</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两个接口里实现了很多常用操作。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/51f20a7f33ad27d9495046c236dec145.png" alt="通用 Mapper 里的方法"></p><p>生成完成之后要在 Springboot 启动器上添加 MapperScan 注解指定要扫描的 mapper 位置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@tk</span>.mybatis.spring.annotation.MapperScan(basePackages = <span class="string">"net.codingme.boot.domain.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="单元测试和分页测试"><a href="#单元测试和分页测试" class="headerlink" title="单元测试和分页测试"></a>单元测试和分页测试</h2><p>编写 BookMapperTest 单元测试用于测试 BookMapper 的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.domain.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">2</span>);</span><br><span class="line">        Book selectOne = bookMapper.selectOne(book);</span><br><span class="line">        Assert.assertNotNull(selectOne);</span><br><span class="line">        System.out.println(selectOne);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookMapper.selectByPrimaryKey(<span class="number">2</span>);</span><br><span class="line">        Assert.assertNotNull(book);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPageInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Book&gt; bookList = bookMapper.selectAll();</span><br><span class="line">        Assert.assertNotNull(bookList);</span><br><span class="line">        System.out.println(<span class="string">"查询出数量："</span> + bookList.size());</span><br><span class="line">        PageInfo&lt;Book&gt; pageInfo = PageInfo.of(bookList);</span><br><span class="line">        System.out.println(<span class="string">"总数量："</span> + pageInfo.getTotal());</span><br><span class="line">        System.out.println(<span class="string">"总页数："</span> + pageInfo.getPages());</span><br><span class="line">        System.out.println(<span class="string">"页大小："</span> + pageInfo.getPageSize());</span><br><span class="line">        System.out.println(<span class="string">"第几页："</span> + pageInfo.getPageNum());</span><br><span class="line">        System.out.println(<span class="string">"当前量："</span> + pageInfo.getSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Book&gt; bookList = bookMapper.selectAll();</span><br><span class="line">        Assert.assertNotNull(bookList);</span><br><span class="line">        System.out.println(<span class="string">"查询出数量："</span> + bookList.size());</span><br><span class="line">        System.out.println(<span class="string">"总数量："</span> + ((Page)bookList).getTotal());</span><br><span class="line">        System.out.println(<span class="string">"总页数："</span> + ((Page)bookList).getPages());</span><br><span class="line">        System.out.println(<span class="string">"第几页："</span> + ((Page)bookList).getPageNum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看到分页的实现主要是 PageHelper 的设置，在设置 PageHelper 之后的第一个查询会进行分页。像上面的例子会查询第二页，每页三条这样。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;Book&gt; bookList = bookMapper.selectAll();</span><br></pre></td></tr></table></figure></p><p>其实使用了分页插件之后返回的数据类型是一个 Page 类，总数等分页信息都已经返回，如果要取出来使用就需要强制转换类型然后取出，上面也是演示了两种方式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式 1</span></span><br><span class="line">PageInfo&lt;Book&gt; pageInfo = PageInfo.of(bookList);</span><br><span class="line">System.out.println(<span class="string">"总数量："</span> + pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span> + pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">"页大小："</span> + pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">"第几页："</span> + pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">"当前量："</span> + pageInfo.getSize());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2</span></span><br><span class="line">System.out.println(<span class="string">"查询出数量："</span> + bookList.size());</span><br><span class="line">System.out.println(<span class="string">"总数量："</span> + ((Page)bookList).getTotal());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span> + ((Page)bookList).getPages());</span><br><span class="line">System.out.println(<span class="string">"第几页："</span> + ((Page)bookList).getPageNum());</span><br></pre></td></tr></table></figure></p><p>运行 BookMapperTest 类测试所有的单元测试。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/0dd65eb033d1b3e872cd2ed41f201dca.png" alt="单元测试结果"></p><p>发现单元测试全部通过，查看一个分页查询（testSelectPageInfo）输出情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2019-03-08 16:07:52.226 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectAll_COUNT     : ==&gt;  Preparing: SELECT count(0) FROM book </span><br><span class="line">2019-03-08 16:07:52.227 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectAll_COUNT     : ==&gt; Parameters: </span><br><span class="line">2019-03-08 16:07:52.229 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectAll_COUNT     : &lt;==      Total: 1</span><br><span class="line">2019-03-08 16:07:52.231 DEBUG 26764 --- [           main] n.c.b.d.mapper.BookMapper.selectAll      : ==&gt;  Preparing: SELECT id,author,name,price,create_time,description FROM book LIMIT ?, ? </span><br><span class="line">2019-03-08 16:07:52.233 DEBUG 26764 --- [           main] n.c.b.d.mapper.BookMapper.selectAll      : ==&gt; Parameters: 3(Integer), 3(Integer)</span><br><span class="line">2019-03-08 16:07:52.236 DEBUG 26764 --- [           main] n.c.b.d.mapper.BookMapper.selectAll      : &lt;==      Total: 3</span><br><span class="line">查询出数量：3</span><br><span class="line">总数量：12</span><br><span class="line">总页数：4</span><br><span class="line">页大小：3</span><br><span class="line">第几页：2</span><br><span class="line">当前量：3</span><br></pre></td></tr></table></figure></p><p>再查看一个普通查询（testSelectByPrimaryKey）输出情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-03-08 16:07:52.241 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectByPrimaryKey  : ==&gt;  Preparing: SELECT id,author,name,price,create_time,description FROM book WHERE id = ? </span><br><span class="line">2019-03-08 16:07:52.242 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectByPrimaryKey  : ==&gt; Parameters: 2(Integer)</span><br><span class="line">2019-03-08 16:07:52.244 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectByPrimaryKey  : &lt;==      Total: 1</span><br><span class="line">Book(id=2, author=金庸, name=笑傲江湖, price=12.0, createTime=Sat Sep 01 10:10:12 GMT+08:00 2018, description=是作家金庸创作的一部长篇武侠小说)</span><br></pre></td></tr></table></figure></p><p>文中代码已经上传到 Github <a href="https://github.com/niumoo/springboot" target="_blank" rel="noopener">Spring Boot 连接数据库 - Mybatis 插件</a></p><p>想要了解这几个插件的其他信息，可以查看官方文档。</p><ol><li><a href="https://pagehelper.github.io/docs/howtouse/" target="_blank" rel="noopener">如何使用分页插件</a></li><li><a href="https://github.com/abel533/Mapper/wiki/1.3-spring-boot" target="_blank" rel="noopener">Mapper插件</a></li><li><a href="http://www.mybatis.org/generator/" target="_blank" rel="noopener"> MyBatis Generator</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/64cccddf32b7e3f4069ca2459057496e.png&quot; alt=&quot;桌面生活（来自网络）&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 Springboot 系列文章第十一篇里（&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;amp;mid=2247483756&amp;amp;idx=1&amp;amp;sn=902dba8ed665131453bc26de246ccaa1&amp;amp;chksm=e984e808def3611edf0949a9db71ea6dc29432b25fb27015d78bc8117a50a3bedd79194de5ea&amp;amp;token=93558379&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用 Mybatis（自动生成插件） 访问数据库&lt;/a&gt;），实验了 Springboot 结合 Mybatis 以及 Mybatis-generator 生成插件的开发过程，其实对于 Mybatis 来讲还有很多优秀方便好用的插件，比如这次要演示的 通用 Mapper 生成插件和分页插件。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="插件" scheme="https://www.codingme.net/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Mybatis" scheme="https://www.codingme.net/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十一）使用 Mybatis（自动生成插件） 访问数据库</title>
    <link href="https://www.codingme.net/2019/03/springboot/springboot-11-data-mybatis/"/>
    <id>https://www.codingme.net/2019/03/springboot/springboot-11-data-mybatis/</id>
    <published>2019-03-06T17:40:01.000Z</published>
    <updated>2019-05-20T16:26:48.640Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/60327e81c9b1f06ed84cb177feded21b.jpg" alt="桌面生活（来自网络）"></p><h2 id="1-Springboot-mybatis-介绍"><a href="#1-Springboot-mybatis-介绍" class="headerlink" title="1. Springboot mybatis 介绍"></a>1. Springboot mybatis 介绍</h2><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数获取结果集的过程。MyBatis 可以使用简单的 <code>XML</code> 或<code>注解</code>来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。<br><a id="more"></a><br>关于 Mybatis 的基础知识可以查询官方文档，十分的详细。<a href="http://www.mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">mybatis 官方文档</a>.</p><h2 id="2-Springboot-mybatis-依赖"><a href="#2-Springboot-mybatis-依赖" class="headerlink" title="2. Springboot mybatis 依赖"></a>2. Springboot mybatis 依赖</h2><p>本系列 Springboot 文章主要是 Springboot 的学习与分析，也因此只会试验 Mybatis 在 Springboot 中的一些用法，关于 Mybatis 的基础知识，还是需要自行学习的。<br>创建 Springboot 项目不提，引入 maven 依赖，主要是 mybastis 核心依赖以及一个 mybatis mapper 自动生成插件。依赖中的 druid 数据源部分，可以参考系列文章第九篇。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Spring Boot web 开发整合 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 阿里 fastjson --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Lombok 工具 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 导入配置文件处理器，在配置springboot相关文件时候会有提示 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Druid 数据源 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- mybatis mapper自动生成插件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--添加数据库链接 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-Springboot-mybatis-配置"><a href="#3-Springboot-mybatis-配置" class="headerlink" title="3. Springboot mybatis 配置"></a>3. Springboot mybatis 配置</h2><p>关于 Druid 数据源的配置不再说明，可以参考系列文章第九篇。配置中主要配置了项目编码、数据源信息、durid 数据源和 mybatis 的 mapper 位置以及 mybatis 映射别名的包路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># 服务启动端口号</span><br><span class="line">server.port=8080</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"></span><br><span class="line"># 编码</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line">spring.http.encoding.force=true</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">############################################################</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.driver-class-name= com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line"></span><br><span class="line"># 使用 druid 数据源</span><br><span class="line">spring.datasource.type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.initialSize: 5</span><br><span class="line">spring.datasource.minIdle: 5</span><br><span class="line">spring.datasource.maxActive: 20</span><br><span class="line">spring.datasource.maxWait: 60000</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis: 300000</span><br><span class="line">spring.datasource.validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">spring.datasource.testWhileIdle: true</span><br><span class="line">spring.datasource.testOnBorrow: false</span><br><span class="line">spring.datasource.testOnReturn: false</span><br><span class="line">spring.datasource.poolPreparedStatements: true</span><br><span class="line">spring.datasource.filters: stat</span><br><span class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">spring.datasource.useGlobalDataSourceStat: true</span><br><span class="line">spring.datasource.connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line"></span><br><span class="line"># mybatis</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br><span class="line">mybatis.type-aliases-package=net.codingme.boot.domain</span><br></pre></td></tr></table></figure></p><h2 id="4-Springboot-mybatis-编码"><a href="#4-Springboot-mybatis-编码" class="headerlink" title="4. Springboot mybatis 编码"></a>4. Springboot mybatis 编码</h2><p>mybatis 是半 ORM 框架，它通过 XML 描述符或者注解把 POJO 对象与 SQL 信息关联起来，也因为是和 SQL 关联起来，使用 mybatis 可以充分的利用数据的各种功能以及强大的 SQL 语句。也可以发发现使用 mybatis 至少应该建立 POJO 对象和 SQL 关联信息以及编写相关操作代码。</p><h3 id="4-1-数据库准备"><a href="#4-1-数据库准备" class="headerlink" title="4.1. 数据库准备"></a>4.1. 数据库准备</h3><p>既然是持久层框架，先准备一个用于实验操作的数据表。上一个步骤中有配置数据库信息为 springboot。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot</span><br></pre></td></tr></table></figure></p><p>因此在 mysql 数据库的 springboot 库中创建表 book 用于演示。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍作者'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍名称'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">float</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍价格'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍描述'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">15</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>增加测试数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (2, &apos;金庸&apos;, &apos;笑傲江湖&apos;, 12, &apos;2018-09-01 10:10:12&apos;, &apos;是作家金庸创作的一部长篇武侠小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (3, &apos;罗贯中&apos;, &apos;三国演义&apos;, 22, &apos;2018-09-01 10:10:16&apos;, &apos;是作家罗贯中创作的一部长篇历史小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (4, &apos;吴承恩&apos;, &apos;西游记&apos;, 17, &apos;2018-09-01 10:10:19&apos;, &apos;是作家吴承恩创作的一部长篇小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (5, &apos;金庸1535767819284&apos;, &apos;笑傲江湖1535767819284&apos;, 43, &apos;2018-09-01 10:10:19&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535767819284&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (6, &apos;金庸1535767819679&apos;, &apos;笑傲江湖1535767819679&apos;, 24, &apos;2018-09-01 10:10:20&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535767819679&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (7, &apos;罗贯中1535769035138&apos;, &apos;三国演义1535769035138&apos;, 20, &apos;2018-09-01 10:30:35&apos;, &apos;是罗贯中创作的一部小说1535769035138&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (8, &apos;金庸1535783611785&apos;, &apos;笑傲江湖1535783611785&apos;, 30, &apos;2018-09-01 14:33:32&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783611785&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="4-2-自动生成插件"><a href="#4-2-自动生成插件" class="headerlink" title="4.2. 自动生成插件"></a>4.2. 自动生成插件</h3><p>传统的 mybatis　开发过程需要依照数据表新建大量的　POJO 类，然后在编写响应的增删改查接口，继而编写增删改查对应的 XML 文件。过程无趣且有重复劳动，因此产生了一个自动生成工具，可以通过 JDBC 连接到数据库，自动的创建 POJO、操作接口、XML 文件。</p><p>在引入依赖的时候已经引入了自动生成插件，也就是 <code>mybatis-generator-core</code>。</p><p>接着在项目根目录下创建自动生成配置文件，主要配置数据库信息和要生成的表已经生成的代码存放位置。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/9de1c6553d3afc7f006f791fdf088b04.png" alt="项目结构"></p><p>在之前作者也介绍过，可以参考博客文章<a href="https://www.codingme.net/2017/11/develop/tool-mybatis-generator/">使用MyBatis Generator自动生成Model、Dao、Mapper相关代码</a>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MysqlContext"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;amp;serverTimezone=GMT%2B8&amp;amp;nullCatalogMeansCurrent=true"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对于生成的pojo所在包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"net.codingme.boot.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对于生成的mapper所在目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置mapper对应的java映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"net.codingme.boot.domain.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 要生成那些表(更改tableName和domainObjectName就可以) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"book"</span> <span class="attr">domainObjectName</span>=<span class="string">"Book"</span> <span class="attr">enableCountByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">"true"</span> <span class="attr">enableUpdateByPrimaryKey</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"true"</span> <span class="attr">enableDeleteByPrimaryKey</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByPrimaryKey</span>=<span class="string">"true"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写好配置文件之后，还需要写一个启动程序，用于加载配置文件，运行就可以生成相关配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Mybatis generator的逆向生成工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 指定你想工程配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>);</span><br><span class="line">        System.out.println(configFile.getAbsolutePath());</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MybatisGenerator mybatisGenerator = <span class="keyword">new</span> MybatisGenerator();</span><br><span class="line">        mybatisGenerator.generator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成的文件如下图。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/de3a01eaf435ed5ab223603a04c9eb71.png" alt="项目结构"></p><p>查看生成的接口以及 XML 映射文件可以发现已经自动生成了常用的几个方法。</p><ol><li>deleteByPrimaryKey</li><li>insert</li><li>updateByPrimaryKey</li><li>selectByPrimaryKey</li><li>selectAll</li></ol><p>生成完成之后要在 Springboot 启动器上添加 MapperScan 注解指定要扫描的 mapper 位置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"net.codingme.boot.domain.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-3-注解配置方式"><a href="#4-3-注解配置方式" class="headerlink" title="4.3. 注解配置方式"></a>4.3. 注解配置方式</h3><p>Mybatis 同样支持注解的方式配置映射关系，使用注解可以替代 XML 的配置，写一个简单的注解例子。在刚才生成的 BookMapper.java 中增加一个根据作者名称查询的方法，并映射字段对应的属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 @Repository 注解，这样在使用 @Autowired 引入的时候不会报横线</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解方式配置映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Results</span> 字段和属性映射关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Select</span> 查询语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"ids"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"name"</span>, column = <span class="string">"name"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"author"</span>, column = <span class="string">"authors"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"createTime"</span>, column = <span class="string">"create_time"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select id as ids, author as authors, name, price, create_time, description from book where author = #&#123;author&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">selectByAuthor</span><span class="params">(@Param(<span class="string">"author"</span>)</span> String author)</span>;</span><br><span class="line">    <span class="comment">// 省略下面自动生成代码</span></span><br></pre></td></tr></table></figure></p><h2 id="5-Springboot-mybatis-测试"><a href="#5-Springboot-mybatis-测试" class="headerlink" title="5. Springboot mybatis 测试"></a>5. Springboot mybatis 测试</h2><p>正常情况下会在项目中的业务层 service 包下创建接口和类然后通过注解引入使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookMapper bookMapper;</span><br></pre></td></tr></table></figure></p><p>我们只是实验，没有这样写一套的必要，只要能确保 BookMapper 可以正常注入使用就好了。因此创建测试类进行测试。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/730d20139c46c077d4064261ec9290a5.png" alt="创建测试类"></p><p>在生成的（也可以完全手写测试方法）测试类中添加测试方法进行测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; bookList = bookMapper.selectAll();</span><br><span class="line">        Assert.assertNotNull(bookList);</span><br><span class="line">        bookList.forEach((book) -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByAuthro</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; bookList = bookMapper.selectByAuthor(<span class="string">"金庸"</span>);</span><br><span class="line">        Assert.assertNotNull(bookList);</span><br><span class="line">        bookList.forEach((book) -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookMapper.selectByPrimaryKey(<span class="number">2</span>);</span><br><span class="line">        Assert.assertNotNull(book);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> primaryKey = bookMapper.deleteByPrimaryKey(<span class="number">8</span>);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span>, primaryKey);</span><br><span class="line">        System.out.println(primaryKey);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了观察查询接口 book 的信息输出，重写 Book 类的 toString 方法，然后运行单元测试。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/0a059a1c7f49265a61cda7bbd07f1d2d.png" alt="单元测试结果"></p><p>可以发现测试全部通过。结果正常。<br>文章代码已经上传到 Github <a href="https://github.com/niumoo/springboot/tree/master/springboot-data-mybatis" target="_blank" rel="noopener">Spring Boot 连接数据库 - Mybatis</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/60327e81c9b1f06ed84cb177feded21b.jpg&quot; alt=&quot;桌面生活（来自网络）&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-Springboot-mybatis-介绍&quot;&gt;&lt;a href=&quot;#1-Springboot-mybatis-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. Springboot mybatis 介绍&quot;&gt;&lt;/a&gt;1. Springboot mybatis 介绍&lt;/h2&gt;&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数获取结果集的过程。MyBatis 可以使用简单的 &lt;code&gt;XML&lt;/code&gt; 或&lt;code&gt;注解&lt;/code&gt;来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="插件" scheme="https://www.codingme.net/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Mybatis" scheme="https://www.codingme.net/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十）使用 Spring data jpa 访问数据库</title>
    <link href="https://www.codingme.net/2019/03/springboot/springboot-10-data-jpa/"/>
    <id>https://www.codingme.net/2019/03/springboot/springboot-10-data-jpa/</id>
    <published>2019-02-28T17:40:01.000Z</published>
    <updated>2019-05-20T16:26:48.636Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/7bea43f15edb0db3ac708c346acd35c4.jpg" alt="桌面生活（来自网络）"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Springboot data jpa 和 Spring jdbc 同属于 Spring开源组织，在 Spring jdbc 之后又开发了持久层框架，很明显 Spring data jpa 相对于 Spring jdbc 更加的便捷强大，不然也就没有开发的必要了。根据下面的文章开始体验下 Spring data jpa 魅力。<br><a id="more"></a></p><h2 id="1-Spring-data-jpa-介绍"><a href="#1-Spring-data-jpa-介绍" class="headerlink" title="1. Spring data jpa 介绍"></a>1. Spring data jpa 介绍</h2><p>Spring data jpa 是 Spring data 系列的一部分，使用它可以轻松的实现对数据访问层的增强支持，在相当长的一段时间内，实现应用程序的数据访问层一直很麻烦，需要编写大量的样板式的代码来执行简单查询或者分页操作。Spring data jpa 的目标是尽量的减少实际编码来改善数据访问层的操作。</p><h2 id="2-Spring-data-jpa-依赖"><a href="#2-Spring-data-jpa-依赖" class="headerlink" title="2. Spring data jpa 依赖"></a>2. Spring data jpa 依赖</h2><p>这次的实验基于系列文章第九篇实验代码，代码中的数据源相关的配置也可以参考系列文章第九篇，这里只演示 Spring data jpa 部分。</p><p>创建Spring boot 项目，引入需要的依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot web 开发整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 阿里 fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Lombok 工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入配置文件处理器，在配置springboot相关文件时候会有提示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库访问 JPA--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加数据库链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 阿里 druid 数据源，Spring boot 中使用Druid要用这个  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-Spring-data-jpa-配置"><a href="#3-Spring-data-jpa-配置" class="headerlink" title="3. Spring data jpa 配置"></a>3. Spring data jpa 配置</h2><p>关于 Druid 数据源的配置不再说明，可以参考系列文章第九篇。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># 服务启动端口号</span><br><span class="line">server.port=8080</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line">############################################################</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.driver-class-name= com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line"># 使用 druid 数据源</span><br><span class="line">spring.datasource.type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.initialSize: 5</span><br><span class="line">spring.datasource.minIdle: 5</span><br><span class="line">spring.datasource.maxActive: 20</span><br><span class="line">spring.datasource.maxWait: 60000</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis: 300000</span><br><span class="line">spring.datasource.validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">spring.datasource.testWhileIdle: true</span><br><span class="line">spring.datasource.testOnBorrow: false</span><br><span class="line">spring.datasource.testOnReturn: false</span><br><span class="line">spring.datasource.poolPreparedStatements: true</span><br><span class="line">spring.datasource.filters: stat</span><br><span class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">spring.datasource.useGlobalDataSourceStat: true</span><br><span class="line">spring.datasource.connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line"># SpringBoot JPA</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line"># create 每次都重新创建表，update，表若存在则不重建</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.database-platform=org.hibernate.dialect.MySQL55Dialect</span><br></pre></td></tr></table></figure></p><p><code>spring.jpa.show-sql=true</code> 打印 SQL 语句。<br><code>spring.jpa.hibernate.ddl-auto=update</code> 根据 Enity 自动创建数据表，Update 表示如果表存在则不重新创建。</p><h2 id="4-Spring-data-jpa-编码"><a href="#4-Spring-data-jpa-编码" class="headerlink" title="4. Spring data jpa 编码"></a>4. Spring data jpa 编码</h2><p>Springboot Data JPA 是 ORM 的完整实现，实体类和数据表关系一一对应，因此实体类也就是数据表结构。<code>spring.jpa.hibernate.ddl-auto=update</code> 会在 JPA 运行时自动在数据表中创建被 <code>@Entity</code> 注解的实体数据表。如果表已经存在，则不会创建。</p><h3 id="4-1-数据实体类"><a href="#4-1-数据实体类" class="headerlink" title="4.1. 数据实体类"></a>4.1. 数据实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> JPA实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span> GET SET TOSTRING</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@NoArgsConstructor</span> 无参构造</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AllArgsConstructor</span> 全参构造</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/19 17:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Id</span> 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GeneratedValue</span> 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>, length = <span class="number">32</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户名不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>, length = <span class="number">32</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>, length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd hh:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 技能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String skills;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-JPA-操作接口"><a href="#4-2-JPA-操作接口" class="headerlink" title="4.2. JPA 操作接口"></a>4.2. JPA 操作接口</h3><p>JPA 操作接口只需要继承 JpaRepository 就可以了，JpaRepository 里封装了常用的增删改查分页等方法，可以直接使用，如果需要自定义查询方式，可以通过构造方法名的方式增加。下面增加了一个根据 username 和 password 查询 User 信息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.domain.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/1114:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个自定义方法，根据 username 和 password 查询 User 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，Jpa 的功能已经可以测试使用了，关于 Service 层和 Controller 就不在这里贴了，直接编写 Springboot 单元测试进行 Jpa 测试。</p><h2 id="5-Spring-data-jpa-测试"><a href="#5-Spring-data-jpa-测试" class="headerlink" title="5. Spring data jpa 测试"></a>5. Spring data jpa 测试</h2><p>使用 Springboot 的单元测试方法可以方便的测试 Springboot 项目，对 Springboot 单元测试不了解的可以直接参照<a href="https://docs.spring.io/spring-boot/docs/2.1.x/reference/htmlsingle/#boot-features-testing-spring-applications" target="_blank" rel="noopener">官方文档</a>的说明，当然，也可以直接看下面的示例代码。<br>下面编写四个测试方法分别测试根据 Id 查询、分页查询、更新数据、根据 username 和 password 查询四个功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.domain.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIdUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;User&gt; userOptional = userRepository.findById(<span class="number">1</span>);</span><br><span class="line">        User user = userOptional.orElseGet(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        Assert.assertNotNull(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        Page&lt;User&gt; userPage = userRepository.findAll(pageRequest);</span><br><span class="line">        List&lt;User&gt; userList = userPage.getContent();</span><br><span class="line">        userList.forEach((user) -&gt; System.out.println(user));</span><br><span class="line">        Assert.assertNotNull(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;User&gt; userOptional = userRepository.findById(<span class="number">1</span>);</span><br><span class="line">        User user = userOptional.orElseThrow(() -&gt; <span class="keyword">new</span> RuntimeException(<span class="string">"用户信息没有取到"</span>));</span><br><span class="line">        System.out.println(user.getAge());</span><br><span class="line">        ;</span><br><span class="line">        user.setAge(user.getAge() + <span class="number">1</span>);</span><br><span class="line">        User updateResult = userRepository.save(user);</span><br><span class="line">        Assert.assertNotNull(updateResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Username 和 Password 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByUsernameAndPasswordTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsernameAndPassword(<span class="string">"Darcy"</span>, <span class="string">"123"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        Assert.assertNotNull(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先看到四个方法全部运行通过。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/77d538a467dd500356c519b67f41b7a6.png" alt="单元测试结果"><br>分页查询查出数据库中的两条数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_, user0_.age as age2_0_, user0_.birthday as birthday3_0_, user0_.password as password4_0_, user0_.skills as skills5_0_, user0_.username as username6_0_ from user user0_ limit ?</span><br><span class="line">Hibernate: select count(user0_.id) as col_0_0_ from user user0_</span><br><span class="line">User(id=1, username=Darcy, password=123, age=18, birthday=2019-01-12 21:02:30.0, skills=Go)</span><br><span class="line">User(id=3, username=Chris, password=456, age=23, birthday=2019-01-01 00:11:22.0, skills=Java)</span><br></pre></td></tr></table></figure></p><p>根据 Id 查询也没有问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_0_, user0_.age as age2_0_0_, user0_.birthday as birthday3_0_0_, user0_.password as password4_0_0_, user0_.skills as skills5_0_0_, user0_.username as username6_0_0_ from user user0_ where user0_.id=?</span><br><span class="line">User(id=1, username=Darcy, password=123, age=18, birthday=2019-01-12 21:02:30.0, skills=Go)</span><br></pre></td></tr></table></figure></p><p>更新操作也是正常输出 SQL ，没有任何异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_0_, user0_.age as age2_0_0_, user0_.birthday as birthday3_0_0_, user0_.password as password4_0_0_, user0_.skills as skills5_0_0_, user0_.username as username6_0_0_ from user user0_ where user0_.id=?</span><br><span class="line">18</span><br><span class="line">Hibernate: select user0_.id as id1_0_0_, user0_.age as age2_0_0_, user0_.birthday as birthday3_0_0_, user0_.password as password4_0_0_, user0_.skills as skills5_0_0_, user0_.username as username6_0_0_ from user user0_ where user0_.id=?</span><br><span class="line">Hibernate: update user set age=?, birthday=?, password=?, skills=?, username=? where id=?</span><br></pre></td></tr></table></figure></p><p>最后一个是自定义查询操作，上面三个方法的输出中，Darcy 用户对应的年龄是 18，在经过更新加1 之后应该变为19，下面是自定义查询的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_, user0_.age as age2_0_, user0_.birthday as birthday3_0_, user0_.password as password4_0_, user0_.skills as skills5_0_, user0_.username as username6_0_ from user user0_ where user0_.username=? and user0_.password=?</span><br><span class="line">User(id=1, username=Darcy, password=123, age=19, birthday=2019-01-12 21:02:30.0, skills=Go)</span><br></pre></td></tr></table></figure></p><p>可见是没有任何问题的。<br>文章代码已经上传到 <a href="https://github.com/niumoo/springboot/tree/master/springboot-data-jpa" target="_blank" rel="noopener">GitHub</a>。<br>测试代码中使用了一些 JDK8 的特性，如 <code>Optional</code> 类的使用，以后会单独写一部分关于 JDK 新特性的文章，欢迎扫码关注公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/7bea43f15edb0db3ac708c346acd35c4.jpg&quot; alt=&quot;桌面生活（来自网络）&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Springboot data jpa 和 Spring jdbc 同属于 Spring开源组织，在 Spring jdbc 之后又开发了持久层框架，很明显 Spring data jpa 相对于 Spring jdbc 更加的便捷强大，不然也就没有开发的必要了。根据下面的文章开始体验下 Spring data jpa 魅力。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="Jpa" scheme="https://www.codingme.net/tags/Jpa/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（九）使用 Spring JDBC 和 Druid 数据源监控</title>
    <link href="https://www.codingme.net/2019/02/springboot/springboot-09-data-jdbc/"/>
    <id>https://www.codingme.net/2019/02/springboot/springboot-09-data-jdbc/</id>
    <published>2019-02-27T15:40:01.000Z</published>
    <updated>2019-10-30T07:47:31.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="/assets/springboot-09-data-jdbc/129bdbc0a9f53e0fd3b748978ccd5fe6.png" alt="监控"></p><p>作为一名 Java 开发者，相信对 JDBC（Java Data Base Connectivity）是不会陌生的，JDBC作为 Java 基础内容，它提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。下面演示下 Springboot 中如何使用 JDBC 操作，并配置使用 Druid 连接池，体验 Druid 对数据库操作强大的监控和扩展功能。Alibaba-Durid 官方手册<a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">点这里</a>。<br><a id="more"></a></p><h2 id="1-数据库准备"><a href="#1-数据库准备" class="headerlink" title="1. 数据库准备"></a>1. 数据库准备</h2><p>使用mysql数据库创建数据库 springboot，并在库中新建数据表 user 并新增两条信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`skills`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"># 新增数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`age`</span>, <span class="string">`birthday`</span>, <span class="string">`password`</span>, <span class="string">`skills`</span>, <span class="string">`username`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">17</span>, <span class="string">'2019-01-12 21:02:30'</span>, <span class="string">'123'</span>, <span class="string">'Go'</span>, <span class="string">'Darcy'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`age`</span>, <span class="string">`birthday`</span>, <span class="string">`password`</span>, <span class="string">`skills`</span>, <span class="string">`username`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">23</span>, <span class="string">'2019-01-01 00:11:22'</span>, <span class="string">'456'</span>, <span class="string">'Java'</span>, <span class="string">'Chris'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h2><p>新建一个 Springboot项目，这里不说。添加依赖如下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring jdbc 操作模版 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springboot web开发 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mysql 数据库连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入druid数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-配置数据源信息"><a href="#3-配置数据源信息" class="headerlink" title="3. 配置数据源信息"></a>3. 配置数据源信息</h2><p>常规的 JDBC 配置不需要配置这么多内容，这里因为使用了 Druid 连接池，所以配置了 Druid 部分。对自动配置不理解的可以查看系列文章<a href="https://www.codingme.net/2019/01/springboot/springboot02-config/#4-%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8">Springboot 系列（二）Spring Boot 配置文件</a>。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></p><p>配置完毕之后，配置信息还不能绑定到 Druid数据源中，还需要新建一个配置类绑定数据源和配置信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Druid 数据源配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/14 22:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">druid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里，数据源已经配置完毕，编写测试方法测试 druid 连接池是否生效。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试JDBC数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行看到 contextLoads 输出信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">Loading class `com.mysql.jdbc.Driver&apos;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&apos;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br><span class="line">2019-02-27 14:14:56.144  INFO 12860 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3e104d4b</span><br></pre></td></tr></table></figure></p><p>输出日志中的 com.alibaba.druid 说明 Druid 已经生效。</p><h2 id="4-使用-Spring-JDBC"><a href="#4-使用-Spring-JDBC" class="headerlink" title="4. 使用 Spring-JDBC"></a>4. 使用 Spring-JDBC</h2><p>传统的 JDBC 使用中，需要编写大量代码，从构造 PreparedStatement 到查询不胜其烦。面对这样的开发痛点，Spring 封装了 Spring-jdbc. 让我们使用 JdbcTemplate 即可轻松的操作数据库。Spring-jdbc 的详细使用不是这篇文章重点，只简单演示下是否生效。<br>编写控制器，查询一个 user 信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">"select * FROM user"</span>);</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动spring 项目，请求 /query 接口得到正常响应。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"age"</span>: <span class="number">17</span>,</span><br><span class="line"><span class="attr">"birthday"</span>: <span class="string">"2019-01-12T13:02:30.000+0000"</span>,</span><br><span class="line"><span class="attr">"password"</span>: <span class="string">"123"</span>,</span><br><span class="line"><span class="attr">"skills"</span>: <span class="string">"Go"</span>,</span><br><span class="line"><span class="attr">"username"</span>: <span class="string">"Darcy"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见 Spring-JDBC 已经从数据库中取出了数据信息。</p><h2 id="5-使用-Druid-监控"><a href="#5-使用-Druid-监控" class="headerlink" title="5. 使用 Druid 监控"></a>5. 使用 Druid 监控</h2><p>如果使用 Druid 连接池却不使用监控功能，那么就有点暴殄天物了。下面开始配置 Druid 的 SQL 监控功能。在上面写的 DruidConfig 配置类中增加配置 Druid 的 Servlet 和 Filter.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Druid的servlet</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet());</span><br><span class="line">      Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      initParams.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">      initParams.put(<span class="string">"loginPassword"</span>, <span class="string">"123"</span>);</span><br><span class="line">      initParams.put(<span class="string">"allow"</span>,<span class="string">"127.0.0.1"</span>);</span><br><span class="line">      bean.setInitParameters(initParams);</span><br><span class="line">      bean.setUrlMappings(Arrays.asList(<span class="string">"/druid/*"</span>));</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      FilterRegistrationBean&lt;WebStatFilter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">      HashMap&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      initParams.put(<span class="string">"exclusions"</span>, <span class="string">"/css,/druid/*"</span>);</span><br><span class="line">      bean.setInitParameters(initParams);</span><br><span class="line">      bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>上面配置了 Druid 监控访问路径为 <code>/druid</code>、登录用户是 <code>admin</code>、登录密码是<code>123</code>、允许访问的IP是<code>127.0.0.1</code> 本机、不需要监控的请求是 <code>/css</code> 和 <code>/druid</code> 开头的请求。</p><p>重新启动项目，访问测试 <code>/query</code>，然后访问 <code>/durid</code> 登录页。<br><img src="/assets/springboot-09-data-jdbc/d6f42164708fcd4c8e5009386bb9837e.png" alt="Druid 登录页"></p><p>登录后可以看到 SQL 监控信息和 URL 监控等信息。<br><img src="/assets/springboot-09-data-jdbc/64a71b68b6afb74e22a2eb274e8956c3.png" alt="SQL 监控"><br>URL 监控。<br><img src="/assets/springboot-09-data-jdbc/7b96df5bbd8698295696a3805ad82e26.png" alt="URL 监控"></p><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-data-jdbc" target="_blank" rel="noopener">Spring Boot jdbc</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/springboot-09-data-jdbc/129bdbc0a9f53e0fd3b748978ccd5fe6.png&quot; alt=&quot;监控&quot;&gt;&lt;/p&gt;
&lt;p&gt;作为一名 Java 开发者，相信对 JDBC（Java Data Base Connectivity）是不会陌生的，JDBC作为 Java 基础内容，它提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。下面演示下 Springboot 中如何使用 JDBC 操作，并配置使用 Druid 连接池，体验 Druid 对数据库操作强大的监控和扩展功能。Alibaba-Durid 官方手册&lt;a href=&quot;https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点这里&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（八）动态Banner与图片转字符图案的手动实现</title>
    <link href="https://www.codingme.net/2019/02/springboot/springboot-08-banner/"/>
    <id>https://www.codingme.net/2019/02/springboot/springboot-08-banner/</id>
    <published>2019-02-25T15:40:01.000Z</published>
    <updated>2019-05-20T16:26:48.627Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本 Spring Boot 系列文章基于 Spring Boot 版本 <strong>v2.1.1.RELEASE</strong> 进行学习分析，版本不同可能会有细微差别。</p></blockquote><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/33e6877404fed0daf8c894cec6a4d37c.png" alt="Springboot 启动 banner"></p><p>使用过 Springboot 的对上面这个图案肯定不会陌生，Springboot 启动的同时会打印上面的图案，并带有版本号。查看官方文档可以找到关于 banner 的描述</p><blockquote><p>The banner that is printed on start up can be changed by adding a banner.txt file to your classpath or by setting the spring.banner.location property to the location of such a file. If the file has an encoding other than UTF-8, you can set spring.banner.charset. In addition to a text file, you can also add a banner.gif, banner.jpg, or banner.png image file to your classpath or set the spring.banner.image.location property. Images are converted into an ASCII art representation and printed above any text banner.</p></blockquote><a id="more"></a><p>就不翻译了，直接有道翻译贴过来看个大概意思。</p><blockquote><p>可以通过向类路径中添加一个banner.txt文件或设置spring.banner来更改在start up上打印的banner。属性指向此类文件的位置。如果文件的编码不是UTF-8，那么可以设置spring.banner.charset。除了文本文件，还可以添加横幅。将gif、banner.jpg或banner.png图像文件保存到类路径或设置spring.banner.image。位置属性。图像被转换成ASCII艺术形式，并打印在任何文本横幅上面。</p></blockquote><h1 id="1-自定义-banner"><a href="#1-自定义-banner" class="headerlink" title="1. 自定义 banner"></a>1. 自定义 banner</h1><p>根据官方的描述，可以在类路径中自定义 banner 图案，我们进行尝试在放 resouce 目录下新建文件 banner.txt 并写入内容（<a href="http://patorjk.com/software/taag/#p=testall&amp;f=Graffiti&amp;t=niumoo" target="_blank" rel="noopener">在线字符生成</a>）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    (_)</span><br><span class="line"> _ __  _ _   _ _ __ ___   ___   ___</span><br><span class="line">| &apos;_ \| | | | | &apos;_ ` _ \ / _ \ / _ \</span><br><span class="line">| | | | | |_| | | | | | | (_) | (_) |</span><br><span class="line">|_| |_|_|\__,_|_| |_| |_|\___/ \___/ 版本：$&#123;spring-boot.formatted-version&#125;</span><br></pre></td></tr></table></figure></p><p>启动 Springboot 在控制台看到下面的输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     (_)</span><br><span class="line">  _ __  _ _   _ _ __ ___   ___   ___</span><br><span class="line"> | &apos;_ \| | | | | &apos;_ ` _ \ / _ \ / _ \</span><br><span class="line"> | | | | | |_| | | | | | | (_) | (_) |</span><br><span class="line"> |_| |_|_|\__,_|_| |_| |_|\___/ \___/ 版本：(v2.1.3.RELEASE)</span><br><span class="line">2019-02-25 14:00:31.289  INFO 12312 --- [           main] net.codingme.banner.BannerApplication    : Starting BannerApplication on LAPTOP-L1S5MKTA with PID 12312 (D:\IdeaProjectMy\springboot-git\springboot-banner\target\classes started by Niu in D:\IdeaProjectMy\springboot-git\springboot-banner)</span><br><span class="line">2019-02-25 14:00:31.291  INFO 12312 --- [           main] net.codingme.banner.BannerApplication    : No active profile set, falling back to default profiles: default</span><br><span class="line">2019-02-25 14:00:32.087  INFO 12312 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br></pre></td></tr></table></figure></p><p>发现自定义 banner 已经生效了，官方文档的介绍里说还可以放置图片，下面放置图片 banner.jpg 测试。<br>网上随便找了一个图片。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/d9879377e30b5f37f9116e7927e35604.jpg" alt="Google Log">再次启动观察输出。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/935928a0c76faa399a6f49252c713afa.png" alt="自定义 Banner">Springboot 把图案转成了 ASCII 图案。</p><h1 id="2-ASCII-图案生成原理"><a href="#2-ASCII-图案生成原理" class="headerlink" title="2. ASCII 图案生成原理"></a>2. ASCII 图案生成原理</h1><p>看了上面的例子，发现 Springboot 可以把图片转换成 ASCII 图案，那么它是怎么做的呢？我们或许可以想象出一个大概流程。</p><ol><li>获取图片。</li><li>遍历图片像素点。</li><li>分析像素点，每个像素点根据颜色深度得出一个值，根据明暗度匹配不同的字符。</li><li>输出图案。</li></ol><p>Springboot 对图片 banner 的处理到底是不是我们上面想想的那样呢？直接去源码中寻找答案。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 位置：org.springframework.boot.SpringApplicationBannerPrinter */</span></span><br><span class="line"><span class="comment">//方法1：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Banner <span class="title">print</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, Log logger)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 banner  调用方法记为2</span></span><br><span class="line">Banner banner = getBanner(environment);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">logger.info(createStringFromBanner(banner, environment, sourceClass));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UnsupportedEncodingException ex) &#123;</span><br><span class="line">logger.warn(<span class="string">"Failed to create String for banner"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 banner</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PrintedBanner(banner, sourceClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">getBanner</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">Banners banners = <span class="keyword">new</span> Banners();</span><br><span class="line"><span class="comment">// 获取图片banner，我们只关注这个，调用方法记为3</span></span><br><span class="line">banners.addIfNotNull(getImageBanner(environment));</span><br><span class="line">banners.addIfNotNull(getTextBanner(environment));</span><br><span class="line"><span class="keyword">if</span> (banners.hasAtLeastOneBanner()) &#123;</span><br><span class="line"><span class="keyword">return</span> banners;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.fallbackBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.fallbackBanner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DEFAULT_BANNER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法3</span></span><br><span class="line"><span class="comment">/** 获取自定义banner文件信息 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">getImageBanner</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line"><span class="comment">// BANNER_IMAGE_LOCATION_PROPERTY = "spring.banner.image.location";</span></span><br><span class="line">String location = environment.getProperty(BANNER_IMAGE_LOCATION_PROPERTY);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(location)) &#123;</span><br><span class="line">Resource resource = <span class="keyword">this</span>.resourceLoader.getResource(location);</span><br><span class="line"><span class="keyword">return</span> resource.exists() ? <span class="keyword">new</span> ImageBanner(resource) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// IMAGE_EXTENSION = &#123; "gif", "jpg", "png" &#125;;</span></span><br><span class="line"><span class="keyword">for</span> (String ext : IMAGE_EXTENSION) &#123;</span><br><span class="line">Resource resource = <span class="keyword">this</span>.resourceLoader.getResource(<span class="string">"banner."</span> + ext);</span><br><span class="line"><span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ImageBanner(resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是寻找自定义图片 banner 文件源码，如果把图片转换成 ASCII 图案继续跟进，追踪方法1中的<code>PrintedBanner(banner, sourceClass)</code>方法。最终查找输出图案的主要方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位置：org.springframework.boot.ImageBanner#printBanner</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printBanner</span><span class="params">(BufferedImage image, <span class="keyword">int</span> margin, <span class="keyword">boolean</span> invert,</span></span></span><br><span class="line"><span class="function"><span class="params">PrintStream out)</span> </span>&#123;</span><br><span class="line">AnsiElement background = invert ? AnsiBackground.BLACK : AnsiBackground.DEFAULT;</span><br><span class="line">out.print(AnsiOutput.encode(AnsiColor.DEFAULT));</span><br><span class="line">out.print(AnsiOutput.encode(background));</span><br><span class="line">out.println();</span><br><span class="line">out.println();</span><br><span class="line">AnsiColor lastColor = AnsiColor.DEFAULT;</span><br><span class="line"><span class="comment">// 图片高度遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; image.getHeight(); y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; margin; i++) &#123;</span><br><span class="line">out.print(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片宽度遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; image.getWidth(); x++) &#123;</span><br><span class="line"><span class="comment">// 获取每一个像素点</span></span><br><span class="line">Color color = <span class="keyword">new</span> Color(image.getRGB(x, y), <span class="keyword">false</span>);</span><br><span class="line">AnsiColor ansiColor = AnsiColors.getClosest(color);</span><br><span class="line"><span class="keyword">if</span> (ansiColor != lastColor) &#123;</span><br><span class="line">out.print(AnsiOutput.encode(ansiColor));</span><br><span class="line">lastColor = ansiColor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 像素点转换成字符输出，调用方法记为2</span></span><br><span class="line">out.print(getAsciiPixel(color, invert));</span><br><span class="line">&#125;</span><br><span class="line">out.println();</span><br><span class="line">&#125;</span><br><span class="line">out.print(AnsiOutput.encode(AnsiColor.DEFAULT));</span><br><span class="line">out.print(AnsiOutput.encode(AnsiBackground.DEFAULT));</span><br><span class="line">out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2，像素点转换成字符</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">getAsciiPixel</span><span class="params">(Color color, <span class="keyword">boolean</span> dark)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 根据 color 算出一个亮度值</span></span><br><span class="line"><span class="keyword">double</span> luminance = getLuminance(color, dark);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PIXEL.length; i++) &#123;</span><br><span class="line"><span class="comment">// 寻找亮度值匹配的字符</span></span><br><span class="line"><span class="keyword">if</span> (luminance &gt;= (LUMINANCE_START - (i * LUMINANCE_INCREMENT))) &#123;</span><br><span class="line"><span class="comment">// PIXEL = &#123; ' ', '.', '*', ':', 'o', '&amp;', '8', '#', '@' &#125;;</span></span><br><span class="line"><span class="keyword">return</span> PIXEL[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> PIXEL[PIXEL.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过查看源码，发现 Springboot 的图片 banner 的转换和我们预想的大致一致，这么有趣的功能我们能不能自己写一个呢？</p><h1 id="3-自己实现图片转-ASCII字符"><a href="#3-自己实现图片转-ASCII字符" class="headerlink" title="3.自己实现图片转 ASCII字符"></a>3.自己实现图片转 ASCII字符</h1><p>根据上面的分析，总结一下思路，我们也可以手动写一个图片转 ASCII 字符图案。<br>思路如下：</p><ol><li>图片大小缩放，调整到合适大小。</li><li>遍历图片像素。</li><li>获取图片像素点亮度（RGB颜色通过公式可以得到亮度数值）。</li><li>匹配字符。</li><li>输出图案。</li></ol><p>上面的5个步骤直接使用 Java 代码就可以完整实现，下面是编写的源码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 根据图片生成字符图案</span></span><br><span class="line"><span class="comment"> * 1.图片大小缩放</span></span><br><span class="line"><span class="comment"> * 2.遍历图片像素点</span></span><br><span class="line"><span class="comment"> * 3.获取图片像素点亮度</span></span><br><span class="line"><span class="comment"> * 4.匹配字符</span></span><br><span class="line"><span class="comment"> * 5.输出图案</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span> www.codingme.net</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-02-25 23:03:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorTextImage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] PIXEL = &#123;<span class="string">'@'</span>, <span class="string">'#'</span>, <span class="string">'8'</span>, <span class="string">'&amp;'</span>, <span class="string">'o'</span>, <span class="string">':'</span>, <span class="string">'*'</span>, <span class="string">'.'</span>, <span class="string">' '</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 图片缩放</span></span><br><span class="line">        BufferedImage bufferedImage = makeSmallImage(<span class="string">"src/main/resources/banner.jpg"</span>);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        printImage(bufferedImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printImage</span><span class="params">(BufferedImage image)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> width = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = image.getHeight();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> rgb = image.getRGB(j, i);</span><br><span class="line">                Color color = <span class="keyword">new</span> Color(rgb);</span><br><span class="line">                <span class="keyword">int</span> red = color.getRed();</span><br><span class="line">                <span class="keyword">int</span> green = color.getGreen();</span><br><span class="line">                <span class="keyword">int</span> blue = color.getBlue();</span><br><span class="line">                <span class="comment">// 一个用于计算RGB像素点亮度的公式</span></span><br><span class="line">                Double luminace = <span class="number">0.2126</span> * red + <span class="number">0.7152</span> * green + <span class="number">0.0722</span> * blue;</span><br><span class="line">                <span class="keyword">double</span> index = luminace / (Math.ceil(<span class="number">255</span> / PIXEL.length) + <span class="number">0.5</span>);</span><br><span class="line">                System.out.print(PIXEL[(<span class="keyword">int</span>)(Math.floor(index))]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">makeSmallImage</span><span class="params">(String srcImageName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File srcImageFile = <span class="keyword">new</span> File(srcImageName);</span><br><span class="line">        <span class="keyword">if</span> (srcImageFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件不存在"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        BufferedImage tagImage = <span class="keyword">null</span>;</span><br><span class="line">        Image srcImage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            srcImage = ImageIO.read(srcImageFile);</span><br><span class="line">            <span class="keyword">int</span> srcWidth = srcImage.getWidth(<span class="keyword">null</span>);<span class="comment">// 原图片宽度</span></span><br><span class="line">            <span class="keyword">int</span> srcHeight = srcImage.getHeight(<span class="keyword">null</span>);<span class="comment">// 原图片高度</span></span><br><span class="line">            <span class="keyword">int</span> dstMaxSize = <span class="number">90</span>;<span class="comment">// 目标缩略图的最大宽度/高度，宽度与高度将按比例缩写</span></span><br><span class="line">            <span class="keyword">int</span> dstWidth = srcWidth;<span class="comment">// 缩略图宽度</span></span><br><span class="line">            <span class="keyword">int</span> dstHeight = srcHeight;<span class="comment">// 缩略图高度</span></span><br><span class="line">            <span class="keyword">float</span> scale = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 计算缩略图的宽和高</span></span><br><span class="line">            <span class="keyword">if</span> (srcWidth &gt; dstMaxSize) &#123;</span><br><span class="line">                dstWidth = dstMaxSize;</span><br><span class="line">                scale = (<span class="keyword">float</span>)srcWidth / (<span class="keyword">float</span>)dstMaxSize;</span><br><span class="line">                dstHeight = Math.round((<span class="keyword">float</span>)srcHeight / scale);</span><br><span class="line">            &#125;</span><br><span class="line">            srcHeight = dstHeight;</span><br><span class="line">            <span class="keyword">if</span> (srcHeight &gt; dstMaxSize) &#123;</span><br><span class="line">                dstHeight = dstMaxSize;</span><br><span class="line">                scale = (<span class="keyword">float</span>)srcHeight / (<span class="keyword">float</span>)dstMaxSize;</span><br><span class="line">                dstWidth = Math.round((<span class="keyword">float</span>)dstWidth / scale);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 生成缩略图</span></span><br><span class="line">            tagImage = <span class="keyword">new</span> BufferedImage(dstWidth, dstHeight, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            tagImage.getGraphics().drawImage(srcImage, <span class="number">0</span>, <span class="number">0</span>, dstWidth, dstHeight, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> tagImage;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileOutputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tagImage = <span class="keyword">null</span>;</span><br><span class="line">            srcImage = <span class="keyword">null</span>;</span><br><span class="line">            System.gc();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还是拿上面的 Google log 图片作为实验对象，运行得到字符图案输出。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/ddc9487dd2050f9188825195427ed0a1.png" alt="图片转 ASCII 字符"></p><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/" target="_blank" rel="noopener">Spring Boot</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：本 Spring Boot 系列文章基于 Spring Boot 版本 &lt;strong&gt;v2.1.1.RELEASE&lt;/strong&gt; 进行学习分析，版本不同可能会有细微差别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/33e6877404fed0daf8c894cec6a4d37c.png&quot; alt=&quot;Springboot 启动 banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用过 Springboot 的对上面这个图案肯定不会陌生，Springboot 启动的同时会打印上面的图案，并带有版本号。查看官方文档可以找到关于 banner 的描述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The banner that is printed on start up can be changed by adding a banner.txt file to your classpath or by setting the spring.banner.location property to the location of such a file. If the file has an encoding other than UTF-8, you can set spring.banner.charset. In addition to a text file, you can also add a banner.gif, banner.jpg, or banner.png image file to your classpath or set the spring.banner.image.location property. Images are converted into an ASCII art representation and printed above any text banner.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（七）web 开发之异常错误处理机制剖析</title>
    <link href="https://www.codingme.net/2019/02/springboot/springboot-07-web-exception/"/>
    <id>https://www.codingme.net/2019/02/springboot/springboot-07-web-exception/</id>
    <published>2019-02-22T00:00:01.000Z</published>
    <updated>2019-05-20T16:26:48.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家在刚开始体验 Springboot 的时候一定会经常碰到这个页面，也就是访问一个不存在的页面的默认返回页面。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/992cd6d0f9f75737d1088523d80a64c1.png" alt="Spring Boot 默认错误页面"><br><a id="more"></a><br>如果是其他客户端请求，如接口测试工具，会默认返回JSON数据。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"timestamp"</span>:<span class="string">"2019-01-06 22:26:16"</span>,</span><br><span class="line">        <span class="attr">"status"</span>:<span class="number">404</span>,</span><br><span class="line">        <span class="attr">"error"</span>:<span class="string">"Not Found"</span>,</span><br><span class="line">        <span class="attr">"message"</span>:<span class="string">"No message available"</span>,</span><br><span class="line">        <span class="attr">"path"</span>:<span class="string">"/asdad"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显，SpringBoot 根据 <a href="https://www.codingme.net/2018/07/computer/protocol-http/">HTTP 的请求头信息</a>进行了不同的响应处理。</p><h2 id="1-SpringBoot-异常处理机制"><a href="#1-SpringBoot-异常处理机制" class="headerlink" title="1. SpringBoot 异常处理机制"></a>1. SpringBoot 异常处理机制</h2><p>追随 SpringBoot 源码可以分析出默认的错误处理机制。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</span></span><br><span class="line"><span class="comment">// 绑定一些错误信息 记为 1</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultErrorAttributes <span class="title">errorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorAttributes(</span><br><span class="line"><span class="keyword">this</span>.serverProperties.getError().isIncludeException());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认处理 /error 记为 2</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = ErrorController.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BasicErrorController <span class="title">basicErrorController</span><span class="params">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BasicErrorController(errorAttributes, <span class="keyword">this</span>.serverProperties.getError(),</span><br><span class="line"><span class="keyword">this</span>.errorViewResolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误处理页面 记为3</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ErrorPageCustomizer <span class="title">errorPageCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ErrorPageCustomizer(<span class="keyword">this</span>.serverProperties, <span class="keyword">this</span>.dispatcherServletPath);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorViewResolverConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">DefaultErrorViewResolverConfiguration(ApplicationContext applicationContext,</span><br><span class="line">ResourceProperties resourceProperties) &#123;</span><br><span class="line"><span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 决定去哪个错误页面 记为4</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(DispatcherServlet.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultErrorViewResolver <span class="title">conventionErrorViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorViewResolver(<span class="keyword">this</span>.applicationContext,</span><br><span class="line"><span class="keyword">this</span>.resourceProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结合上面的注释，上面代码里的四个方法就是 Springboot 实现默认返回错误页面主要部分。</p><h3 id="1-1-errorAttributes"><a href="#1-1-errorAttributes" class="headerlink" title="1.1. errorAttributes"></a>1.1. errorAttributes</h3><p><code>errorAttributes</code>直译为错误属性，这个方法确实如此，直接追踪源代码。<br>代码位于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.web.servlet.error.DefaultErrorAttributes</span></span><br></pre></td></tr></table></figure></p><p>这个类里为错误情况共享很多错误信息，如。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">errorAttributes.put(&quot;timestamp&quot;, new Date());</span><br><span class="line">errorAttributes.put(&quot;status&quot;, status);</span><br><span class="line">errorAttributes.put(&quot;error&quot;, HttpStatus.valueOf(status).getReasonPhrase());</span><br><span class="line">errorAttributes.put(&quot;errors&quot;, result.getAllErrors());</span><br><span class="line">errorAttributes.put(&quot;exception&quot;, error.getClass().getName());</span><br><span class="line">errorAttributes.put(&quot;message&quot;, error.getMessage());</span><br><span class="line">errorAttributes.put(&quot;trace&quot;, stackTrace.toString());</span><br><span class="line">errorAttributes.put(&quot;path&quot;, path);</span><br></pre></td></tr></table></figure></p><p>这些信息用作共享信息返回，所以当我们使用模版引擎时，也可以像取出其他参数一样轻松取出。</p><h3 id="1-2-basicErrorControll"><a href="#1-2-basicErrorControll" class="headerlink" title="1.2. basicErrorControll"></a>1.2. basicErrorControll</h3><p>直接追踪 <code>BasicErrorController</code> 的源码内容可以发现下面的一段代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">// 定义请求路径，如果没有error.path路径，则路径为/error</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果支持的格式 text/html</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="comment">// 获取要返回的值</span></span><br><span class="line">Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">response.setStatus(status.value());</span><br><span class="line">        <span class="comment">// 解析错误视图信息，也就是下面1.4中的逻辑</span></span><br><span class="line">ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="comment">// 返回视图，如果没有存在的页面模版，则使用默认错误视图模版</span></span><br><span class="line">        <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line"><span class="comment">// 如果是接受所有格式的HTTP请求</span></span><br><span class="line">        Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="comment">// 响应HttpEntity</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由上可知，<code>basicErrorControll</code> 用于创建用于请求返回的 <code>controller</code>类，并根据HTTP请求可接受的格式不同返回对应的信息，所以在使用浏览器和接口测试工具测试时返回结果存在差异。</p><h3 id="1-3-ererrorPageCustomizer"><a href="#1-3-ererrorPageCustomizer" class="headerlink" title="1.3. ererrorPageCustomizer"></a>1.3. ererrorPageCustomizer</h3><p>直接查看方法里的<code>new ErrorPageCustomizer(this.serverProperties, this.dispatcherServletPath);</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ErrorPageCustomizer</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> WebServerFactoryCustomizer&#125; that configures the server's error pages.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorPageCustomizer</span> <span class="keyword">implements</span> <span class="title">ErrorPageRegistrar</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerProperties properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DispatcherServletPath dispatcherServletPath;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ErrorPageCustomizer</span><span class="params">(ServerProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">DispatcherServletPath dispatcherServletPath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line"><span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册错误页面</span></span><br><span class="line">        <span class="comment">// this.dispatcherServletPath.getRelativePath(this.properties.getError().getPath())</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry errorPageRegistry)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//getPath()得到如下地址，如果没有自定义error.path属性，则去/error位置</span></span><br><span class="line">            <span class="comment">//@Value("$&#123;error.path:/error&#125;")</span></span><br><span class="line"><span class="comment">//private String path = "/error";</span></span><br><span class="line">ErrorPage errorPage = <span class="keyword">new</span> ErrorPage(<span class="keyword">this</span>.dispatcherServletPath</span><br><span class="line">.getRelativePath(<span class="keyword">this</span>.properties.getError().getPath()));</span><br><span class="line">errorPageRegistry.addErrorPages(errorPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由上可知，当遇到错误时，如果没有自定义 <code>error.path</code> 属性，则请求转发至 <code>/error</code>.</p><h3 id="1-4-conventionErrorViewResolver"><a href="#1-4-conventionErrorViewResolver" class="headerlink" title="1.4. conventionErrorViewResolver"></a>1.4. conventionErrorViewResolver</h3><p>根据上面的代码，一步步深入查看 SpringBoot 的默认错误处理实现，查看看 <code>conventionErrorViewResolver</code>方法。下面是 DefaultErrorViewResolver 类的部分代码，注释解析。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化参数，key 是HTTP状态码第一位。</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">Map&lt;Series, String&gt; views = <span class="keyword">new</span> EnumMap&lt;&gt;(Series.class);</span><br><span class="line">views.put(Series.CLIENT_ERROR, <span class="string">"4xx"</span>);</span><br><span class="line">views.put(Series.SERVER_ERROR, <span class="string">"5xx"</span>);</span><br><span class="line">SERIES_VIEWS = Collections.unmodifiableMap(views);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用HTTP完整状态码检查是否有页面可以匹配</span></span><br><span class="line">ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line"><span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line"><span class="comment">// 使用 HTTP 状态码第一位匹配初始化中的参数创建视图对象</span></span><br><span class="line">            modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 拼接错误视图路径 /eroor/[viewname]</span></span><br><span class="line">        String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line"><span class="comment">// 使用模版引擎尝试创建视图对象</span></span><br><span class="line">        TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line"><span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 没有模版引擎，使用静态资源文件夹解析视图</span></span><br><span class="line"><span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 遍历静态资源文件夹,检查是否有存在视图</span></span><br><span class="line">        <span class="keyword">for</span> (String location : <span class="keyword">this</span>.resourceProperties.getStaticLocations()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Resource resource = <span class="keyword">this</span>.applicationContext.getResource(location);</span><br><span class="line">resource = resource.createRelative(viewName + <span class="string">".html"</span>);</span><br><span class="line"><span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> HtmlResourceView(resource), model);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而 Thymeleaf 对于错误页面的解析实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafTemplateAvailabilityProvider</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">TemplateAvailabilityProvider</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTemplateAvailable</span><span class="params">(String view, Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">ClassLoader classLoader, ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(<span class="string">"org.thymeleaf.spring5.SpringTemplateEngine"</span>,</span><br><span class="line">classLoader)) &#123;</span><br><span class="line">String prefix = environment.getProperty(<span class="string">"spring.thymeleaf.prefix"</span>,</span><br><span class="line">ThymeleafProperties.DEFAULT_PREFIX);</span><br><span class="line">String suffix = environment.getProperty(<span class="string">"spring.thymeleaf.suffix"</span>,</span><br><span class="line">ThymeleafProperties.DEFAULT_SUFFIX);</span><br><span class="line"><span class="keyword">return</span> resourceLoader.getResource(prefix + view + suffix).exists();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从而我们可以得知，错误页面首先会检查<code>模版引擎</code>文件夹下的 <code>/error/HTTP状态码</code> 文件，如果不存在，则检查去模版引擎下的<code>/error/4xx</code>或者 <code>/error/5xx</code> 文件，如果还不存在，则检查<code>静态资源</code>文件夹下对应的上述文件。</p><h2 id="2-自定义异常页面"><a href="#2-自定义异常页面" class="headerlink" title="2. 自定义异常页面"></a>2. 自定义异常页面</h2><p>经过上面的 SpringBoot 错误机制源码分析，知道当遇到错误情况时候，SpringBoot 会首先返回到<code>模版引擎</code>文件夹下的 <code>/error/HTTP</code>状态码 文件，如果不存在，则检查去模版引擎下的<code>/error/4xx</code>或者 <code>/error/5xx</code> 文件，如果还不存在，则检查<code>静态资源</code>文件夹下对应的上述文件。并且在返回时会共享一些错误信息，这些错误信息可以在模版引擎中直接使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">errorAttributes.put(<span class="string">"status"</span>, status);</span><br><span class="line">errorAttributes.put(<span class="string">"error"</span>, HttpStatus.valueOf(status).getReasonPhrase());</span><br><span class="line">errorAttributes.put(<span class="string">"errors"</span>, result.getAllErrors());</span><br><span class="line">errorAttributes.put(<span class="string">"exception"</span>, error.getClass().getName());</span><br><span class="line">errorAttributes.put(<span class="string">"message"</span>, error.getMessage());</span><br><span class="line">errorAttributes.put(<span class="string">"trace"</span>, stackTrace.toString());</span><br><span class="line">errorAttributes.put(<span class="string">"path"</span>, path);</span><br></pre></td></tr></table></figure></p><p>因此，需要自定义错误页面，只需要在模版文件夹下的 error 文件夹下防止4xx 或者 5xx 文件即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>[[$&#123;status&#125;]]<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/webjars/bootstrap/4.1.3/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-5"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>错误码：[[$&#123;status&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span>信息：[[$&#123;message&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span>时间：[[$&#123;#dates.format(timestamp,'yyyy-MM-dd hh:mm:ss ')&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span>请求路径：[[$&#123;path&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>随意访问不存在路径得到。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/6ceefac5c6b7a0a8c7ab800e718c033d.png" alt="Spring Boot 自定义错误页面"><br>发现错误页面已经跳转到我们的自定义页面。</p><h2 id="3-自定义错误JSON"><a href="#3-自定义错误JSON" class="headerlink" title="3. 自定义错误JSON"></a>3. 自定义错误JSON</h2><p>根据上面的 SpringBoot 错误处理原理分析，得知最终返回的 JSON 信息是从一个 map 对象中转换出来的，那么，只要能自定义 map 中的值，就可以自定义错误信息的 json 格式了。直接重写 <code>DefaultErrorAttributes</code>类的  <code>getErrorAttributes</code> 方法即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自定义错误信息JSON值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/7 15:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorAttributesCustom</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        String code = map.get(<span class="string">"status"</span>).toString();</span><br><span class="line">        String message = map.get(<span class="string">"error"</span>).toString();</span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">"code"</span>, code);</span><br><span class="line">        hashMap.put(<span class="string">"message"</span>, message);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 postman 请求测试。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/1ba2dec88ba06b58011350b31a93e5e1.png" alt="Postman 测试结果"></p><h2 id="4-统一异常处理"><a href="#4-统一异常处理" class="headerlink" title="4. 统一异常处理"></a>4. 统一异常处理</h2><p>使用 <code>@ControllerAdvice</code> 结合<code>@ExceptionHandler</code> 注解可以实现统一的异常处理，<code>@ExceptionHandler</code>注解的类会自动应用在每一个被 <code>@RequestMapping</code> 注解的方法。当程序中出现异常时会层层上抛<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.Response;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.enums.ResponseEnum;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.utils.ResponseUtill;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 统一的异常处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/7 14:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"异常 &#123;&#125;"</span>, e);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BaseException) &#123;</span><br><span class="line">            BaseException exception = (BaseException) e;</span><br><span class="line">            String code = exception.getCode();</span><br><span class="line">            String message = exception.getMessage();</span><br><span class="line">            <span class="keyword">return</span> ResponseUtill.error(code, message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtill.error(ResponseEnum.UNKNOW_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请求异常页面得到响应如下。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"code"</span>: <span class="string">"-1"</span>,</span><br><span class="line"> <span class="attr">"data"</span>: [],</span><br><span class="line"> <span class="attr">"message"</span>: <span class="string">"未知错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-web-error" target="_blank" rel="noopener">Spring Boot Web开发 - 错误机制</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信大家在刚开始体验 Springboot 的时候一定会经常碰到这个页面，也就是访问一个不存在的页面的默认返回页面。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/992cd6d0f9f75737d1088523d80a64c1.png&quot; alt=&quot;Spring Boot 默认错误页面&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（六）web 开发之拦截器和三大组件</title>
    <link href="https://www.codingme.net/2019/02/springboot/springboot-06-web-filter-apo-webbase/"/>
    <id>https://www.codingme.net/2019/02/springboot/springboot-06-web-filter-apo-webbase/</id>
    <published>2019-02-21T00:32:01.000Z</published>
    <updated>2019-05-20T16:26:48.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-拦截器"><a href="#1-拦截器" class="headerlink" title="1. 拦截器"></a>1. 拦截器</h2><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/e678416c36eaf0969de279423d0e1d16.png" alt="">Springboot 中的 Interceptor 拦截器也就是 mvc 中的拦截器，只是省去了 xml 配置部分。并没有本质的不同，都是通过实现 HandlerInterceptor 中几个方法实现。几个方法的作用一一如下。</p><ol><li><strong>preHandle</strong><br>进入 Habdler 方法之前执行，一般用于身份认证授权等。</li><li><strong>postHandle</strong><br>进入 Handler 方法之后返回 modelAndView 之前执行，一般用于塞入公共模型数据等。</li><li><strong>afterCompletion</strong><br>最后处理，一般用于日志收集，统一后续处理等。<a id="more"></a></li></ol><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot web 开发整合 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 阿里 fastjson --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Lombok 工具 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 导入配置文件处理器，在配置springboot相关文件时候会有提示 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-编写拦截器"><a href="#1-2-编写拦截器" class="headerlink" title="1.2 编写拦截器"></a>1.2 编写拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/6 16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求方法执行之前</span></span><br><span class="line"><span class="comment">     * 返回true则通过</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        StringBuffer requestURL = request.getRequestURL();</span><br><span class="line">        log.info(<span class="string">"preHandle请求URL："</span> + requestURL.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回modelAndView之前执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"postHandle返回modelAndView之前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行Handler完成执行此方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"afterCompletion执行完请求方法完全返回之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-配置拦截器"><a href="#1-3-配置拦截器" class="headerlink" title="1.3 配置拦截器"></a>1.3 配置拦截器</h3><p>省去了 XML 中的拦截器配置部分后，使用 springboot 推荐的方式配置自定义拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.config.FastJsonConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1.使用FastJSON</span></span><br><span class="line"><span class="comment"> * 2.配置时间格式化</span></span><br><span class="line"><span class="comment"> * 3.解决中文乱码</span></span><br><span class="line"><span class="comment"> * 4.添加自定义拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/13 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义JSON转换器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter converter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">        <span class="comment">//日期格式化</span></span><br><span class="line">        fastJsonConfig.setDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//处理中文乱码问题</span></span><br><span class="line">        List&lt;MediaType&gt; fastMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line"></span><br><span class="line">        converter.setSupportedMediaTypes(fastMediaTypes);</span><br><span class="line">        converter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(converter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加自定义拦截器</span></span><br><span class="line"><span class="comment">     * .addPathPatterns("/**")  拦截的请求路径</span></span><br><span class="line"><span class="comment">     * .excludePathPatterns("/user"); 排除的请求路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LogHandlerInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-切面编程"><a href="#2-切面编程" class="headerlink" title="2 切面编程"></a>2 切面编程</h2><ol><li>AOP：面向切面（方面）编程，扩展功能不修改源代码实现</li><li>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码</li><li>AOP底层使用动态代理实现<ul><li>有接口情况使用动态代理创建接口实现类代理对象</li><li>没有接口情况使用动态代理创建类的子类代理对象</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 使用AOP记录访问日志</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@Before</span>在切入点开始处切入内容</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@After</span>在切入点结尾处切入内容</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@AfterReturning</span>在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@Around</span>在切入点前后切入内容，并自己控制何时执行切入点自身的内容</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@AfterThrowing</span>用来处理当切入内容部分抛出异常之后的处理逻辑</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 注解：</span></span><br><span class="line"><span class="comment"> * Aspect:AOP</span></span><br><span class="line"><span class="comment"> * Component：Bean</span></span><br><span class="line"><span class="comment"> * Slf4j：可以直接使用log输出日志</span></span><br><span class="line"><span class="comment"> * Order：多个AOP切同一个方法时的优先级，越小优先级越高越大。</span></span><br><span class="line"><span class="comment"> * 在切入点前的操作，按order的值由小到大执行</span></span><br><span class="line"><span class="comment"> * 在切入点后的操作，按order的值由大到小执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/4 23:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程存放信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ThreadLocal&lt;Long&gt; startTime = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点</span></span><br><span class="line"><span class="comment">     * 第一个*：标识所有返回类型</span></span><br><span class="line"><span class="comment">     * 字母路径：包路径</span></span><br><span class="line"><span class="comment">     * 两个点..：当前包以及子包</span></span><br><span class="line"><span class="comment">     * 第二个*：所有的类</span></span><br><span class="line"><span class="comment">     * 第三个*：所有的方法</span></span><br><span class="line"><span class="comment">     * 最后的两个点：所有类型的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * net.codingme.boot.controller..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在切入点开始处切入内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"webLog()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录请求时间</span></span><br><span class="line">        startTime.set(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">// 获取请求域</span></span><br><span class="line">        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = requestAttributes.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录请求内容</span></span><br><span class="line">        log.info(<span class="string">"Aspect-URL: "</span> + request.getRequestURI().toLowerCase());</span><br><span class="line">        log.info(<span class="string">"Aspect-HTTP_METHOD: "</span> + request.getMethod());</span><br><span class="line">        log.info(<span class="string">"Aspect-IP: "</span> + request.getRemoteAddr());</span><br><span class="line">        log.info(<span class="string">"Aspect-REQUEST_METHOD: "</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + joinPoint.getSignature().getName());</span><br><span class="line">        log.info(<span class="string">"Aspect-Args: "</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在切入点之后处理内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"webLog()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(returning = <span class="string">"ret"</span>, pointcut = <span class="string">"webLog()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(Object ret)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Aspect-Response: "</span> + ret);</span><br><span class="line">        Long endTime = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"Aspect-SpeedTime: "</span> + (endTime - startTime.get()) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问查看拦截器和 AOP 的日志输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">09:57:15.408  INFO 2836 --- [nio-8080-exec-1] n.c.boot.config.LogHandlerInterceptor    : preHandle请求URL：http://localhost:8080/</span><br><span class="line">09:57:15.413  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-URL: /</span><br><span class="line">09:57:15.413  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-HTTP_METHOD: GET</span><br><span class="line">09:57:15.413  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-IP: 0:0:0:0:0:0:0:1</span><br><span class="line">09:57:15.414  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-REQUEST_METHOD: net.codingme.boot.controller.HelloController.index</span><br><span class="line">09:57:15.415  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-Args: []</span><br><span class="line">09:57:15.424  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-Response: Greetings from Spring Boot!SpringBoot是一个spring应用程序</span><br><span class="line">09:57:15.425  INFO 2836 --- [nio-8080-exec-1] net.codingme.boot.config.LogAspect       : Aspect-SpeedTime: 12ms</span><br><span class="line">09:57:15.436  INFO 2836 --- [nio-8080-exec-1] n.c.boot.config.LogHandlerInterceptor    : postHandle返回modelAndView之前</span><br><span class="line">09:57:15.437  INFO 2836 --- [nio-8080-exec-1] n.c.boot.config.LogHandlerInterceptor    : afterCompletion执行完请求方法完全返回之后</span><br></pre></td></tr></table></figure><h2 id="3-Servlet-Filter-Listener"><a href="#3-Servlet-Filter-Listener" class="headerlink" title="3. Servlet,Filter,Listener"></a>3. Servlet,Filter,Listener</h2><p>Servlet, Filter, Listener 是 Java web 的核心内容，那么在 Springboot 中如何使用呢？</p><h3 id="3-1-编写-Servlet"><a href="#3-1-编写-Servlet" class="headerlink" title="3.1 编写 Servlet"></a>3.1 编写 Servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@WebServlet</span>(urlPatterns = "/myservlet") // 定义访问路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/24 16:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/myservlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Servlet 开始初始化"</span>);</span><br><span class="line">        <span class="keyword">super</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Servlet 开始处理 GET 方法"</span>);</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.println(<span class="string">"Hello Servlet"</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Servlet 开始销毁"</span>);</span><br><span class="line">        <span class="keyword">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-编写-Filter"><a href="#3-2-编写-Filter" class="headerlink" title="3.2 编写 Filter"></a>3.2 编写 Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/24 16:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"拦截器开始拦截"</span>);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-编写-Listener"><a href="#3-3-编写-Listener" class="headerlink" title="3.3 编写 Listener"></a>3.3 编写 Listener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/24 16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"监听器开始初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"监听器开始销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-添加到容器"><a href="#3-4-添加到容器" class="headerlink" title="3.4 添加到容器"></a>3.4 添加到容器</h3><p>添加到容器有两种方式，第一种使用注解扫描。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ServletComponentScan</span> 扫描Servlet,Filter,Listener 添加到容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用配置类想容器中添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 在这里注册Servlet Filter Listener 或者使用 <span class="doctag">@ServletComponentScan</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/24 16:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebCoreConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyServlet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFitler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> MyListener());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动可以在控制台看到监听器启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11:35:03.744  INFO 8616 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1364 ms</span><br><span class="line">11:35:03.798  INFO 8616 --- [           main] net.codingme.boot.listener.MyListener    : 监听器开始初始化</span><br><span class="line">11:35:03.892  INFO 8616 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &apos;applicationTaskExecutor&apos;</span><br><span class="line">11:35:04.055  INFO 8616 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br></pre></td></tr></table></figure><p>访问 Servlet 可以看到拦截器和 Servlet 生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11:36:55.552  INFO 3760 --- [nio-8080-exec-1] net.codingme.boot.servlet.MyServlet      : Servlet 开始初始化</span><br><span class="line">11:36:55.556  INFO 3760 --- [nio-8080-exec-1] net.codingme.boot.filter.MyFilter        : 拦截器开始拦截</span><br><span class="line">11:36:55.556  INFO 3760 --- [nio-8080-exec-1] net.codingme.boot.servlet.MyServlet      : Servlet 开始处理 GET 方法</span><br></pre></td></tr></table></figure><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-web-interceptor" target="_blank" rel="noopener">Spring Boot Web开发 - 拦截处理</a>。<br>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-web-servlet-filter-listener" target="_blank" rel="noopener">Spring Boot Web开发 - Servlet,Filter,Listener</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-拦截器&quot;&gt;&lt;a href=&quot;#1-拦截器&quot; class=&quot;headerlink&quot; title=&quot;1. 拦截器&quot;&gt;&lt;/a&gt;1. 拦截器&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/e678416c36eaf0969de279423d0e1d16.png&quot; alt=&quot;&quot;&gt;Springboot 中的 Interceptor 拦截器也就是 mvc 中的拦截器，只是省去了 xml 配置部分。并没有本质的不同，都是通过实现 HandlerInterceptor 中几个方法实现。几个方法的作用一一如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;preHandle&lt;/strong&gt;&lt;br&gt;进入 Habdler 方法之前执行，一般用于身份认证授权等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;postHandle&lt;/strong&gt;&lt;br&gt;进入 Handler 方法之后返回 modelAndView 之前执行，一般用于塞入公共模型数据等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;afterCompletion&lt;/strong&gt;&lt;br&gt;最后处理，一般用于日志收集，统一后续处理等。
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（五）web 开发之静态资源和模版引擎</title>
    <link href="https://www.codingme.net/2019/02/springboot/springboot-05-web-static-template/"/>
    <id>https://www.codingme.net/2019/02/springboot/springboot-05-web-static-template/</id>
    <published>2019-02-15T14:32:01.000Z</published>
    <updated>2019-05-20T16:26:48.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Boot 天生的适合 web 应用开发，它可以快速的嵌入 Tomcat, Jetty  或 Netty 用于包含一个 HTTP 服务器。且开发十分简单，只需要引入 web 开发所需的包，然后编写业务代码即可。</p><h2 id="自动配置原理？"><a href="#自动配置原理？" class="headerlink" title="自动配置原理？"></a><strong>自动配置原理？</strong></h2><p>在进行 web 开发之前让我再来回顾一下自动配置，可以参考系列文章第三篇。Spring Boot 为 Spring MVC 提供了自动配置，添加了如下的功能：</p><ul><li>视图解析的支持。</li><li>静态资源映射，WebJars 的支持。</li><li>转换器 Converter 的支持。</li><li>自定义 Favicon 的支持。</li><li>等等<a id="more"></a>在引入每个包时候我们需要思考是如何实现自动配置的，以及我们能自己来配置哪些东西，这样开发起来才会得心应手。</li></ul><p><a href="https://docs.spring.io/spring-boot/docs/2.1.x/reference/html/boot-features-developing-web-applications.html" target="_blank" rel="noopener">关于 Spring Boot Web 开发的更详细介绍可以参考官方文档。</a></p><h2 id="1-JSON-格式转换"><a href="#1-JSON-格式转换" class="headerlink" title="1. JSON 格式转换"></a>1. JSON 格式转换</h2><p>Spring Boot 默认使用 Jackson 进行 JSON 化处理，如果想要切换成 FastJson 可以首先从<a href="https://docs.spring.io/spring-boot/docs/2.1.x/reference/html/howto-spring-mvc.html#howto-customize-the-responsebody-rendering" target="_blank" rel="noopener">官方文档</a>里查询信息。从这里知道对于 ResponseBody 的渲染主要是通过 HttpMessageConverters， 而首先引入FastJson Pom依赖并排除 Spring Boot 自带的 Jackson。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写转换器处理 json 的日期格式同时处理中文乱码问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义JSON转换器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter converter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">        <span class="comment">//日期格式化</span></span><br><span class="line">        fastJsonConfig.setDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//处理中文乱码问题</span></span><br><span class="line">        List&lt;MediaType&gt; fastMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line"></span><br><span class="line">        converter.setSupportedMediaTypes(fastMediaTypes);</span><br><span class="line">        converter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line"></span><br><span class="line">        converters.add(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-静态资源映射"><a href="#2-静态资源映射" class="headerlink" title="2. 静态资源映射"></a>2. 静态资源映射</h2><blockquote><p>By default, Spring Boot serves static content from a directory called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code>) in the classpath or from the root of the <code>ServletContext</code>.</p></blockquote><h3 id="2-1-默认映射"><a href="#2-1-默认映射" class="headerlink" title="2.1 默认映射"></a>2.1 默认映射</h3><p>官方文档告诉我们 Spring Boot 对于静态资源的映射目录是 /static , /public , /resources 以及 /META-INF/resource。除此之外其实还映射了 <code>/webjars/**</code> 到 <code>classpath:/META-INF/resources/webjars</code>。</p><p>很明显此处是自动配置实现的，通过查看源码分析这段配置。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/746f53d54281496bb8aafcc2e7f1ada6.png" alt="Mvc静态资源映射"></p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/03afb17acb7e7a3ccd45a5b434f111d1.png" alt="Mvc静态资源映射"></p><p>而对于网站图标，Spring Boot 也已经配置了默认位置，可以在看到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>, <span class="comment">// 图表</span></span><br><span class="line">faviconRequestHandler()));</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">requestHandler.setLocations(resolveFaviconLocations());</span><br><span class="line"><span class="keyword">return</span> requestHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Resource&gt; <span class="title">resolveFaviconLocations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String[] staticLocations = getResourceLocations(</span><br><span class="line"><span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">List&lt;Resource&gt; locations = <span class="keyword">new</span> ArrayList&lt;&gt;(staticLocations.length + <span class="number">1</span>);</span><br><span class="line">Arrays.stream(staticLocations).map(<span class="keyword">this</span>.resourceLoader::getResource)</span><br><span class="line">.forEach(locations::add);</span><br><span class="line">locations.add(<span class="keyword">new</span> ClassPathResource(<span class="string">"/"</span>));</span><br><span class="line"><span class="keyword">return</span> Collections.unmodifiableList(locations);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 Spring Boot 默认的静态资源映射规则，可以直接把需要的静态资源放在响应的文件夹下然后直接引用即可。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/4d1f6c2368dce288a2187741fc4dc0c7.png" alt="静态资源映射"></p><p>而放在 Public 文件夹下的 HTML 页面也可以直接访问。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/79377b2dadbeee45f00da8921190938b.png" alt="静态资源映射"></p><h3 id="2-2-webjars"><a href="#2-2-webjars" class="headerlink" title="2.2 webjars"></a>2.2 webjars</h3><p><a href="https://www.webjars.org/" target="_blank" rel="noopener">webjars</a> 的思想是把静态资源打包到 Jar 包中，然后使用 JVM 构建工具进行管理，如 maven , Gradle 等。</p><p>使用 webjars 第一步需要进入依赖，如要使用 bootstrap。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- Web Jars 静态资源文件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入之后查看 bootstrap 资源。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/3626437cd5104cea9ed5a82ea25aac0c.png" alt="WebJars 引入 bootstrap"></p><p>由于 Springboot 映射了 <code>/webjars/**</code> 到 <code>classpath:/META-INF/resources/webjars</code>. 因此可以直接在文件中引用 webjars 的静态资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/webjars/bootstrap/4.1.3/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/bootstrap/4.1.3/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-模版引擎"><a href="#3-模版引擎" class="headerlink" title="3. 模版引擎"></a>3. 模版引擎</h2><p>Spring MVC 支持各种模版技术，如 Thymeleaf , FreeMarker , JSP 等。而Thyemeleaf 原型即页面的特性或许更符合 Spring Boot 快速开发的思想而被官方推荐。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/02c76ef91580600fb7265155822d5619.png" alt="模版引擎原理"></p><p><a href="https://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf</a> 是适用于 Web 开发的服务端 Java 模版引擎，Thymeleaf 为开发工作流程带来优雅自然的模版，由于其非侵入的特性，可以让页面不管是在静态原型下还是用作模版引擎时都有良好的页面展现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:text</span>=<span class="string">"#&#123;msgs.headers.name&#125;"</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:text</span>=<span class="string">"#&#123;msgs.headers.price&#125;"</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod: $&#123;allProducts&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#numbers.formatDecimal(prod.price, 1, 2)&#125;"</span>&gt;</span>0.99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-引入-Thymeleaf"><a href="#3-1-引入-Thymeleaf" class="headerlink" title="3.1 引入 Thymeleaf"></a>3.1 引入 Thymeleaf</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf 模版--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-使用-Thymeleaf"><a href="#3-2-使用-Thymeleaf" class="headerlink" title="3.2 使用 Thymeleaf"></a>3.2 使用 Thymeleaf</h3><p>根据 Spring Boot 自动配置原理，先看一下 Thymeleaf 的配置类，从中可以看出 Thymeleaf 的相关配置。我们可以知道 默认存放目录是 templates 文件夹，文件后缀为 <code>.html</code> 且开启了缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Whether to enable template caching.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> cache = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>为了在开发中编写模版文件时不用重启，可以在配置中关闭缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 关闭模版缓存</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line"># 如果需要进行其他的配置，可以参考配置类：ThymeleafProperties</span><br><span class="line"># org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties</span><br></pre></td></tr></table></figure><p>编写 Controller 响应信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取ID为1的用户信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(value = <span class="string">"/user/1"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">      User user1 = <span class="keyword">new</span> User(<span class="string">"Darcy"</span>, <span class="string">"password"</span>, <span class="number">24</span>, <span class="keyword">new</span> Date(), Arrays.asList(<span class="string">"Java"</span>, <span class="string">"GoLang"</span>));</span><br><span class="line">      User user2 = <span class="keyword">new</span> User(<span class="string">"Chris"</span>, <span class="string">"password"</span>, <span class="number">22</span>, <span class="keyword">new</span> Date(), Arrays.asList(<span class="string">"Java"</span>, <span class="string">"Web"</span>));</span><br><span class="line">      ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      userList.add(user1);</span><br><span class="line">      userList.add(user2);</span><br><span class="line">      model.addAttribute(<span class="string">"userList"</span>, userList);</span><br><span class="line">      model.addAttribute(<span class="string">"user"</span>, user1);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"user"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>因为 Thymelaf 默认模版位置在 templates 文件夹下，因此在这个文件夹下编写页面信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf 的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入JS文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script th:src="@&#123;/static/js/alert.js&#125;"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello Thymeleaf Index<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">th:id</span>=<span class="string">"$&#123;user.username&#125;"</span> <span class="attr">th:name</span>=<span class="string">"$&#123;user.username&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户技能：<span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.skills&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;#dates.format(user.birthday,'yyyy-MM-dd hh:mm:ss ')&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello Thymeleaf Index<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">th:id</span>=<span class="string">"*&#123;username&#125;"</span> <span class="attr">th:name</span>=<span class="string">"*&#123;username&#125;"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;username&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户技能：<span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"*&#123;skills&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"*&#123;age&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"*&#123;#dates.format(birthday,'yyyy-MM-dd hh:mm:ss')&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Text 与 utext<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- th:text 显示HTML源码，作为字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>URL 的引用<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;https://www.baidu.com&#125;"</span>&gt;</span>网站网址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>表单的使用<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/th/postform&#125;"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;username&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        用户技能：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;skills&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;age&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>判断的使用<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.age&#125; == 18"</span>&gt;</span>18岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.age&#125; gt 18"</span>&gt;</span>大于18岁<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.age&#125; lt 18"</span>&gt;</span>小于18岁<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.age&#125; ge 18"</span>&gt;</span>大于等于<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.age&#125; le 18"</span>&gt;</span>小于等于<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>选择框<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择一本书<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;user.username eq 'admin'&#125;"</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;user.username eq 'Darcy'&#125;"</span>&gt;</span>Darcy<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;user.username eq 'Chris'&#125;"</span>&gt;</span>Chris<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>遍历功能<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>技能<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"u:$&#123;userList&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.skills&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Switch功能<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>欢迎管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问页面可以看到数据正常显示。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/5e7b0da4afded072ed59c42a34b3f7fc.png" alt="访问页面"></p><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-web-staticfile" target="_blank" rel="noopener">Spring Boot Web开发 - 静态资源</a>。<br>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-web-template" target="_blank" rel="noopener">Spring Boot Web开发 - 模版引擎</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Spring Boot 天生的适合 web 应用开发，它可以快速的嵌入 Tomcat, Jetty  或 Netty 用于包含一个 HTTP 服务器。且开发十分简单，只需要引入 web 开发所需的包，然后编写业务代码即可。&lt;/p&gt;
&lt;h2 id=&quot;自动配置原理？&quot;&gt;&lt;a href=&quot;#自动配置原理？&quot; class=&quot;headerlink&quot; title=&quot;自动配置原理？&quot;&gt;&lt;/a&gt;&lt;strong&gt;自动配置原理？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在进行 web 开发之前让我再来回顾一下自动配置，可以参考系列文章第三篇。Spring Boot 为 Spring MVC 提供了自动配置，添加了如下的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视图解析的支持。&lt;/li&gt;
&lt;li&gt;静态资源映射，WebJars 的支持。&lt;/li&gt;
&lt;li&gt;转换器 Converter 的支持。&lt;/li&gt;
&lt;li&gt;自定义 Favicon 的支持。&lt;/li&gt;
&lt;li&gt;等等
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（四）Spring Boot 日志框架</title>
    <link href="https://www.codingme.net/2019/01/springboot/springboot04-log/"/>
    <id>https://www.codingme.net/2019/01/springboot/springboot04-log/</id>
    <published>2019-01-15T14:02:02.000Z</published>
    <updated>2019-05-20T16:26:48.668Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本 Spring Boot 系列文章基于 Spring Boot 版本 <strong>v2.1.1.RELEASE</strong> 进行学习分析，版本不同可能会有细微差别。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/6ceaab90e32e1c0de8dd4ed097900509.png" alt="">Spring 框架选择使用了 JCL 作为默认日志输出。而 Spring Boot 默认选择了 SLF4J 结合 LogBack。那我们在项目中该使用哪种日志框架呢？在对于不同的第三方 jar 使用了不同的日志框架的时候，我们该怎么处理呢？<br><a id="more"></a></p><h2 id="1-日志框架介绍"><a href="#1-日志框架介绍" class="headerlink" title="1. 日志框架介绍"></a>1. 日志框架介绍</h2><p>日志对于应用程序的重要性不言而喻，不管是记录运行情况还是追踪线上问题，都离不开对日志的分析，在 Java 领域里存在着多种日志框架，如 JUL, Log4j, Log4j2, Commons Loggin, Slf4j, Logback 等。关于 Log4j, Log4j2 和 Slf4j 直接的故事这里不做介绍，有兴趣可以自行百度。</p><h2 id="2-SLF4-的使用"><a href="#2-SLF4-的使用" class="headerlink" title="2. SLF4 的使用"></a>2. SLF4 的使用</h2><p>在开发的时候不应该直接使用日志实现类，应该使用日志的抽象层。具体参考 <a href="https://www.slf4j.org/manual.html" target="_blank" rel="noopener">SLF4J  官方</a>。<br>下图是 SLF4J 结合各种日志框架的官方示例，从图中可以清晰的看出 SLF4J API 永远作为日志的门面，直接应用与应用程序中。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/180c77a1bfd179623888aa83faf4519d.png" alt="SLF4"></p><p>同时 SLF4 官方给出了简单示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，要为系统导入 SLF4J 的 jar 和 日志框架的实现 jar. 由于每一个日志的实现框架都有自己的配置文件，所以在使用 SLF4 之后，配置文件还是要使用实现日志框架的配置文件。</p><h2 id="3-统一日志框架的使用"><a href="#3-统一日志框架的使用" class="headerlink" title="3. 统一日志框架的使用"></a>3. 统一日志框架的使用</h2><p>一般情况下，在项目中存在着各种不同的第三方 jar ，且它们的日志选择也可能不尽相同，显然这样是不利于我们使用的，那么如果我们想为项目设置统一的日志框架该怎么办呢？</p><p>在 <a href="https://www.slf4j.org/legacy.html" target="_blank" rel="noopener">SLF4J 官方</a>，也给了我们参考的例子。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/4d3f93aedfdfff372bf2908f5ef876bd.png" alt="Bridging legacy APIs">从图中我们得到一种统一日志框架使用的方式，可以使用一种和要替换的日志框架类完全一样的 jar 进行替换，这样不至于原来的第三方 jar 报错，而这个替换的 jar 其实使用了 SLF4J API. 这样项目中的日志就都可以通过 SLF4J API 结合自己选择的框架进行日志输出。<br><strong>统一日志框架使用步骤归纳如下</strong>：</p><ol><li>排除系统中的其他日志框架。</li><li>使用中间包替换要替换的日志框架。</li><li>导入我们选择的 SLF4J 实现。</li></ol><h2 id="4-Spring-Boot-的日志关系"><a href="#4-Spring-Boot-的日志关系" class="headerlink" title="4. Spring Boot 的日志关系"></a>4. Spring Boot 的日志关系</h2><h3 id="4-1-排除其他日志框架"><a href="#4-1-排除其他日志框架" class="headerlink" title="4.1. 排除其他日志框架"></a>4.1. 排除其他日志框架</h3><p>根据上面总结的要统一日志框架的使用，第一步要排除其他的日志框架，在 Spring Boot 的 Maven 依赖里可以清楚的看到 Spring Boot 排除了其他日志框架。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/f24ff63ebb75a90c0d85b3dd74840cb5.png" alt="Spring Boot 排除其他日志框架">我们自行排除依赖时也只需要按照图中的方式就好了。</p><h3 id="4-2-统一框架引入替换包"><a href="#4-2-统一框架引入替换包" class="headerlink" title="4.2. 统一框架引入替换包"></a>4.2. 统一框架引入替换包</h3><p>其实 Spring Boot 也是使用了 SLF4J+logback 的日志框架组合，查看 Spring Boot 项目的 Maven 依赖关系可以看到 Spring Boot 的核心启动器 spring-boot-starter 引入了 spring-boot-starter-logging.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>而 spring-boot-starter-logging 的 Maven 依赖主要引入了 logback-classic (包含了日志框架 Logback 的实现)，log4j-to-slf4j (在 log4j 日志框架作者开发此框架的时候还没有想到使用日志抽象层进行开发，因此出现了 log4j 向 slf4j 转换的工具)，jul-to-slf4j ( Java 自带的日志框架转换为 slf4j).<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>从上面的分析，Spring Boot 对日志框架的使用已经是清晰明了了，我们使用 IDEA 工具查看 Maven 依赖关系，可以清晰的看到日志框架的引用。如果没有 IDEA 工具，也可以使用 Maven 命令查看依赖关系。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree</span><br></pre></td></tr></table></figure></p><p><img src="https://user-images.githubusercontent.com/26371673/50733360-33660980-11c7-11e9-8742-1f24e7449db2.png" alt="Spring Boot Maven 依赖">由此可见，Spring Boot 可以自动的适配日志框架，而且底层使用 <strong>SLF4 + LogBack</strong> 记录日志，如果我们自行引入其他框架，需要排除其日志框架。</p><h2 id="5-Spring-Boot-的日志使用"><a href="#5-Spring-Boot-的日志使用" class="headerlink" title="5. Spring Boot 的日志使用"></a>5. Spring Boot 的日志使用</h2><h3 id="5-1-日志级别和格式"><a href="#5-1-日志级别和格式" class="headerlink" title="5.1. 日志级别和格式"></a>5.1. 日志级别和格式</h3><p>从上面的分析，发现 Spring Boot 默认已经使用了 <strong>SLF4J + LogBack</strong> . 所以我们在不进行任何额外操作的情况下就可以使用 <strong>SLF4J + Logback</strong> 进行日志输出。<br>编写 Java 测试类进行测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 测试日志输出，</span></span><br><span class="line"><span class="comment"> * SLF4J 日志级别从小到大trace,debug,info,warn,error</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/11 21:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.trace(<span class="string">"Trace 日志..."</span>);</span><br><span class="line">        logger.debug(<span class="string">"Debug 日志..."</span>);</span><br><span class="line">        logger.info(<span class="string">"Info 日志..."</span>);</span><br><span class="line">        logger.warn(<span class="string">"Warn 日志..."</span>);</span><br><span class="line">        logger.error(<span class="string">"Error 日志..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>已知日志级别从小到大为 trace &lt; debug &lt; info &lt; warn &lt; error . 运行得到输出如下。由此可见  <strong><em>Spring Boot 默认日志级别为 INFO</em></strong>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-12-11 23:02:58.028 [main] INFO  n.c.boot.LogbackTest - Info 日志...</span><br><span class="line">2018-12-11 23:02:58.029 [main] WARN  n.c.boot.LogbackTest - Warn 日志...</span><br><span class="line">2018-12-11 23:02:58.029 [main] ERROR n.c.boot.LogbackTest - Error 日志...</span><br></pre></td></tr></table></figure></p><p>从上面的日志结合 Logback 日志格式可以知道 Spring Boot 默认日志格式是。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span>d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line"><span class="meta">#</span> %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; 时间</span><br><span class="line"><span class="meta">#</span> %thread 线程名称</span><br><span class="line"><span class="meta">#</span> %-5level 日志级别从左显示5个字符宽度</span><br><span class="line"><span class="meta">#</span> %logger&#123;50&#125; 类名</span><br><span class="line"><span class="meta">#</span> %msg%n 日志信息加换行</span><br></pre></td></tr></table></figure></p><p>至于为什么 Spring Boot 的默认日志输出格式是这样？<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/09754e106f158d8e2dfcf540ca00cb2c.png" alt="Spring Boot 默认日志输出">我们可以在 Spring Boot 的源码里找到答案。</p><h3 id="5-2-自定义日志输出"><a href="#5-2-自定义日志输出" class="headerlink" title="5.2 自定义日志输出"></a>5.2 自定义日志输出</h3><p>可以直接在配置文件编写日志相关配置。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="comment"># 指定具体包的日志级别</span></span><br><span class="line"><span class="string">logging.level.net.codingme=debug</span></span><br><span class="line"><span class="comment"># 控制台和日志文件输出格式</span></span><br><span class="line"><span class="string">logging.pattern.console=%d&#123;yyyy-MM-dd</span> <span class="attr">HH:mm:ss.SSS&#125;</span> <span class="string">[%thread]</span> <span class="string">%-5level</span> <span class="string">%logger&#123;50&#125;</span> <span class="bullet">-</span> <span class="string">%msg%n</span></span><br><span class="line"><span class="string">logging.pattern.file=%d&#123;yyyy-MM-dd</span> <span class="attr">HH:mm:ss.SSS&#125;</span> <span class="string">[%thread]</span> <span class="string">%-5level</span> <span class="string">%logger&#123;50&#125;</span> <span class="bullet">-</span> <span class="string">%msg%n</span></span><br><span class="line"><span class="comment"># 日志文件大小</span></span><br><span class="line"><span class="string">logging.file.max-size=10MB</span></span><br><span class="line"><span class="comment"># 保留的日志时间</span></span><br><span class="line"><span class="string">logging.file.max-history=10</span></span><br><span class="line"><span class="comment"># 日志输出路径，默认文件spring.log</span></span><br><span class="line"><span class="string">logging.path=systemlog</span></span><br><span class="line"><span class="comment">#logging.file=log.log</span></span><br></pre></td></tr></table></figure></p><p>关于日志的输出路径，可以使用 logging.file 或者 logging.path 进行定义，两者存在关系如下表。</p><table><thead><tr><th><code>logging.file</code></th><th><code>logging.path</code></th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td><em>（没有）</em></td><td><em>（没有）</em></td><td></td><td>仅控制台记录。</td></tr><tr><td>具体文件</td><td><em>（没有）</em></td><td><code>my.log</code></td><td>写入指定的日志文件，名称可以是精确位置或相对于当前目录。</td></tr><tr><td><em>（没有）</em></td><td>具体目录</td><td><code>/var/log</code></td><td>写入<code>spring.log</code>指定的目录，名称可以是精确位置或相对于当前目录。</td></tr></tbody></table><h2 id="6-替换日志框架"><a href="#6-替换日志框架" class="headerlink" title="6. 替换日志框架"></a>6. 替换日志框架</h2><p>因为 Log4j 日志框架已经年久失修，原作者都觉得写的不好，所以下面演示替换日志框架为 Log4j2 的方式。根据<a href="https://docs.spring.io/spring-boot/docs/2.1.x/reference/html/using-boot-build-systems.html#using-boot-starter" target="_blank" rel="noopener">官网</a>我们 Log4j2 与 logging 需要二选一，因此修改 pom如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-logback" target="_blank" rel="noopener">Spring Boot 日志系统</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：本 Spring Boot 系列文章基于 Spring Boot 版本 &lt;strong&gt;v2.1.1.RELEASE&lt;/strong&gt; 进行学习分析，版本不同可能会有细微差别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/6ceaab90e32e1c0de8dd4ed097900509.png&quot; alt=&quot;&quot;&gt;Spring 框架选择使用了 JCL 作为默认日志输出。而 Spring Boot 默认选择了 SLF4J 结合 LogBack。那我们在项目中该使用哪种日志框架呢？在对于不同的第三方 jar 使用了不同的日志框架的时候，我们该怎么处理呢？&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（三）Spring Boot 自动配置</title>
    <link href="https://www.codingme.net/2019/01/springboot/springboot03-auto-config/"/>
    <id>https://www.codingme.net/2019/01/springboot/springboot03-auto-config/</id>
    <published>2019-01-10T15:01:01.000Z</published>
    <updated>2019-05-20T16:26:48.664Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本 Spring Boot 系列文章基于 Spring Boot 版本 <strong>v2.1.1.RELEASE</strong> 进行学习分析，版本不同可能会有细微差别。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/90be321394ddff7aa6dfdc9910888fda.png" alt=""></p><p>关于配置文件可以配置的内容，在 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">Spring Boot 官方网站</a>已经提供了完整了配置示例和解释。</p><p>可以这么说，Spring Boot 的一大精髓就是自动配置，为开发省去了大量的配置时间，可以更快的融入业务逻辑的开发，那么自动配置是怎么实现的呢？<br><a id="more"></a></p><h2 id="1-SpringBootApplication"><a href="#1-SpringBootApplication" class="headerlink" title="1.  @SpringBootApplication"></a>1.  <code>@SpringBootApplication</code></h2><p>跟着 Spring Boot 的启动类的注解 <code>@SpringBootApplication</code> 进行源码跟踪，寻找自动配置的原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p><code>@EnableAutoConfiguration</code> 开启自动配置。</p><p><code>@ComponentScan</code> 开启注解扫描</p><p>从 <code>SpringBootApplication</code> 我们可以发现，这是一个简便的注解配置，它包含了自动配置，配置类，包扫描等一系列功能。</p><h2 id="2-EnableAutoConfiguration"><a href="#2-EnableAutoConfiguration" class="headerlink" title="2. @EnableAutoConfiguration"></a>2. <code>@EnableAutoConfiguration</code></h2><p>继续跟踪，查看<code>@EnableAutoConfiguration</code> 源码，里面比较重要的是 <code>@Import</code> ，导入了一个翻译名为自动配置的选择器的类。这个类其实就是自动配置的加载选择器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟踪 <code>AutoConfigurationImportSelector.class</code> .在这个类有一个重要的方法 <code>getCandidateConfigurations</code>.用于加载 Spring Boot 配置的自动配置类。</p><p><code>getAutoConfigurationEntry</code> 会筛选出有效的自动配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">AutoConfigurationMetadata autoConfigurationMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125;</span><br><span class="line">AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">attributes);</span><br><span class="line">configurations = removeDuplicates(configurations);</span><br><span class="line">Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">checkExcludedClasses(configurations, exclusions);</span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line"><span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图是 DEBUG 模式下筛选之后的结果，因为我只添加了 web 模块，所以只有 web 相关的自动配置。</p><p><img src="https://user-images.githubusercontent.com/26371673/50733348-ec781400-11c6-11e9-8f0d-01797d797d69.png" alt="筛选过后的自动配置"></p><h2 id="3-xxxAutoConfiguration-与-xxxProperties"><a href="#3-xxxAutoConfiguration-与-xxxProperties" class="headerlink" title="3. xxxAutoConfiguration 与 xxxProperties"></a>3. xxxAutoConfiguration 与 xxxProperties</h2><p>在上面的 debug 里，我们看到了成功加载的自动配置，目前只看到了配置类，却还没有发现自动配置值，随便选择一个 <code>AutoConfiguration</code> 查看源码。</p><p>这里选择了 <code>ServletWebServerFactoryAutoConfiguration</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="comment">//判断当前项目有没有这个类</span></span><br><span class="line"><span class="comment">//CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest.class)</span><br><span class="line"><span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果</span></span><br><span class="line"><span class="comment">//满足指定的条件，整个配置类里面的配置就会生效； 判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties.class)</span><br><span class="line"><span class="meta">@Import</span>(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>需要注意的是 <code>@EnableConfigurationProperties(ServerProperties.class)</code>.他的意思是启动指定类的<br><code>ConfigurationProperties</code>功能；将配置文件中对应的值和 <code>ServerProperties</code> 绑定起来；并把<br><code>ServerProperties</code> 加入到 IOC 容器中。</p><p>再来看一下 <code>ServerProperties</code> .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"server"</span>, ignoreUnknownFields = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Server HTTP port.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Integer port;</span><br></pre></td></tr></table></figure><p>显而易见了，这里使用 ConfigurationProperties 绑定属性映射文件中的 server 开头的属性。结合默认配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 路径spring-boot-autoconfigure-2.1.1.RELEASE.jar</span><br><span class="line"># /META-INF/spring-configuration-metadata.json</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;server.port&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;java.lang.Integer&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;Server HTTP port.&quot;,</span><br><span class="line">      &quot;sourceType&quot;: &quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;,</span><br><span class="line">      &quot;defaultValue&quot;: 8080</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>达到了自动配置的目的。</p><h2 id="4-自动配置总结"><a href="#4-自动配置总结" class="headerlink" title="4. 自动配置总结"></a>4. 自动配置总结</h2><ol><li>SpringBoot 启动的时候加载主配置类，开启了自动配置功能 @EnableAutoConfiguration 。</li><li>@EnableAutoConfiguration  给容器导入META-INF/spring.factories  里定义的自动配置类。</li><li>筛选有效的自动配置类。</li><li>每一个自动配置类结合对应的 xxxProperties.java 读取配置文件进行自动配置功能 。</li></ol><h2 id="5-配置类"><a href="#5-配置类" class="headerlink" title="5. 配置类"></a>5. 配置类</h2><p>通过自动配置，我们发现已经帮我们省去了大量的配置文件的编写，那么在自定义配置的时候，我们是不是需要编写XML呢？Spring boot 尽管可以使用 <code>SpringApplication</code>XML 文件进行配置，但是我们通常会使用 <code>@Configuration</code> 类进行代替，这也是官方推荐的方式。</p><h3 id="5-1-XML配置"><a href="#5-1-XML配置" class="headerlink" title="5.1 XML配置"></a>5.1 XML配置</h3><p>定义 helloService Bean.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"net.codingme.boot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(value = <span class="string">"classpath:spring-service.xml"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-注解配置"><a href="#5-2-注解配置" class="headerlink" title="5.2 注解配置"></a>5.2 注解配置</h3><p>此种方式和上面的XML配置是等效的，也是官方推荐的方式。<code>@Configuration</code> 注解的类（要在扫描的包路径中）会被扫描到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 配置类，相当于传统Spring 开发中的 xml-&gt; bean的配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/7 0:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认添加到容器中的 ID 为方法名（helloService）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-附录"><a href="#6-附录" class="headerlink" title="6. 附录"></a>6. 附录</h2><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-config" target="_blank" rel="noopener">Spring Boot 自动配置</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：本 Spring Boot 系列文章基于 Spring Boot 版本 &lt;strong&gt;v2.1.1.RELEASE&lt;/strong&gt; 进行学习分析，版本不同可能会有细微差别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/90be321394ddff7aa6dfdc9910888fda.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于配置文件可以配置的内容，在 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#common-application-properties&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot 官方网站&lt;/a&gt;已经提供了完整了配置示例和解释。&lt;/p&gt;
&lt;p&gt;可以这么说，Spring Boot 的一大精髓就是自动配置，为开发省去了大量的配置时间，可以更快的融入业务逻辑的开发，那么自动配置是怎么实现的呢？&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（二）Spring Boot 配置文件</title>
    <link href="https://www.codingme.net/2019/01/springboot/springboot02-config/"/>
    <id>https://www.codingme.net/2019/01/springboot/springboot02-config/</id>
    <published>2019-01-05T14:14:17.000Z</published>
    <updated>2019-05-20T16:26:48.661Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本 Spring Boot 系列文章基于 Spring Boot 版本 <strong>v2.1.1.RELEASE</strong> 进行学习分析，版本不同可能会有细微差别。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/dc649482e7380cbe546f92550cef3c51.png" alt=""></p><p>不管是通过官方提供的方式获取 Spring Boot 项目，还是通过 IDEA 快速的创建 Spring Boot 项目，我们都会发现在 resource 有一个配置文件 <code>application.properties</code>,也有可能是<code>application.yml</code>.这个文件也就是 Spring Boot 的配置文件。</p><a id="more"></a><h2 id="1-YAML-文件"><a href="#1-YAML-文件" class="headerlink" title="1. YAML 文件"></a>1. YAML 文件</h2><p>在 <code>Spring Boot</code> 中，官方推荐使用 <code>properties</code> 或者 <code>YAML</code> 文件来完成配置，对于 <code>YAML</code> 文件格式还不了解的可以查看官方的具体格式，这里只做简单介绍。  </p><p><strong>YAML 语法规则：</strong></p><ul><li>大小写敏感</li><li>缩进表示层级</li><li>缩进只能使用空格</li><li>空格的数量不重要，但是相同层级的元素要左侧对齐</li><li><code>#</code> 开头的行表示注释</li></ul><p><strong>YAML 支持的数据结构：</strong></p><ol><li><p>单纯的变量，不可再分的单个的值，如数字，字符串等。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Darcy</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">12</span></span><br><span class="line"><span class="comment"># ~表示NULL值</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">~</span> </span><br><span class="line"><span class="comment"># 多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行。</span></span><br><span class="line"><span class="comment"># +表示保留文字块末尾的换行，-表示删除字符串末尾的换行。</span></span><br><span class="line"><span class="attr">message:</span><span class="string">|-</span></span><br><span class="line">  <span class="string">Hello</span> <span class="string">world</span></span><br></pre></td></tr></table></figure></li><li><p>数组，一组按次序排列的值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lang:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">java</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">golang</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">c</span></span><br><span class="line"><span class="comment"># 或者行内写法</span></span><br><span class="line"><span class="attr">lang:</span><span class="string">[java,golang,c]</span></span><br></pre></td></tr></table></figure></li><li><p>对象，键值对的集合。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span><span class="string">Darcy</span></span><br><span class="line"><span class="attr">  age:</span><span class="number">20</span></span><br><span class="line"><span class="comment"># 或者行内写法</span></span><br><span class="line"><span class="attr">person:</span><span class="string">&#123;name:Darcy,age:20&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>使用 <code>YAML</code> 支持的三种数据结构通过组合可以形成复杂的复合结构。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务启动端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 配置person属性值</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  last-name:</span> <span class="string">Darcy</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  birth:</span> <span class="number">2018</span><span class="string">/01/01</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">gmail@gmail.com</span></span><br><span class="line"><span class="attr">  maps:</span></span><br><span class="line"><span class="attr">    key1:</span><span class="string">java</span></span><br><span class="line"><span class="attr">    key2:</span><span class="string">golang</span></span><br><span class="line"><span class="attr">  lists:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">b</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">c</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">旺财</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>需要注意的是 <code>YAML</code> 文件不能使用<code>@PropertySource</code> 加载</p><h2 id="2-Properties-文件"><a href="#2-Properties-文件" class="headerlink" title="2. Properties 文件"></a>2. Properties 文件</h2><p><code>properties</code> 配置文件简单好用，在各种配置环境里都可以看到它的身影，它简单易用，但是在配置复杂结构时不如<code>YAML</code> 优雅美观。同样拿上面的 <code>YAML</code> 的复合结构举例，演示同样的配置在 <code>properties</code>文件中的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 服务启动端口号</span><br><span class="line">server.port=8080</span><br><span class="line"># 配置属性值（使用IDE进行配置需要处理编码问题，不然中文会发送乱码现象）</span><br><span class="line">person.last-name=张三</span><br><span class="line">person.age=18</span><br><span class="line">person.birth=2018/12/06</span><br><span class="line">person.email=niu@gmail.com</span><br><span class="line">person.maps.key1=c</span><br><span class="line">person.maps.key2=java</span><br><span class="line">person.maps.key3=golang</span><br><span class="line">person.lists=a,b,c,d</span><br><span class="line">person.dog.name=旺财</span><br><span class="line">person.dog.age=1</span><br></pre></td></tr></table></figure><h2 id="3-随机数与占位符"><a href="#3-随机数与占位符" class="headerlink" title="3. 随机数与占位符"></a>3. 随机数与占位符</h2><p><code>RandomValuePropertySource</code> 类对于注入随机值很有用（例如，注入秘密或测试用例）。它可以生成整数，长整数，uuid 或字符串等，通过 Spring Boot 对我们的封装，我们可以轻松的使用。</p><p>占位符允许在配置的值中引用之前定义过的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 生成随机值</span><br><span class="line">bootapp.secret=$ &#123;random.value&#125;</span><br><span class="line">bootapp.number=$ &#123;random.int&#125;</span><br><span class="line">bootapp.bignumber=$ &#123;random.long&#125;</span><br><span class="line">bootapp.uuid=$ &#123;random.uuid&#125;</span><br><span class="line">bootapp.number.less.than.ten=$ &#123;random.int（10）&#125;</span><br><span class="line">bootapp.number.in.range=$ &#123;random.int [1024,65536]&#125;</span><br><span class="line"># 属性的占位符</span><br><span class="line">bootapp.name=SpringBoot</span><br><span class="line">bootapp.description=$&#123;bootapp.name&#125;是一个spring应用程序</span><br></pre></td></tr></table></figure><h2 id="4-配置的使用"><a href="#4-配置的使用" class="headerlink" title="4. 配置的使用"></a>4. 配置的使用</h2><p>通过上面的介绍，可以发现不管是使用 <code>YAML</code> 还是 <code>Properties</code> 都可以进行配置文件的编写，但是还不知道具体的使用方式，通过下面的几个注解，可以让我们了解到这些配置的具体使用方式。</p><p>在使用配置之前，添加所需依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 导入配置文件处理器，在配置相关文件时候会有提示 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-ConfigurationProperties"><a href="#4-1-ConfigurationProperties" class="headerlink" title="4.1 ConfigurationProperties"></a>4.1 ConfigurationProperties</h3><p><code>@ConfigurationProperties</code> 注解是 <code>Spring Boot</code> 提供的一种使用属性的注入方法。不仅可以方便的把配置文件中的属性值与所注解类绑定，还支持松散绑定，JSR-303 数据校验等功能。以上面演示的 <code>Properties</code> 的配置为例演示 <code>@ConfigurationProperties</code> 注解的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/6 22:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持数据校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Data</code> 是 Lombok 的注解，会为这个类所有属性添加 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法。</li><li><code>@Component</code> 自动添加 bean 到 spring 容器中。</li><li><code>@ConfigurationProperties</code> 告诉这个类的属性都是配置文件里的属性，prefix 指定读取配置文件的前缀。</li></ul><h3 id="4-2-Value"><a href="#4-2-Value" class="headerlink" title="4.2 Value"></a>4.2 Value</h3><p><code>@Value</code> 支持直接从配置文件中读取值，同时支持 SpEL 表达式，但是不支持复杂数据类型和数据验证，下面是具体的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接从配置文件读取一个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.last-name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持SpEL表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*4/2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.birth&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不支持复杂类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不支持数据校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"xxx@@@@"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写单元测试代码测试代码查看属性绑定是否成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.Person;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.PersonValue;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonValue personValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟请求测试</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(<span class="string">"Greetings from Spring Boot!"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试<span class="doctag">@ConfigurationProperties</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试<span class="doctag">@Value</span> 引入配置值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersionValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(personValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行发现数据已经正常绑定。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/69bca4a567c0c6a4d5d2434812eb65b7.png" alt="单元测试"></p><p>通过上面的示例，也可以发现 <code>@ConfigurationProperties</code> 和 <code>@Value</code>的区别。</p><table><thead><tr><th>特征</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件属性</td><td>一个一个注入</td></tr><tr><td>松散绑定（松散的语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR-303 数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型</td><td>支持</td><td>不支持</td></tr></tbody></table><p><code>@ConfigurationProperties</code> 和 <code>@Value</code>的使用场景。</p><p>如果说，只是在某个业务逻辑中获取配置文件的某个值，使用 <code>@Value</code>.</p><p>如果说，专门编写有一个 Java Bean 来和配置文件映射，使用 <code>@ConfigurationProperties</code>.</p><h3 id="4-3-PropertySource"><a href="#4-3-PropertySource" class="headerlink" title="4.3 PropertySource"></a>4.3 PropertySource</h3><p>随着业务复杂性的增加，配置文件也越来越多，我们会觉得所有的配置都写在一个 properties 文件会使配置显得繁杂不利于管理，因此希望可以把映射属性类的配置单独的抽取出来。由于 Spring Boot 默认读取<code>application.properties</code>，因此在抽取之后之前单独的<code>@ConfigurationProperties(prefix = &quot;person&quot;)</code>已经无法读取到信息。这是可以使用 <code>@PropertySource</code>  注解来指定要读取的配置文件。</p><p>需要注意的是，使用 <code>@PropertySource</code> 加载自定义的配置文件，，由于 <code>@PropertySource</code> 指定的文件会优先加载，所以如果在 <code>applocation.properties</code> 中存在相同的属性配置，会覆盖前者中对于的值。</p><p>如果抽取 <code>person</code> 配置为单独文件<code>domain-person.properties</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/6 22:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:domain-person.properties"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(value = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持数据校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-多环境配置"><a href="#5-多环境配置" class="headerlink" title="5. 多环境配置"></a>5. 多环境配置</h2><p>在主配置文件编写的时候，文件名可以是 <code>application-{name}.properties</code>.默认使用的是<code>application.properties</code>.</p><h3 id="5-1-properties-多环境"><a href="#5-1-properties-多环境" class="headerlink" title="5.1 properties 多环境"></a>5.1 properties 多环境</h3><p>那么如何在配置文件中激活其他的配置文件呢？只需要在 <code>application.properties</code> 启用其他文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 激活 application-prod.properties文件</span><br><span class="line">spring.profiles.active=prod</span><br></pre></td></tr></table></figure><h3 id="5-2-YAML-多环境"><a href="#5-2-YAML-多环境" class="headerlink" title="5.2 YAML 多环境"></a>5.2 YAML 多环境</h3><p>如果是使用 YAML 配置文件，我们可以使用文件块的形式，在一个 YAML 文件就可以达到多文件配置的效果，下面是 Spring Boot 使用 YAML 文件进行多环境配置的方式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span> <span class="comment"># 指定环境为dev</span></span><br><span class="line"><span class="comment"># 使用三个---进行文档块区分</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><h3 id="5-3-多环境激活方式"><a href="#5-3-多环境激活方式" class="headerlink" title="5.3 多环境激活方式"></a>5.3 多环境激活方式</h3><p>除了以上的两种配置文件激活方式之外，还有另外两种种激活方式。</p><ul><li>命令行 ，运行时添加 <code>--spring.profiles.active=prod</code></li><li>Jvm 参数 ，运行时添加 <code>-Dspring.profiles.active=prod</code></li></ul><p>如果需要激活其他的配置文件，可以使用 <code>spring.config.location=G:/application.properties</code> 进行配置。</p><h2 id="6-配置文件加载顺序"><a href="#6-配置文件加载顺序" class="headerlink" title="6. 配置文件加载顺序"></a>6. 配置文件加载顺序</h2><p>配置文件默认会从四个地方加载，且优先级从高到低。优先级高的配置会覆盖优先级低的配置。如果多个位置的配置同时存在，不同的配置信息会形成互补配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-file: ./config/</span><br><span class="line">-file: ./</span><br><span class="line">-classpath: /config/</span><br><span class="line">-classpath: /</span><br></pre></td></tr></table></figure><h2 id="7-外部配置文件"><a href="#7-外部配置文件" class="headerlink" title="7. 外部配置文件"></a>7. 外部配置文件</h2><p>Spring Boot 的外部配置文件加载的方式有很多，具体可以参考<a href="https://docs.spring.io/spring-boot/docs/2.1.x/reference/html/boot-features-external-config.html" target="_blank" rel="noopener">官方文档</a>。这写配置加载优先级从高到底，优先级高的配置会覆盖优先级低的配置。</p><p>下面介绍几种常见的加载配置的顺序。</p><ol><li><p>命令行参数运行，所有的配置都可以在命令行上执行，多个配置空格隔开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot-0.0.1-SNAPSHOT.jar --server.port=9999 --sercer.context-path=/spring</span><br></pre></td></tr></table></figure></li><li><p>jar 包目录下的 application-{profile}.properties （或yml）文件</p></li><li>jar 包里的 application-{profile}.properties （或yml）文件</li><li>jar 包目录下的 application.properties （或yml）文件</li><li>jar 包里下的 application.properties （或yml）文件</li></ol><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-properties" target="_blank" rel="noopener">Spring Boot 配置文件</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：本 Spring Boot 系列文章基于 Spring Boot 版本 &lt;strong&gt;v2.1.1.RELEASE&lt;/strong&gt; 进行学习分析，版本不同可能会有细微差别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/dc649482e7380cbe546f92550cef3c51.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不管是通过官方提供的方式获取 Spring Boot 项目，还是通过 IDEA 快速的创建 Spring Boot 项目，我们都会发现在 resource 有一个配置文件 &lt;code&gt;application.properties&lt;/code&gt;,也有可能是&lt;code&gt;application.yml&lt;/code&gt;.这个文件也就是 Spring Boot 的配置文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（一）Spring Boot 入门篇</title>
    <link href="https://www.codingme.net/2019/01/springboot/springboot01-quick-start/"/>
    <id>https://www.codingme.net/2019/01/springboot/springboot01-quick-start/</id>
    <published>2019-01-01T07:14:17.000Z</published>
    <updated>2019-11-05T00:40:09.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本 Spring Boot 系列文章基于 Spring Boot 版本 <strong>v2.1.1.RELEASE</strong> 进行学习分析，版本不同可能会有细微差别。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/a60be3362289ed4d901bae342a685f84.png" alt=""></p><p>由于 J2EE 的开发变得笨重，繁多的配置，错乱的依赖管理，低下的开发效率，复杂的部署流程，第三方技术的集成难度较大等。同时随着复杂项目的演进，微服务分布式架构思想逐渐进入开发者的视野。</p><h2 id="1-Spring-Boot-介绍"><a href="#1-Spring-Boot-介绍" class="headerlink" title="1. Spring Boot 介绍"></a>1. Spring Boot 介绍</h2><p><code>Spring Boot</code> 提供了一组工具只需要极少的配置就可以快速的构建并启动基于 Spring 的应用程序。解决了传统 Spring 开发需要配置大量配置文件的痛点，同时 <code>Spring Boot</code> 对于第三方库设置了合理的默认值，可以快速的构建起应用程序。当然 <code>Spring Boot</code> 也可以轻松的自定义各种配置，无论是在开发的初始阶段还是投入生成的后期阶段。</p><a id="more"></a><h2 id="2-Spring-Boot-优点"><a href="#2-Spring-Boot-优点" class="headerlink" title="2. Spring Boot 优点"></a>2. Spring Boot 优点</h2><ul><li>快速的创建可以独立运行的 Spring 项目以及与主流框架的集成。</li><li>使用嵌入式的 Servlet 容器，用于不需要打成war包。</li><li>使用很多的启动器（Starters）自动依赖与版本控制。</li><li>大量的自动化配置，简化了开发，当然，我们也可以修改默认值。</li><li>不需要配置 XML 文件，无代码生成，开箱即用。</li><li>准生产环境的运行时应用监控。</li><li>与云计算的天然集成。</li></ul><h2 id="3-Spring-Boot-前置"><a href="#3-Spring-Boot-前置" class="headerlink" title="3. Spring Boot 前置"></a>3. Spring Boot 前置</h2><p>说了那么多的 Spring Boot 的好处，那么使用 Spring Boot 需要哪些前置知识呢？我简单列举了一下。</p><ul><li>Spring 框架的使用。</li><li>Maven 构建工具的使用。</li><li>IDEA 或其他开发工具的使用。</li></ul><h2 id="4-Spring-Boot-体验"><a href="#4-Spring-Boot-体验" class="headerlink" title="4. Spring Boot 体验"></a>4. Spring Boot 体验</h2><p>现在我们已经了解了 Spring Boot 是什么，下面我们将使用 Spring Boot 开发一个入门案例，来体验 Spring Boot 开发姿势是如何的优雅与迅速。<br>Spring Boot 官方已经为我们如何快速启动 Spring Boot 应用程序提供了多种方式。</p><p>你可以在 Spring 官方网站直接生成项目下载导入IDE进行开发。</p><blockquote><p><a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p></blockquote><p>也可以直接克隆 GitHub 上的初始项目进行体验。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/spring-guides/gs-spring-boot.git</span><br><span class="line">cd gs-spring-boot/initial</span><br></pre></td></tr></table></figure><p>这里我们选择后者，直接克隆进入到 initial 文件夹使用 maven 进行编译启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package &amp;&amp; java -jar target/gs-spring-boot-0.1.0.jar</span><br></pre></td></tr></table></figure><p>第一次编译需要下载需要的依赖，耗时会比较长，编译完成之后紧接着可以看到 Spring 的启动标志。这时 Spring Boot 的 web程序已经运行在8080端口了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> curl -s localhost:8080</span><br><span class="line">Greetings from Spring Boot!</span><br></pre></td></tr></table></figure><h2 id="5-Spring-Boot-开发"><a href="#5-Spring-Boot-开发" class="headerlink" title="5. Spring Boot 开发"></a>5. Spring Boot 开发</h2><p>下面手动编写一个 Spring Boot 入门案例，快速的开发一个 web mvc 应用。<br>项目结构如下：</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/8b8a006da0df292015c9895b337a3ba4.png" alt="Spring boot 项目结构"></p><h3 id="5-1-依赖项"><a href="#5-1-依赖项" class="headerlink" title="5.1 依赖项"></a>5.1 依赖项</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>spring-boot-starter-parent</code> 是Spring Boot 的核心依赖，它里面定义了各种在开发中会用到的第三方 jar  的版本信息，因此我们在引入其他的 Spring Boot 为我们封装的启动器的时候都不在需要指定版本信息。如果我们需要自定义版本信息，可以直接覆盖版本属性值即可。</p><p><code>spring-boot-starter-web</code>  提供 web 以及 MVC 和 validator 等web开发框架的支持。</p><p><code>spring-boot-starter-test</code>  提供测试模块的支持。如 Junit，Mockito。</p><p>需要说明的是，Spring Boot 为我们提供了很多的已经封装好的称为启动器（starter）的依赖项。让我们在使用的时候不需要再进行复杂的配置就可以迅速的进行应用集成。所有的官方启动器依赖可以在<a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-starters" target="_blank" rel="noopener">这里</a>查看。</p><blockquote><p>所有<strong>官方</strong>发布的启动器都遵循类似的命名模式; <code>spring-boot-starter-*</code>，这里<code>*</code>是指特定类型的应用程序。此命名结构旨在帮助您寻找启动器。</p><p>注意：编写自己的启动器的时候不应该使用这种命名方式。</p></blockquote><h3 id="5-2-启动类"><a href="#5-2-启动类" class="headerlink" title="5.2 启动类"></a>5.2 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">commandLineRunner</span><span class="params">(ApplicationContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            <span class="comment">// 开始检查spring boot 提供的 beans</span></span><br><span class="line">            System.out.println(<span class="string">"Let's inspect the beans provided by Spring Boot:"</span>);</span><br><span class="line">            String[] beanNames = ctx.getBeanDefinitionNames();</span><br><span class="line">            Arrays.sort(beanNames);</span><br><span class="line">            <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">                System.out.println(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootApplication</code>  注解是一个便利的注解，它包含了以下几个注解。</p><ol><li><p><code>@Configuration</code> 定义配置类。</p></li><li><p><code>@EnableAutoConfiguration</code> 开启自动配置。</p></li><li><p><code>@EnableWebMvc</code> 标记为 web应用程序。</p></li><li><p><code>@ComponentScan</code> 组件扫描。</p></li></ol><h3 id="5-3-控制器"><a href="#5-3-控制器" class="headerlink" title="5.3 控制器"></a>5.3 控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Greetings from Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RestController</code> 是 <code>@Controller</code> 与 <code>@ResponseBody</code> 的结合体。</p><h3 id="5-4-访问测试"><a href="#5-4-访问测试" class="headerlink" title="5.4 访问测试"></a>5.4 访问测试</h3><p>直接启动 <code>HelloApplication.java</code> 类就可以在控制台看到启动输出，然后访问8080端口查看启动是否正常。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/f8d782a2b291c6e082c116f5792088bb.png" alt="Spring boot 项目结构"></p><p>经过上面的例子，已经使用 Spring Boot 快速的创建了一个 web 应用并进行了简单的访问测试。</p><h2 id="6-Spring-Boot-单元测试"><a href="#6-Spring-Boot-单元测试" class="headerlink" title="6. Spring Boot 单元测试"></a>6. Spring Boot 单元测试</h2><p>结合上面提到的 Spring Boot 启动器知识，Spring Boot 已经为我们提供了丰富的第三方框架，测试框架也不例外。</p><p>导入单元测试依赖。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="6-1-模拟请求测试"><a href="#6-1-模拟请求测试" class="headerlink" title="6.1 模拟请求测试"></a>6.1 模拟请求测试</h3><p>编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(<span class="string">"Greetings from Spring Boot!"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于上面代码的一些说明。</p><ul><li><strong>MockMvc</strong> 允许我们方便的发送 HTTP 请求。</li><li><strong>SpringBootTest</strong> 方便的创建一个 Spring Boot 项目的测试程序。</li></ul><p>运行没有任何异常说明程序测试通过。</p><h3 id="6-2-Spring-Boot-集成测试"><a href="#6-2-Spring-Boot-集成测试" class="headerlink" title="6.2 Spring Boot 集成测试"></a>6.2 Spring Boot 集成测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.LocalServerPort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 嵌入式服务器由随机端口启动webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT</span></span><br><span class="line"><span class="comment"> * 并且在运行时发现实际端口<span class="doctag">@LocalServerPort</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/4 15:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationTestBySpringBoot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LocalServerPort</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> URL base;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestRestTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base = <span class="keyword">new</span> URL(<span class="string">"http://localhost:"</span> + port + <span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; response = template.getForEntity(base.toString(), String.class);</span><br><span class="line">        <span class="keyword">assert</span> (response.getBody().equals(<span class="string">"Greetings from Spring Boot!"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌入式服务器由随机端口启动 <code>webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT</code></p><p>并且在运行时使用注解 <code>@LocalServerPort</code> 发现实际端口。</p><p>运行测试类通过输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-12-06 22:28:01.914  INFO 14320 --- [o-auto-1-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &apos;dispatcherServlet&apos;</span><br><span class="line">2018-12-06 22:28:01.914  INFO 14320 --- [o-auto-1-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &apos;dispatcherServlet&apos;</span><br><span class="line">2018-12-06 22:28:01.937  INFO 14320 --- [o-auto-1-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 23 ms</span><br></pre></td></tr></table></figure><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-hello" target="_blank" rel="noopener">Spring Boot 入门案例</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：本 Spring Boot 系列文章基于 Spring Boot 版本 &lt;strong&gt;v2.1.1.RELEASE&lt;/strong&gt; 进行学习分析，版本不同可能会有细微差别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/a60be3362289ed4d901bae342a685f84.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于 J2EE 的开发变得笨重，繁多的配置，错乱的依赖管理，低下的开发效率，复杂的部署流程，第三方技术的集成难度较大等。同时随着复杂项目的演进，微服务分布式架构思想逐渐进入开发者的视野。&lt;/p&gt;
&lt;h2 id=&quot;1-Spring-Boot-介绍&quot;&gt;&lt;a href=&quot;#1-Spring-Boot-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Boot 介绍&quot;&gt;&lt;/a&gt;1. Spring Boot 介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Spring Boot&lt;/code&gt; 提供了一组工具只需要极少的配置就可以快速的构建并启动基于 Spring 的应用程序。解决了传统 Spring 开发需要配置大量配置文件的痛点，同时 &lt;code&gt;Spring Boot&lt;/code&gt; 对于第三方库设置了合理的默认值，可以快速的构建起应用程序。当然 &lt;code&gt;Spring Boot&lt;/code&gt; 也可以轻松的自定义各种配置，无论是在开发的初始阶段还是投入生成的后期阶段。&lt;/p&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Lombok 进行优雅的编码</title>
    <link href="https://www.codingme.net/2018/12/develop/tool-Lombok/"/>
    <id>https://www.codingme.net/2018/12/develop/tool-Lombok/</id>
    <published>2018-12-29T16:08:10.000Z</published>
    <updated>2019-10-17T08:17:45.250Z</updated>
    
    <content type="html"><![CDATA[<p>Project Lombok 是一个 java 库，它可以通过注解自动为你要编写的类添加相应功能，如 get/set 方法，提高了开发效率。</p><p>引入 POM 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Lombok核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加logback日志框架支持，（可有可无） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>查看依赖关系可以发现 <code>logback-classic</code> 依赖了 <code>SLF4J-API</code> 日志门面以及 l<code>ogback-core</code> 日志实现框架。</p><p><img src="/assets/1544414938730.png" alt="添加的pom依赖"><br>关于日志注解的选择，可以参考<a href="https://www.projectlombok.org/features/log" target="_blank" rel="noopener">官方文档</a>。默认的日志输出注释类为被注释的类路径，也可以使用 topic 参数自定义，如<code>@Slf4j(topic=&quot;reporting&quot;)</code>. 一般我们都会选择 <code>@Slf4j</code> 这个日志抽象类。在使用这个注解的时候需要导入 SLF4-API 抽象层以及具体的日志实现框架，上方的依赖中我们已经添加了日志依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CommonsLog</span></span><br><span class="line">Creates <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);</span><br><span class="line"><span class="meta">@Flogger</span></span><br><span class="line">Creates <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> com.google.common.flogger.FluentLogger log = com.google.common.flogger.FluentLogger.forEnclosingClass();</span><br><span class="line"><span class="meta">@JBossLog</span></span><br><span class="line">Creates <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);</span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line">Creates <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());</span><br><span class="line"><span class="meta">@Log</span>4j</span><br><span class="line">Creates <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);</span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line">Creates <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line">Creates <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</span><br><span class="line"><span class="meta">@XSlf</span>4j</span><br><span class="line">Creates <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</span><br></pre></td></tr></table></figure><p><code>Lombok</code> 的使用主要是几个注解，下面介绍常用的几个注解。</p><p><code>@Getter/@Setter</code>   为属性生成 get 和 set 方法。</p><p><code>@ToString</code> 生成 toString 方法，输出各个属性值。</p><p><code>@EqualsAndHashCode</code> 生成 equals 和 hashCode 方法。</p><p><code>@NoArgsConstructor</code> 生成无惨构造器。</p><p><code>@AllArgsConstructor</code> 生成全参数构造器。</p><p><code>@Data</code> 是一个方便注解，它捆绑了 <code>@ToString</code> <code>@Getter/@Setter</code>  <code>@EqualsAndHashCode</code> 以及 <code>@RequiredArgsConstructor</code>.</p><p>根据上面的解释，用下面的一个例子演示用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Lombok使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/10 11:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j(topic = <span class="string">"Lombok"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">        person1.setName(<span class="string">"Darcy"</span>);</span><br><span class="line">        person1.setAge(<span class="number">22</span>);</span><br><span class="line">        person1.setTeacher(<span class="keyword">true</span>);</span><br><span class="line">        log.info(person1.toString());</span><br><span class="line"></span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="string">"Darcy"</span>, <span class="number">22</span>, <span class="keyword">true</span>);</span><br><span class="line">        log.info(person2.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> equals = person1.equals(person2);</span><br><span class="line">        log.info(<span class="string">"Equals:"</span> + equals);</span><br><span class="line">        log.info(person1.hashCode() + <span class="string">" and "</span> + person2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Getter</span></span><br><span class="line"><span class="comment">//@Setter</span></span><br><span class="line"><span class="comment">//@ToString</span></span><br><span class="line"><span class="comment">//@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isTeacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 Person 类除了几个属性定义之外没有其他任何方法代码，运行 LombokTest 可以在控制台看到输出如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">12:12:57.687 [main] INFO  Lombok - Person(name=Darcy, age=22, isTeacher=true)</span><br><span class="line">12:12:57.690 [main] INFO  Lombok - Person(name=Darcy, age=22, isTeacher=true)</span><br><span class="line">12:12:57.690 [main] INFO  Lombok - Equals:true</span><br><span class="line">12:12:57.690 [main] INFO  Lombok - 1423350487 and 1423350487</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Project Lombok 是一个 java 库，它可以通过注解自动为你要编写的类添加相应功能，如 get/set 方法，提高了开发效率。&lt;/p&gt;
&lt;p&gt;引入 POM 依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Lombok核心依赖 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.18.4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 添加logback日志框架支持，（可有可无） --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;logback-classic&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="生产工具" scheme="https://www.codingme.net/categories/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
</feed>
