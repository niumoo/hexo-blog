<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未读代码</title>
  
  <subtitle>专注Java</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codingme.net/"/>
  <updated>2020-02-18T15:18:24.796Z</updated>
  <id>https://www.codingme.net/</id>
  
  <author>
    <name>未读代码</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jdk14 都要出了，Jdk9 的新特性还不了解一下？</title>
    <link href="https://www.codingme.net/2020/02/jdk/jdk9-feature/"/>
    <id>https://www.codingme.net/2020/02/jdk/jdk9-feature/</id>
    <published>2020-02-19T00:01:01.000Z</published>
    <updated>2020-02-18T15:18:24.796Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/jdk-new-feature/140916143852191.png" alt="Java 9"></p><p><code>Java 9</code> 中最大的亮点是 <strong>Java 平台模块化</strong>的引入，以及模块化 JDK。但是 <code>Java 9</code> 还有很多其他新功能，这篇文字会将重点介绍开发人员特别感兴趣的几种功能。</p><p>这篇文章也是 Java 新特性系列文章中的一篇，往期文章可以查看下面链接。</p><p><a href="https://www.codingme.net/2019/11/jdk/jdk8-stream/">还看不懂同事的代码？超强的 Stream 流操作姿势还不学习一下</a></p><p><a href="https://www.codingme.net/2019/11/jdk/jdk8-lambda/">还看不懂同事的代码？Lambda 表达式、函数接口了解一下</a></p><p><a href="https://www.codingme.net/2019/11/jdk/jdk8-optional/">Jdk14 都要出了，还不能使用 Optional优雅的处理空指针？</a></p><p><a href="https://www.codingme.net/2019/10/jdk/jdk8-time/">Jdk14 都要出了，Jdk8 的时间处理姿势还不了解一下？</a></p><p><a href="https://www.codingme.net/2020/01/jdk/jdk7-start/">还看不懂同事代码？快来补一波 Java 7 语法特性</a></p><a id="more"></a><h2 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1.  模块化"></a>1.  模块化</h2><p><code>Java 9</code> 中的<strong>模块化</strong>是对 <code>Java</code> 的一次重大改进。但是<strong>模块化</strong>并不是最近才提出来的，我们经常使用的  <code>maven</code> 构建工具，就是典型的模块化构建工具。<strong>模块化</strong>不仅让模块命名清晰，写出高内聚低耦合的代码，更可以方便处理模块之间的调用关系。</p><p><img src="/assets/jdk-new-feature/Explicit-modules.png" alt="Java 9 模块系统"></p><p>在 Oracle 官方中为 <code>Java 9</code> 中的模块系统的定义如下：</p><blockquote><p>the module, which is a named, self-describing collection of code and data. This module system.</p></blockquote><p>直白翻译：模块是一个命名的，自我描述的代码和数据的集合。</p><p><code>Java 9</code> 不仅支持了模块化开发，更是直接把 <code>JDK</code> 自身进行了模块化处理。<code>JDK</code> 自身的模块化可以带来很多好处，比如：</p><ul><li>方便管理，越来越大的 JDK 在模块化下结构变得更加清晰。</li><li>模块化 JDK 和 JRE 运行时镜像可以提高性能、安全性、维护性。</li><li>可以定制 JRE，使用更小的运行时镜像，比如网络应用不需要 swing 库，可以在打包时选择不用，减少性能消耗。</li><li>清晰明了的模块调用关系，避免调用不当出来的各种问题。</li></ul><p>上面提到了 JDK 自身的模块化，我们通过浏览 JDK 9 的目录结构也可以发现一些变化。</p><p><img src="/assets/jdk-new-feature/image-20200217111754648.png" alt="JDK 模块化"></p><p>最明显的是在 JDK 9 中 jre 文件夹不存在了。下面是在 IDEA 中查看的 JDK 9 的依赖，命名规范的模块看起来是不是让人赏心悦目呢？</p><p><img src="/assets/jdk-new-feature/image-20200217112025069.png" alt="JDK 9 在 IDEA"></p><p>当然，这篇文章主要介绍 Java 9 的新特性，而模块化是一个巨大改变，结合示例介绍下来篇幅会比较长，这里就不占用太多篇幅了。</p><p>模块化文章预告：如何编写一个模块化系统，如何打包让没有安装 Java 环境的系统运行编写的代码，都可以通过模块化选择运行时模块实现。我后面的文章就会通过一个模块化项目介绍到，有兴趣的可以关注我后续文章 😎。</p><h2 id="2-集合工厂方法"><a href="#2-集合工厂方法" class="headerlink" title="2. 集合工厂方法"></a>2. 集合工厂方法</h2><p>在 Java 9 中为集合的创建增加了静态工厂创建方式，也就是 <code>of</code> 方法，通过静态工厂 <code>of</code> 方法创建的集合是<strong>只读集合</strong>，里面的对象<strong>不可改变</strong>。并在<strong>不能存在 <code>null</code> 值</strong>，对于 <code>set</code> 和 <code>map</code> 集合，也<strong>不能存在 <code>key</code> 值重复</strong>。这样不仅<strong>线程安全</strong>，而且<strong>消耗的内存也更小</strong>。</p><p>下面是三种集合通过静态工厂创建的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂方法创建集合</span></span><br><span class="line">List&lt;String&gt; stringList = List.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</span><br><span class="line">Set&lt;String&gt; stringSet = Set.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</span><br><span class="line">Map&lt;String, Integer&gt; stringIntegerMap = Map.of(<span class="string">"key1"</span>, <span class="number">1</span>, <span class="string">"key2"</span>, <span class="number">2</span>, <span class="string">"key3"</span>, <span class="number">3</span>);</span><br><span class="line">Map&lt;String, Integer&gt; stringIntegerMap2 = Map.ofEntries(Map.entry(<span class="string">"key1"</span>, <span class="number">1</span>), Map.entry(<span class="string">"key2"</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合输出</span></span><br><span class="line">System.out.println(stringList);</span><br><span class="line">System.out.println(stringSet);</span><br><span class="line">System.out.println(stringIntegerMap);</span><br><span class="line">System.out.println(stringIntegerMap2);</span><br></pre></td></tr></table></figure><p>得到输出结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[a, b, c, d]</span><br><span class="line">[d, a, c, b]</span><br><span class="line">&#123;key2=2, key1=1, key3=3&#125;</span><br><span class="line">&#123;key2=2, key1=1&#125;</span><br></pre></td></tr></table></figure><p>再次运行，得到输出结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[a, b, c, d]</span><br><span class="line">[a, c, b, d]</span><br><span class="line">&#123;key3=3, key2=2, key1=1&#125;</span><br><span class="line">&#123;key2=2, key1=1&#125;</span><br></pre></td></tr></table></figure><p>为什么我贴了两次运行结果呢？主要是要展示通过 <code>of</code> 方法创建的 <code>set</code> 和 <code>map</code> 集合在遍历时，在每个 JVM 周期遍历顺序是随机的，这样的机制可以发下代码中有没有对于顺序敏感的异常代码。</p><p>这种只读集合在 Java 9 之前创建是通过 <code>Collections.unmodifiableList</code> 修改集合操作权限实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(<span class="string">"达西"</span>);</span><br><span class="line">arrayList.add(<span class="string">"未读代码"</span>);</span><br><span class="line"><span class="comment">// 设置为只读集合</span></span><br><span class="line">arrayList = Collections.unmodifiableList(arrayList);</span><br></pre></td></tr></table></figure><p>静态工厂 <code>of</code> 方法创建的集合还有一个特性，就是工厂内部会自由复用已有实例或者创建新的实例，所以应该避免对 <code>of</code> 创建的集合进行判等或者 <code>haseCode</code> 比较等操作。</p><p>像下面这样，创建两个 <code>List</code>，你会发现两个 <code>List</code> 的 <code>hashCode</code> 是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂可以自由创建新的实例或者复用现有实例，所以 使用 of 创建的集合，避免 == 或者 hashCode 判断操作</span></span><br><span class="line">List&lt;String&gt; stringList = List.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</span><br><span class="line">List&lt;String&gt; stringList2 = List.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</span><br><span class="line">System.out.println(stringList.hashCode());</span><br><span class="line">System.out.println(stringList2.hashCode());</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 3910595</span></span><br><span class="line"><span class="comment">// 3910596</span></span><br></pre></td></tr></table></figure><p>这也是使用 <code>of</code> 方法创建集合的优势之一，消耗更少的系统资源。这一点也体现在 <code>of</code> 创建的集合的数据结构实现上，有兴趣的同学可以自行研究下。</p><h2 id="3-Stream-API"><a href="#3-Stream-API" class="headerlink" title="3. Stream API"></a>3. Stream API</h2><p><code>Stream</code> 流操作自从 <code>Java 8</code> 引入以来，一直广受好评。便捷丰富的 <code>Stream</code> 操作让人爱不释手，更让没看过的同事眼花缭乱，在介绍 <code>Java 8</code> 新特性时已经对 <code>Stream</code> 进行了详细的介绍，没看过的同学可以看下这篇：</p><p><a href="https://www.codingme.net/2019/11/jdk/jdk8-stream/">还看不懂同事的代码？超强的 Stream 流操作姿势还不学习一下</a> </p><p>当然，学习 <code>Stream</code> 之前要先学习 <code>Lambda</code> ，如果你还没有看过，也可以看下之前这篇：</p><p><a href="https://www.codingme.net/2019/11/jdk/jdk8-lambda/">还看不懂同事的代码？Lambda 表达式、函数接口了解一下</a></p><p>在 <code>Java 9</code> 中，又对 <code>Stream</code> 进行了增强，主要增加了 4 个新的操作方法：<em>dropWhile，takeWhile，ofNullable，iterate</em>。</p><p>下面对这几个方法分别做个介绍。</p><ol><li><p>takeWhile: 从头开始筛选，遇到不满足的就结束了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// takeWhile ,从头开始筛选，遇到不满足的就结束了</span></span><br><span class="line">List&lt;Integer&gt; list1 = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">List&lt;Integer&gt; listResult = list1.stream().takeWhile(x -&gt; x &lt; <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(listResult);</span><br><span class="line"><span class="comment">// takeWhile ,从头开始筛选，遇到不满足的就结束</span></span><br><span class="line">List&lt;Integer&gt; list2 = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">List&lt;Integer&gt; listResult2 = list2.stream().takeWhile(x -&gt; x &lt; <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(listResult2);</span><br></pre></td></tr></table></figure><p>输出结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2]</span><br><span class="line">[1, 2]</span><br></pre></td></tr></table></figure></li><li><p>dropWhile: 从头开始删除，遇到不满足的就结束了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dropWhile ,从头开始删除，遇到不满足的就结束了</span></span><br><span class="line">List&lt;Integer&gt; list1 = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">List&lt;Integer&gt; listResult = list1.stream().dropWhile(x -&gt; x &lt; <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(listResult);</span><br><span class="line"><span class="comment">// dropWhile ,从头开始删除，遇到不满足的就结束</span></span><br><span class="line">List&lt;Integer&gt; list2 = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">List&lt;Integer&gt; listResult2 = list2.stream().dropWhile(x -&gt; x &lt; <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(listResult2);</span><br></pre></td></tr></table></figure><p>输出结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[3, 4, 5]</span><br><span class="line">[3, 4, 3, 0]</span><br></pre></td></tr></table></figure></li><li><p>ofNullable: 创建支持全 null 的 Stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>);</span><br><span class="line">stream.forEach(System.out::print);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">// 空指针异常</span></span><br><span class="line"><span class="comment">// stream = Stream.of(null);</span></span><br><span class="line">stream = Stream.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">stream.forEach(System.out::print);</span><br></pre></td></tr></table></figure><p>输出结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12null</span><br></pre></td></tr></table></figure></li><li><p>iterate: 可以重载迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream.iterate(<span class="number">0</span>, x -&gt; x &lt; <span class="number">10</span>, x -&gt; x + <span class="number">1</span>).forEach(System.out::print);</span><br></pre></td></tr></table></figure><p>输出结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0123456789</span><br></pre></td></tr></table></figure></li></ol><p>在 <code>Stream</code> 增强之外，还增强了 <code>Optional</code> ，<code>Optional</code> 增加了可以转换成 <code>Stream</code> 的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; s = Optional.of(<span class="number">1</span>).stream();</span><br><span class="line">s.forEach(System.out::print);</span><br></pre></td></tr></table></figure><h2 id="4-接口私有方法"><a href="#4-接口私有方法" class="headerlink" title="4. 接口私有方法"></a>4. 接口私有方法</h2><p>在 <code>Java 8</code> 中增加了默认方法，在 <code>Java 9</code> 中又增加了私有方法，这时开始接口中不仅仅有了定义，还具有了行为。我想这是出于代码构造上的考虑，如果没有私有方法，那么当多个默认方法的行为一样时，就要写多个相同的代码。而有了私有方法，事情就变得不一样了。</p><p>就像下面的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 达西 - 公众号：未读代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jdk9Interface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChinaPeople chinaPeople = <span class="keyword">new</span> ChinaPeople();</span><br><span class="line">        chinaPeople.sleep();</span><br><span class="line">        chinaPeople.eat();</span><br><span class="line">        chinaPeople.doXxx();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaPeople</span> <span class="keyword">implements</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"躺着睡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">doXxx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喝水"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子中的接口 <code>people</code> 中的 <code>eat()</code> 和 <code>doXxx()</code> 默认行为一致，使用私有方法可以方便的抽取一个方法出来。</p><p>输出结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">躺着睡</span><br><span class="line">喝水</span><br><span class="line">喝水</span><br></pre></td></tr></table></figure><h2 id="5-HTTP-2-Client"><a href="#5-HTTP-2-Client" class="headerlink" title="5. HTTP / 2 Client"></a>5. HTTP / 2 Client</h2><p><code>Java 9</code> 内置了新的 HTTP/2 客户端，请求更加方便。</p><p>随便访问一个不存在的网页。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">URI uri = URI.create(<span class="string">"http://www.tianqiapi.com/api/xxx"</span>);</span><br><span class="line">HttpRequest req = HttpRequest.newBuilder(uri).header(<span class="string">"User-Agent"</span>, <span class="string">"Java"</span>).GET().build();</span><br><span class="line">HttpResponse&lt;String&gt; resp = client.send(req, HttpResponse.BodyHandler.asString());</span><br><span class="line">String body = resp.body();</span><br><span class="line">System.out.println(body);</span><br></pre></td></tr></table></figure><p>输出得到的结果，这里是这个网站的报错信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There is no method xxxAction in ApiController</span><br></pre></td></tr></table></figure><p>可能你运行的时候会报找不到 <code>httpClient</code> 模块之类的问题，这时候需要你在你项目代码目录添加 <code>httpClient 模块</code> 才能解决，添加方式看下面的图。</p><p><img src="/assets/jdk-new-feature/image-20200217225456437.png" alt="Java 9 导入导出模块"></p><p><code>export</code> 写自己的包路径，<code>requires</code> 写引入的模块名。</p><h2 id="6-Java-REPL-JShell"><a href="#6-Java-REPL-JShell" class="headerlink" title="6. Java REPL - JShell"></a>6. Java REPL - JShell</h2><p>交互式的编程环境在其他语言如 Python 上早就有了，而 Java 上的交互式语言只到 <code>Java 9</code>才出现。交互式的编程可以让开发者在输入代码的时候就获取到程序的运行结果，而不用像之前一样新建文件、创建类、导包、测试一系列流程。</p><p><code>JShell</code> 中支持 <code>tab</code> 补全代码以及自动添加分号，下面通过一个例子演示 <code>JShell</code> 的使用。</p><ol><li><p>进入 JShell. 查看帮助文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">C:\Users&gt;jshell</span><br><span class="line">|  欢迎使用 JShell -- 版本 9</span><br><span class="line">|  要大致了解该版本, 请键入: /help intro</span><br><span class="line"><span class="meta">jshell&gt;</span> /help</span><br><span class="line">|  键入 Java 语言表达式, 语句或声明。</span><br><span class="line">|  或者键入以下命令之一:</span><br><span class="line">|  /list [&lt;名称或 id&gt;|-all|-start]</span><br><span class="line">|       列出您键入的源</span><br><span class="line">|  /edit &lt;名称或 id&gt;</span><br><span class="line">|       编辑按名称或 id 引用的源条目</span><br><span class="line">|  /drop &lt;名称或 id&gt;</span><br><span class="line">|       删除按名称或 id 引用的源条目</span><br><span class="line">|  /save [-all|-history|-start] &lt;文件&gt;</span><br><span class="line">|       将片段源保存到文件。</span><br><span class="line">|  /open &lt;file&gt;</span><br><span class="line">|       打开文件作为源输入</span><br><span class="line">|  /vars [&lt;名称或 id&gt;|-all|-start]</span><br><span class="line">|       列出已声明变量及其值</span><br><span class="line">|  /methods [&lt;名称或 id&gt;|-all|-start]</span><br><span class="line">|       列出已声明方法及其签名</span><br><span class="line">|  /types [&lt;名称或 id&gt;|-all|-start]</span><br><span class="line">|       列出已声明的类型</span><br><span class="line">|  /imports</span><br><span class="line">|       列出导入的项</span><br><span class="line">|  /exit</span><br><span class="line">|       退出 jshell</span><br><span class="line">|  /env [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;] [-add-modules &lt;模块&gt;] ...</span><br><span class="line">|       查看或更改评估上下文</span><br><span class="line">|  /reset [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;] [-add-modules &lt;模块&gt;]...</span><br><span class="line">|       重启 jshell</span><br><span class="line">|  /reload [-restore] [-quiet] [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;]...</span><br><span class="line">|       重置和重放相关历史记录 -- 当前历史记录或上一个历史记录 (-restore)</span><br><span class="line">|  /history</span><br><span class="line">|       您键入的内容的历史记录</span><br><span class="line">|  /help [&lt;command&gt;|&lt;subject&gt;]</span><br><span class="line">|       获取 jshell 的相关信息</span><br><span class="line">|  /set editor|start|feedback|mode|prompt|truncation|format ...</span><br><span class="line">|       设置 jshell 配置信息</span><br><span class="line">|  /? [&lt;command&gt;|&lt;subject&gt;]</span><br><span class="line">|       获取 jshell 的相关信息</span><br><span class="line">|  /!</span><br><span class="line">|       重新运行上一个片段</span><br><span class="line">|  /&lt;id&gt;</span><br><span class="line">|       按 id 重新运行片段</span><br><span class="line">|  /-&lt;n&gt;</span><br><span class="line">|       重新运行前面的第 n 个片段</span><br><span class="line">|</span><br><span class="line">|  有关详细信息, 请键入 '/help', 后跟</span><br><span class="line">|  命令或主题的名称。</span><br><span class="line">|  例如 '/help /list' 或 '/help intro'。主题:</span><br><span class="line">|</span><br><span class="line">|  intro</span><br><span class="line">|       jshell 工具的简介</span><br><span class="line">|  shortcuts</span><br><span class="line">|       片段和命令输入提示, 信息访问以及</span><br><span class="line">|       自动代码生成的按键说明</span><br><span class="line">|  context</span><br><span class="line">|       /env /reload 和 /reset 的评估上下文选项</span><br><span class="line"></span><br><span class="line"><span class="meta">jshell&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义一个变量：a = 10，遍历从 0 到 a 的数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">a ==&gt; <span class="number">10</span></span><br><span class="line">jshell&gt; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;System.out.println(i);&#125;</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></li><li><p>定义一个集合，赋值1,2,3,4,5。然后输出集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; List list = List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">list ==&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">jshell&gt; list</span><br><span class="line">list ==&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>查看输入过的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /list</span><br><span class="line">   <span class="number">1</span> : <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">   <span class="number">2</span> : <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;System.out.println(i);&#125;</span><br><span class="line">   <span class="number">3</span> : List list = List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">   <span class="number">4</span> : list</span><br></pre></td></tr></table></figure></li><li><p>列出导入的包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /imports</span><br><span class="line">|    <span class="keyword">import</span> java.io.*</span><br><span class="line">|    <span class="keyword">import</span> java.math.*</span><br><span class="line">|    <span class="keyword">import</span> java.net.*</span><br><span class="line">|    <span class="keyword">import</span> java.nio.file.*</span><br><span class="line">|    <span class="keyword">import</span> java.util.*</span><br><span class="line">|    <span class="keyword">import</span> java.util.concurrent.*</span><br><span class="line">|    <span class="keyword">import</span> java.util.function.*</span><br><span class="line">|    <span class="keyword">import</span> java.util.prefs.*</span><br><span class="line">|    <span class="keyword">import</span> java.util.regex.*</span><br><span class="line">|    <span class="keyword">import</span> java.util.stream.*</span><br></pre></td></tr></table></figure></li><li><p>将代码保存到文件并退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; /save d:/JShell.java</span><br><span class="line">jshell&gt; /exit</span><br><span class="line">  再见</span><br></pre></td></tr></table></figure><p>在 D 盘看到的保存的代码片段。</p><p><img src="/assets/jdk-new-feature/image-20200217232617028.png" alt="JShell 保存的代码"></p></li></ol><p>操作起来还是挺简单的，还记得上面介绍集合工厂 <code>of</code> 方法创建出来的 <code>set</code> 和 <code>map</code> 数据在每个 <code>JVM</code> 周期里是无序的嘛？也可以用 <code>JShell</code> 实验下。</p><p><img src="/assets/jdk-new-feature/image-20200218113246293.png" alt="Set.of 的随机遍历"></p><h2 id="7-其他更新"><a href="#7-其他更新" class="headerlink" title="7. 其他更新"></a>7. 其他更新</h2><p><code>Java 9</code> 中增加或者优化的功能远不止这些，上面只是列举了常用的一些新特性，更多的新特性如：</p><ul><li>不能使用下划线 _ 作为变量名，因为它是一个关键字。</li><li>Javadoc 支持 HTML5 并且支持搜索功能。</li><li>Nashorn 引擎升级，更好的支持 Javascript.</li><li>String 存储结构变更从 char -&gt; byte.</li><li>………</li></ul><p>新特性很多，感兴趣的可以自己了解下。</p><p><strong>再次预告</strong>，后续文章会结合案例图文并茂详细介绍 <strong>Java 9 开始的模块系统</strong>，感兴趣的可以关注我。此去山高水远，愿你我一路同行。</p><p>文章案例都已经上传到 Github：<a href="https://github.com/niumoo/jdk-feature" target="_blank" rel="noopener">niumoo/jdk-feature</a></p><p><strong>参考资料</strong></p><ul><li><a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm" target="_blank" rel="noopener">Java Platform, Standard Edition What’s New in Oracle JDK 9</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/jdk-new-feature/140916143852191.png&quot; alt=&quot;Java 9&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java 9&lt;/code&gt; 中最大的亮点是 &lt;strong&gt;Java 平台模块化&lt;/strong&gt;的引入，以及模块化 JDK。但是 &lt;code&gt;Java 9&lt;/code&gt; 还有很多其他新功能，这篇文字会将重点介绍开发人员特别感兴趣的几种功能。&lt;/p&gt;
&lt;p&gt;这篇文章也是 Java 新特性系列文章中的一篇，往期文章可以查看下面链接。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codingme.net/2019/11/jdk/jdk8-stream/&quot;&gt;还看不懂同事的代码？超强的 Stream 流操作姿势还不学习一下&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codingme.net/2019/11/jdk/jdk8-lambda/&quot;&gt;还看不懂同事的代码？Lambda 表达式、函数接口了解一下&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codingme.net/2019/11/jdk/jdk8-optional/&quot;&gt;Jdk14 都要出了，还不能使用 Optional优雅的处理空指针？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codingme.net/2019/10/jdk/jdk8-time/&quot;&gt;Jdk14 都要出了，Jdk8 的时间处理姿势还不了解一下？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codingme.net/2020/01/jdk/jdk7-start/&quot;&gt;还看不懂同事代码？快来补一波 Java 7 语法特性&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Jdk 新特性" scheme="https://www.codingme.net/categories/Jdk-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java9" scheme="https://www.codingme.net/tags/Java9/"/>
    
  </entry>
  
  <entry>
    <title>还看不懂同事代码？快来补一波 Java 7 语法特性</title>
    <link href="https://www.codingme.net/2020/01/jdk/jdk7-start/"/>
    <id>https://www.codingme.net/2020/01/jdk/jdk7-start/</id>
    <published>2020-01-08T00:01:01.000Z</published>
    <updated>2020-02-18T14:37:28.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java 平台自出现到目前为止，已经 20 多个年头了，这 20 多年间 Java 也一直作为最流行的程序设计语言之一，不断面临着其他新兴编程语言的挑战与冲击。Java 语言是一种<strong>静态强类型</strong>语言，这样的语言特性可以让 Java 编译器在<strong>编译阶段</strong>发现错误，这对于构建出一个<strong>稳定安全且健壮</strong>的应用来说，尤为重要。但是也因为这种特性，让 Java 开发似乎变得缺少灵活性，开发某些功能的应用时，代码量可能是其他语言的几倍。Java 开发的不足之处也体现越来越复杂的 JDK 上，越来越复杂的 JDK 让开发者完全理解的难度变的非常大。以至于开发者有时会重复实现一个 JDK 中已经提供了的功能。<br><a id="more"></a><br>为了跟上互联网应用编程发展的脚步， Java 从 9 版本开始调整了 JDK 发布的节奏，JDK 的每次更新都注重<strong>提高生产效率</strong>，提高 <strong>JVM 性能</strong>，推行<strong>模块化</strong>等，让开发者可以更多的专注于业务本身，而不是浪费过多的时间在语言特性上。 Java 语言的更新要在语言的严谨性和灵活性上找到一个平衡点，毕竟灵活性可以减少编码的复杂度，而严谨性是构建复杂且健壮应用的基石。</p><h1 id="Java-7-语言特性"><a href="#Java-7-语言特性" class="headerlink" title="Java 7 语言特性"></a>Java 7 语言特性</h1><p>Java 重要的更新版本是在 Java 5 版本，这个版本中增加了如泛型、增强 for、自动装箱拆箱、枚举类型，可变参数、注解等一系列<strong>重要功能</strong>，但是随后的 Java 6 中并没有增加新的重要的语言特性。Java 5 的发布是在 2004 年，已经很久远了，网上关于 Java 的教程也大多是基于 Java 6 的，也因此我准备从 Java 7 开始介绍每个 Java 版本的新特性。</p><p>下面所有代码的运行演示都是基于 <strong>Java 7 </strong> ，所以你如果尝试下面的代码，需要<strong>安装并配置</strong>  Jdk 1.7 或者已上版本。</p><h1 id="1-switch-String"><a href="#1-switch-String" class="headerlink" title="1. switch String"></a>1. switch String</h1><p>在 Java 7 之前，switch 语法中只支持整数类型以及这些整数类型的封装类进行判断，在 Java 7 中，支持了 string 字符串类型的判断，使用起来非常的简单，但是实用性是很高的。</p><h2 id="1-1-switch-String-基本用法"><a href="#1-1-switch-String-基本用法" class="headerlink" title="1.1. switch String 基本用法"></a>1.1. switch String 基本用法</h2><p>编写一个简单的 switch 判断字符串的测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchWithString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String gender = <span class="string">"男"</span>;</span><br><span class="line">        System.out.println(gender.hashCode());</span><br><span class="line">        <span class="keyword">switch</span> (gender) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"男"</span>:</span><br><span class="line">                System.out.println(<span class="string">"先生你好"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"女"</span>:</span><br><span class="line">                System.out.println(<span class="string">"女士你好"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"你好"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 判断字符串使用起来很简单，结果也显而易见会先输出 gender 变量的 hashCode，然后输出匹配结果“先生你好”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30007</span></span><br><span class="line">先生你好</span><br></pre></td></tr></table></figure><p>在使用 switch string 时候，如果结合 Java 5 的<strong>枚举类</strong>，那么效果会更好，Java 7 之前使用 switch 结合枚举类要为每个枚举值编数字代号，Java 7 之后可以枚举进行 switch。</p><h2 id="1-2-switch-String-实现原理"><a href="#1-2-switch-String-实现原理" class="headerlink" title="1.2. switch String 实现原理"></a>1.2. switch String 实现原理</h2><p>但是这个支持<strong>只是编译器层面的支持</strong>， Java 虚拟机依旧是不支持的。在对字符串进行 switch 时，编译器会把字符串<strong>转换成整数</strong>类型再进行判断。为了验证上面说的只是编译器层面的支持，我们反编译（可以使用 Jad 反编译工具，也可以在 Idea 中双击编译生成的 class ）生成的 class 文件，看到编译器把 switch string 转换成了字符串 hashCode 判断，为了防止 hashCode 冲突，又使用了 equals 再次判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchWithString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchWithString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String gender = <span class="string">"男"</span>;</span><br><span class="line">        System.out.println(gender.hashCode());</span><br><span class="line">        <span class="keyword">byte</span> var3 = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span>(gender.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">22899</span>:</span><br><span class="line">            <span class="keyword">if</span> (gender.equals(<span class="string">"女"</span>)) &#123;</span><br><span class="line">                var3 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">30007</span>:</span><br><span class="line">            <span class="keyword">if</span> (gender.equals(<span class="string">"男"</span>)) &#123;</span><br><span class="line">                var3 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(var3) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            System.out.println(<span class="string">"先生你好"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"女士你好"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"你好"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-try-with-resource"><a href="#2-try-with-resource" class="headerlink" title="2. try-with-resource"></a>2. try-with-resource</h1><p>Java 不同于 C++，需要开发者自己管理每一块内存，大多时候 Java 虚拟机都可以很好的帮我们进行资源管理，但是也有时候需要手动释放一些资源，比如数据库连接、磁盘文件连接、网络连接等。换句话说，只要是资源数量有限的，都需要我们手动的进行释放。</p><h2 id="2-1-try-catch-finally"><a href="#2-1-try-catch-finally" class="headerlink" title="2.1. try-catch-finally"></a>2.1. try-catch-finally</h2><p>在操作有限资源的时候，可能会出现各种异常，不管是读取阶段还是在最后关闭资源的过程中，都有可能出现问题，我们通常会使用下面的方式 <code>try-catch-finally</code> 保证资源的释放。</p><p>像下面这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.codingme.net</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatachFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"jdk-feature-7.iml"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看这恶心的代码结构，为了捕获异常，我们写了一个 <code>catch</code>，为了能保证释放资源，我们又写了 <code>finally</code> 进行资源释放，在资源释放时为了捕捉 <code>close</code> 时抛出的异常，我们又写了一个 <code>try-catch</code>。最后看着这复杂的代码，如果有人告诉你这段代码有 <code>bug</code>，那你一定不会相信。但是确实是这样，看起来严密的代码逻辑，当 <code>try</code> 中的代码逻辑和 <code>close</code> 方法同时产生异常的时候，<code>try</code> 中的异常信息会丢失。</p><p>可以看这里例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.feature.jdk7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.codingme.net</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatachFinallyThrow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FileRead fileRead = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileRead = <span class="keyword">new</span> FileRead();</span><br><span class="line">            fileRead.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileRead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileRead.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileRead</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"读取异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"资源关闭"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"关闭异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显代码里 <code>read</code> 和 <code>close</code> 方法都会产生异常，但是运行程序发现只能收到 <code>close</code> 的异常信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">资源关闭</span><br><span class="line">Exception in thread &quot;main&quot; java.io.IOException: 关闭异常</span><br><span class="line">at net.codingme.feature.jdk7.FileRead.close(TryCatachFinallyThrow.java:51)</span><br><span class="line">at net.codingme.feature.jdk7.TryCatachFinallyThrow.read(TryCatachFinallyThrow.java:33)</span><br><span class="line">at net.codingme.feature.jdk7.TryCatachFinallyThrow.main(TryCatachFinallyThrow.java:20)</span><br></pre></td></tr></table></figure><p><strong>异常信息丢失</strong>了，可怕的是你以为只是 <code>close</code> 时发生了异常而已。</p><h2 id="2-2-try-autocloseable"><a href="#2-2-try-autocloseable" class="headerlink" title="2.2. try-autocloseable"></a>2.2. try-autocloseable</h2><p>上面的问题在 Java 7 中其实已经提供了新的解决方式，Java 7 中对 <code>try</code> 进行了增强，可以保证资源<strong>总能被正确释放</strong> 。使用增强 <code>try</code> 的前提是 <code>try</code> 中的类实现了 <code>AutoCloseable</code> 接口，在 Java 7 中大量的需要释放资源的操作其实都已经实现了此接口了。</p><p><img src="/assets/jdk7-start/image-20200107084113348.png" alt="AutoCloseable 实现类"></p><p>实现了 <code>AutoCloseable</code> 的类，在增强 <code>try</code>中使用时，不用担心资源的关闭，在使用完毕会自动的调用 <code>close</code>方法，并且<strong>异常不会丢失</strong>。</p><p>让我们编写的模拟资源操作的类实现 <code>AutoCloseable</code>  接口，然后时候增强 <code>try</code> 看看效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.feature.jdk7;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动关闭</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.codingme.net</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCloseResource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Mysql mysql = <span class="keyword">new</span> Mysql();</span><br><span class="line">             OracleDatabase oracleDatabase = <span class="keyword">new</span> OracleDatabase()) &#123;</span><br><span class="line">            mysql.conn();</span><br><span class="line">            oracleDatabase.conn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql 已关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql 已连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleDatabase</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OracleDatabase 已关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OracleDatabase 已连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类 Mysql 和  OracleDatabase 都是实现了 AutoCloseable，运行查看结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql 已连接</span><br><span class="line">OracleDatabase 已连接</span><br><span class="line">OracleDatabase 已关闭</span><br><span class="line">mysql 已关闭</span><br></pre></td></tr></table></figure><p>确认在发生异常时候异常信息不会丢失，写一个有异常的模拟测试类进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.feature.jdk7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.codingme.net</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCloseThrow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileReadAutoClose fileRead = <span class="keyword">new</span> FileReadAutoClose()) &#123;</span><br><span class="line">            fileRead.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileReadAutoClose</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"资源读取"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"读取异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"资源关闭"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"关闭异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行查看异常信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">资源读取</span><br><span class="line">资源关闭</span><br><span class="line">Exception in thread &quot;main&quot; java.io.IOException: 读取异常</span><br><span class="line">at net.codingme.feature.jdk7.FileReadAutoClose.read(AutoCloseThrow.java:23)</span><br><span class="line">at net.codingme.feature.jdk7.AutoCloseThrow.main(AutoCloseThrow.java:14)</span><br><span class="line">Suppressed: java.io.IOException: 关闭异常</span><br><span class="line">at net.codingme.feature.jdk7.FileReadAutoClose.close(AutoCloseThrow.java:29)</span><br><span class="line">at net.codingme.feature.jdk7.AutoCloseThrow.main(AutoCloseThrow.java:15)</span><br></pre></td></tr></table></figure><p>自动关闭，异常清晰，关闭异常存在于 <code>Suppressed</code> ，称为抑制异常，后续文章会详细介绍。</p><h1 id="3-try-catch"><a href="#3-try-catch" class="headerlink" title="3. try-catch"></a>3. try-catch</h1><p>在 Java 7 之前，一个 catch 只能捕获一个异常信息，当异常种类非常多的时候就很麻烦，但是在 Java 7 中，一个 catch 可以捕获多个异常信息，每个异常捕获之间使用 <code>|</code> 分割，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.feature.jdk7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多异常捕获</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchMany</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (TxtRead txtRead = <span class="keyword">new</span> TxtRead()) &#123;</span><br><span class="line">            txtRead.reader();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TxtRead</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"资源释放"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> <span class="keyword">throws</span> IOException, NoSuchFieldException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"数据读取"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，一个 catch 捕获多个异常时，不能出现重复的异常类型，也不能出现一个异常类型是另一个类的子类的情况。</p><h1 id="4-二进制"><a href="#4-二进制" class="headerlink" title="4. 二进制"></a>4. 二进制</h1><p>Java 7 开始，可以直接指定不同的进制数字。</p><ol><li>二进制指定数字值，只需要使用 <code>0b</code> 或者 <code>OB</code> 开头。</li><li>八进制指定数字值，使用 <code>0</code> 开头。</li><li>十六进制指定数字值，使用 <code>0x</code> 开头。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二进制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.codingme.net</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 二进制</span></span><br><span class="line">        System.out.println(<span class="string">"------2进制-----"</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0b001</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0b010</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">// 八进制</span></span><br><span class="line">        System.out.println(<span class="string">"------8进制-----"</span>);</span><br><span class="line">        <span class="keyword">int</span> a1 = <span class="number">010</span>;</span><br><span class="line">        <span class="keyword">int</span> b1 = <span class="number">020</span>;</span><br><span class="line">        System.out.println(a1);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        <span class="comment">// 十六进制</span></span><br><span class="line">        System.out.println(<span class="string">"------16进制-----"</span>);</span><br><span class="line">        <span class="keyword">int</span> a2 = <span class="number">0x10</span>;</span><br><span class="line">        <span class="keyword">int</span> b2 = <span class="number">0x20</span>;</span><br><span class="line">        System.out.println(a2);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">------2进制-----</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">------8进制-----</span><br><span class="line">8</span><br><span class="line">16</span><br><span class="line">------16进制-----</span><br><span class="line">16</span><br><span class="line">32</span><br></pre></td></tr></table></figure><h1 id="5-数字下划线"><a href="#5-数字下划线" class="headerlink" title="5. 数字下划线"></a>5. 数字下划线</h1><p>Java 7 开始支持在数字定义时候使用下划线分割，增加了数字的可读性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数字下环线</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.codingme.net</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberLine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1_000</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">1_0__0_0_0_____00</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1000</span><br><span class="line">1000000</span><br></pre></td></tr></table></figure><h1 id="6-结束语"><a href="#6-结束语" class="headerlink" title="6. 结束语"></a>6. 结束语</h1><p>虽然 Java 7 早在 2011 年就已经发布了，但是据我发现，使用到 Java 7 开始的新特性新语法的并不多，所以我的 JDK 新特性系列文章计划从 Java 7 开始，一直介绍到目前已经发布的  Java 13，以后 Java 新版本更新的同时，这个新特性系列文章也会持续更新。</p><p>此去山高水远，愿能一路坚持，愿你我一路同行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java 平台自出现到目前为止，已经 20 多个年头了，这 20 多年间 Java 也一直作为最流行的程序设计语言之一，不断面临着其他新兴编程语言的挑战与冲击。Java 语言是一种&lt;strong&gt;静态强类型&lt;/strong&gt;语言，这样的语言特性可以让 Java 编译器在&lt;strong&gt;编译阶段&lt;/strong&gt;发现错误，这对于构建出一个&lt;strong&gt;稳定安全且健壮&lt;/strong&gt;的应用来说，尤为重要。但是也因为这种特性，让 Java 开发似乎变得缺少灵活性，开发某些功能的应用时，代码量可能是其他语言的几倍。Java 开发的不足之处也体现越来越复杂的 JDK 上，越来越复杂的 JDK 让开发者完全理解的难度变的非常大。以至于开发者有时会重复实现一个 JDK 中已经提供了的功能。&lt;br&gt;
    
    </summary>
    
      <category term="Jdk 新特性" scheme="https://www.codingme.net/categories/Jdk-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java7" scheme="https://www.codingme.net/tags/Java7/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十七）迅速使用 Spring Boot Admin 监控你的 Spring Boot 程序</title>
    <link href="https://www.codingme.net/2019/12/springboot/springboot-17-admin/"/>
    <id>https://www.codingme.net/2019/12/springboot/springboot-17-admin/</id>
    <published>2019-12-23T00:08:08.000Z</published>
    <updated>2019-12-23T00:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-Boot-Admin-是什么"><a href="#1-Spring-Boot-Admin-是什么" class="headerlink" title="1. Spring Boot Admin 是什么"></a>1. Spring Boot Admin 是什么</h2><p>Spring Boot Admin 是由 <a href="github.com/codecentric">codecentric</a> 组织开发的开源项目，使用 Spring Boot Admin 可以管理和监控你的 Spring Boot 项目。它分为客户端和服务端两部分，客户端添加到你的 Spring Boot 应用增加暴漏相关信息的 HTTP 接口，然后注册到 Spring Boot Admin 服务端，这一步骤可以直接向服务端注册，也可以通过 Eureka 或者 Consul 进行注册。而 Spring Boot Admin Server 通过 Vue.js 程序监控信息进行可视化呈现。并且支持多种事件通知操作。<br><a id="more"></a></p><h2 id="2-Spring-Boot-Admin-服务端"><a href="#2-Spring-Boot-Admin-服务端" class="headerlink" title="2. Spring Boot Admin 服务端"></a>2. Spring Boot Admin 服务端</h2><p>Spring Boot Admin 服务端是基于 Spring Boot 项目的，如何创建一个 Spring Boot 项目这里不提，你可以参考之前文章或者从 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a>  直接获得一个 Spring Boot 项目。</p><h3 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1. 添加依赖"></a>2.1. 添加依赖</h3><p>只需要添加 web 依赖和 Spring-boot-admin-starter-server 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-启动配置"><a href="#2-2-启动配置" class="headerlink" title="2.2. 启动配置"></a>2.2. 启动配置</h3><p>为了和下面的客户端端口不冲突，先修改端口号为 9090。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><p>添加 <code>@EnableAdminServer</code> 注解启用 Spring Boot Admin Server 功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAdminServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootAdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端已经配置完成，启动项目进行访问就可以看到 Spring Boot Admin Server 的页面了。</p><p><img src="/assets/springboot-18-admin/image-20191221204941292.png" alt="Spring Boot Admin Server UI"></p><h2 id="3-Spring-Boot-Admin-客户端"><a href="#3-Spring-Boot-Admin-客户端" class="headerlink" title="3. Spring Boot Admin 客户端"></a>3. Spring Boot Admin 客户端</h2><p>创建 Spring Boot 项目依旧不提，这里只需要添加  Spring Boot Admin 客户端需要的依赖，在项目启动时就会增加相关的获取信息的 API 接口。然后在 Spring Boot 配置文件中配置 Spring Boot Admin 服务端，就可以进行监控了。</p><h3 id="3-1-客户端依赖"><a href="#3-1-客户端依赖" class="headerlink" title="3.1 客户端依赖"></a>3.1 客户端依赖</h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Lombok 工具,与 admin client 无关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-客户端配置"><a href="#3-2-客户端配置" class="headerlink" title="3.2 客户端配置"></a>3.2 客户端配置</h3><p>客户端配置主要为了让客户端可以成功向服务端注册，所以需要配置客户端所在应用相关信息以及 Spring Boot Admin Server 服务端的 url。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sjfx-api-search</span></span><br><span class="line"><span class="attr">  jmx:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line">        <span class="comment"># 服务端 url</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://127.0.0.1:9090</span></span><br><span class="line"><span class="attr">        instance:</span></span><br><span class="line">          <span class="comment"># 客户端实例 url</span></span><br><span class="line"><span class="attr">          service-url:</span> <span class="attr">http://127.0.0.1:8080</span></span><br><span class="line"><span class="attr">          prefer-ip:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 客户端实例名称</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">sjfx-api-search</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line">      <span class="comment"># 暴漏的接口 - 所有接口</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>配置中的  <code>include: &quot;*&quot;</code> 公开了所有的端口，对于生产环境，应该自信的选择要公开的接口。</p><p>Spring Boot Admin 可以获取应用中的定时任务，所以在代码中增加一个定时任务计划，每 20 秒输出一次当前时间，日志级别为 <code>INFO</code>，用于下面的定时任务和日志监控测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAdminClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootAdminClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/20 * * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run20s</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"定时任务:&#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-客户端运行"><a href="#3-3-客户端运行" class="headerlink" title="3.3. 客户端运行"></a>3.3. 客户端运行</h3><p>启动客户端会暴漏相关的运行状态接口，并且自动向配置的服务端发送注册信息。</p><p>下面是客户端的启动日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2019-12-21 22:45:32.878  INFO 13204 --- [           main] n.c.b.SpringbootAdminClientApplication   : Starting SpringbootAdminClientApplication on DESKTOP-8SCFV4M with PID 13204 (D:\IdeaProjectMy\springboot-git\springboot-admin\springboot-admin-client\target\classes started by 83981 in D:\IdeaProjectMy\springboot-git\springboot-admin)</span><br><span class="line">2019-12-21 22:45:32.881  INFO 13204 --- [           main] n.c.b.SpringbootAdminClientApplication   : No active profile set, falling back to default profiles: default</span><br><span class="line">2019-12-21 22:45:33.627  INFO 13204 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2019-12-21 22:45:33.634  INFO 13204 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2019-12-21 22:45:33.634  INFO 13204 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]</span><br><span class="line">2019-12-21 22:45:33.706  INFO 13204 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2019-12-21 22:45:33.706  INFO 13204 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 797 ms</span><br><span class="line">2019-12-21 22:45:33.850  INFO 13204 --- [           main] o.s.b.a.e.web.ServletEndpointRegistrar   : Registered &apos;/actuator/jolokia&apos; to jolokia-actuator-endpoint</span><br><span class="line">2019-12-21 22:45:33.954  INFO 13204 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &apos;applicationTaskExecutor&apos;</span><br><span class="line">2019-12-21 22:45:34.089  INFO 13204 --- [           main] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService</span><br><span class="line">2019-12-21 22:45:34.117  INFO 13204 --- [           main] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService &apos;taskScheduler&apos;</span><br><span class="line">2019-12-21 22:45:34.120  INFO 13204 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 15 endpoint(s) beneath base path &apos;/actuator&apos;</span><br><span class="line">2019-12-21 22:45:34.162  INFO 13204 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br><span class="line">2019-12-21 22:45:34.163  INFO 13204 --- [           main] n.c.b.SpringbootAdminClientApplication   : Started SpringbootAdminClientApplication in 1.563 seconds (JVM running for 2.131)</span><br><span class="line">2019-12-21 22:45:34.271  INFO 13204 --- [gistrationTask1] d.c.b.a.c.r.ApplicationRegistrator       : Application registered itself as 6bcf19a6bf8c</span><br><span class="line">2019-12-21 22:45:34.293  INFO 13204 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &apos;dispatcherServlet&apos;</span><br><span class="line">2019-12-21 22:45:34.294  INFO 13204 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &apos;dispatcherServlet&apos;</span><br><span class="line">2019-12-21 22:45:34.300  INFO 13204 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms</span><br></pre></td></tr></table></figure><p>从启动日志里的 <code>Exposing 15 endpoint(s) beneath base path &#39;/actuator&#39;</code> 这段，可以看到暴漏了 15 个 <code>/actuator</code> 的 API 接口，可以直接访问查看响应结果。</p><p><img src="/assets/springboot-18-admin/image-20191221224351221.png" alt="Spring Boot Admin Client 监测接口"></p><p>从日志 <code>Application registered itself as 6bcf19a6bf8c</code> 可以看到客户端已经注册成功了。再看服务端可以看到注册上来的一个应用实例。</p><p><img src="/assets/springboot-18-admin/image-20191221225022655.png" alt="Spring Boot Admin Server"></p><h2 id="4-Spring-Boot-Admin-功能"><a href="#4-Spring-Boot-Admin-功能" class="headerlink" title="4. Spring Boot Admin 功能"></a>4. Spring Boot Admin 功能</h2><p>点击监控页面上的在线的应用实例，可以跳转到应用实例详细的监控管理页面，也就是 Vue.js 实现的 web 展示。</p><p><img src="/assets/springboot-18-admin/image-20191222180411114.png" alt="Spring Boot Admin Server 监控页面"></p><p>Spring Boot Admin Server 可以监控的功能很多，使用起来没有难度，下面描述下可以监测的部分内容：</p><ul><li>应用运行状态，如时间、垃圾回收次数，线程数量，内存使用走势。</li><li>应用性能监测，通过选择 JVM 或者 Tomcat 参数，查看当前数值。</li><li>应用环境监测，查看系统环境变量，应用配置参数，自动配置参数。</li><li>应用 bean 管理，查看 Spring Bean ，并且可以查看是否单例。</li><li>应用计划任务，查看应用的计划任务列表。</li><li>应用日志管理，动态更改日志级别，查看日志。</li><li>应用 JVM 管理，查看当前线程运行情况，dump 内存堆栈信息。</li><li>应用映射管理，查看应用接口调用方法、返回类型、处理类等信息。</li></ul><p>上面提到的日志管理，可以动态的更改日志级别，以及查看日志。默认配置下是只可以动态更改日志级别的，如果要在线查看日志，就需要手动配置日志路径了。</p><p>客户端上可以像下面这样配置日志路径以及日志高亮。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件：application.yml</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  file:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">boot.log</span></span><br><span class="line"><span class="attr">  pattern:</span></span><br><span class="line"><span class="comment">#     日志高亮</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">'%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr(%5p) %clr($&#123;PID&#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n%wEx'</span></span><br></pre></td></tr></table></figure><p>下面是在 Spring Boot Admin 监测页面上查看的客户端应用日志。</p><p><img src="/assets/springboot-18-admin/image-20191222193212726.png" alt="Spring Boot Admin Server 查看日志"></p><h2 id="5-Spring-Boot-Admin-进阶"><a href="#5-Spring-Boot-Admin-进阶" class="headerlink" title="5. Spring Boot Admin 进阶"></a>5. Spring Boot Admin 进阶</h2><h3 id="5-1-邮件通知"><a href="#5-1-邮件通知" class="headerlink" title="5.1. 邮件通知"></a>5.1. 邮件通知</h3><p>Spring Boot Admin Server  支持常见的通知方式，比如邮件通知、电报通知、PagerDuty 通知等，下面将会演示常见的通知方式 - 邮件通知，最后也会演示如何通过监听时间进下设置自定义通知方式。</p><p>Spring Boot Admin Server 的邮件通知通过 Thymeleaf 模板发送 HTML 格式的电子邮件。因此，想要使用邮件通知首先要引入 Thymeleaf 依赖以及 <code>spring-boot-starter-mail</code> 依赖，并配置邮件发送者信息和接受者信息。</p><p> <strong>1. 添加依赖</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Thymeleaf 模版，用于发送模版邮件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2. 配置邮件</strong></p><p>主要设置发送者信息和接收者信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      notify:</span><br><span class="line">        mail:</span><br><span class="line">          # 逗号分隔的邮件收件人列表</span><br><span class="line">          to: xxxx@126.com</span><br><span class="line">          # 开启邮箱通知</span><br><span class="line">          enabled: true</span><br><span class="line">          # 不需要发送通知的状态：从状态A:到状态B</span><br><span class="line">          ignore-changes: &#123;&quot;UNKNOWN:UP&quot;&#125;</span><br><span class="line">          # 逗号分隔的抄送收件人列表</span><br><span class="line">          cc: xxxx@126.com</span><br><span class="line">          # 发件人</span><br><span class="line">          from: Spring Boot Admin&lt;xxxx@126.com&gt;</span><br><span class="line">          </span><br><span class="line"># 邮件发送者信息</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.126.com</span><br><span class="line">    port: 25</span><br><span class="line">    username: xxxx@126.com</span><br><span class="line">    default-encoding: utf-8</span><br><span class="line">    password: xxxx</span><br></pre></td></tr></table></figure><p>如果想了解更多关于 Spring Boot 邮件发送信息，可以参考 <a href="https://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483764&amp;idx=1&amp;sn=8cee8b1781b8659b3fdc23c0d650db49&amp;chksm=e984e810def3610640e741eea1f94bbf95d4a2a5b1c68946829a036b4a6bc58b0d23e156474a&amp;token=971841717&amp;lang=zh_CN#rd" target="_blank" rel="noopener">Spring Boot 系列文章第十三篇</a>。</p><p>配置好邮件通知之后，重启服务端和客户端，等客户端注册到服务端之后直接终止客户端的运行，稍等片刻就可以在配置的通知接收邮箱里收到客户端实例下线通知了。</p><p><img src="/assets/springboot-18-admin/image-20191222215118514.png" alt="Sping Boot Admin Server 邮件通知"></p><p>邮件通知使用的模板存放在 server 依赖的 classpath:/META-INF/spring-boot-admin-server/mail/status-changed.html 路径，如果想要自定义模板内容。可以拷贝这个文件放到自己的 templates 目录下，修改成自己想要的效果，然后在配置中指定自定义模板路径。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      notify:</span></span><br><span class="line"><span class="attr">        mail:</span></span><br><span class="line">          <span class="comment"># 自定义邮件模版</span></span><br><span class="line"><span class="attr">          template:</span> <span class="attr">classpath:/templates/notify.html</span></span><br></pre></td></tr></table></figure><h3 id="5-2-自定义通知"><a href="#5-2-自定义通知" class="headerlink" title="5.2 自定义通知"></a>5.2 自定义通知</h3><p>自定义通知只需要自己实现 Spring Boot Admin Server 提供的监听通知类即可，下面会演示如何在实例状态改变时输出实例相关信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.entities.Instance;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.entities.InstanceRepository;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.events.InstanceEvent;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.events.InstanceStatusChangedEvent;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.notify.AbstractEventNotifier;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.notify.LoggingNotifier;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomNotifier</span> <span class="keyword">extends</span> <span class="title">AbstractEventNotifier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LoggingNotifier.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomNotifier</span><span class="params">(InstanceRepository repository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(repository);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Mono&lt;Void&gt; <span class="title">doNotify</span><span class="params">(InstanceEvent event, Instance instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> InstanceStatusChangedEvent) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">"Instance &#123;&#125; (&#123;&#125;) is &#123;&#125;"</span>, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                    ((InstanceStatusChangedEvent)event).getStatusInfo().getStatus());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LOGGER.info(<span class="string">"Instance &#123;&#125; (&#123;&#125;) &#123;&#125;"</span>, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                    event.getType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-访问限制"><a href="#5-2-访问限制" class="headerlink" title="5.2. 访问限制"></a>5.2. 访问限制</h3><p>上面提到过，因为客户端增加了暴漏运行信息的相关接口，所以在生产环境中使用存在风险，而服务端没有访问限制，谁的可以访问也是不合理的。</p><p>下面将会为客户端和服务端分别增加访问限制，客户端主要是限制敏感接口的访问权限，服务端则是全局的访问限制。这些访问限制都通过 spring 安全框架 security 来实现，所以首先要为客户端和服务端都增加 maven 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>1. 服务端</strong></p><p>在引入安全框架依赖之后，需要配置访问控制，比如静态资源不需要限制，登录登出页面指定等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.config.AdminServerProperties;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AdminServerProperties adminServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminServer = adminServer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// @formatter:off</span></span><br><span class="line">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">        successHandler.setTargetUrlParameter(<span class="string">"redirectTo"</span>);</span><br><span class="line">        successHandler.setDefaultTargetUrl(<span class="keyword">this</span>.adminServer.path(<span class="string">"/"</span>));</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="keyword">this</span>.adminServer.path(<span class="string">"/assets/**"</span>)).permitAll()</span><br><span class="line">                .antMatchers(<span class="keyword">this</span>.adminServer.path(<span class="string">"/login"</span>)).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin().loginPage(<span class="keyword">this</span>.adminServer.path(<span class="string">"/login"</span>)).successHandler(successHandler).and()</span><br><span class="line">                .logout().logoutUrl(<span class="keyword">this</span>.adminServer.path(<span class="string">"/logout"</span>)).and()</span><br><span class="line">                .httpBasic().and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())</span><br><span class="line">                .ignoringRequestMatchers(</span><br><span class="line">                        <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">"/instances"</span>), HttpMethod.POST.toString()),</span><br><span class="line">                        <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">"/instances/*"</span>), HttpMethod.DELETE.toString()),</span><br><span class="line">                        <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">"/actuator/**"</span>))</span><br><span class="line">                )</span><br><span class="line">                .and()</span><br><span class="line">                .rememberMe().key(UUID.randomUUID().toString()).tokenValiditySeconds(<span class="number">1209600</span>);</span><br><span class="line">        <span class="comment">// @formatter:on</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码配置用户名和密码的方式</span></span><br><span class="line">    <span class="comment">// Required to provide UserDetailsService for "remember functionality"</span></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span></span><br><span class="line">    <span class="comment">// auth.inMemoryAuthentication().withUser("user").password("&#123;noop&#125;password").roles("USER");</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 application.yml 配置文件中配置用户名和密码。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>重启服务端，再次访问就需要用户名和密码进行登录了。 </p><p><img src="/assets/springboot-18-admin/image-20191222222408380.png" alt="Spring Boot Admin Server 登录"></p><p><strong>2. 客户端</strong></p><p>客户端在引入安全框架之后，也需要配置访问权限，主要是配置哪些路径可以访问，哪些路径访问需要登录限制，默认所有接口都需要登录限制。</p><p>同样的，客户端应用也需要在配置中配置客户端应用对于敏感接口的登录用户和密码，同时需要配置 Spring Boot Admin Server 的访问用户和密码，还要把自身的用户和密码注册时告诉服务端，不然服务端不能获取到监测数据。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line">      <span class="comment"># 客户端敏感接口用户和密码</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">client</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sjfx-api-search</span></span><br><span class="line"><span class="attr">  jmx:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  boot:</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      client:</span></span><br><span class="line">        <span class="comment"># 服务端 url</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://127.0.0.1:9090</span></span><br><span class="line"><span class="attr">        instance:</span></span><br><span class="line">          <span class="comment"># 客户端实例 url</span></span><br><span class="line"><span class="attr">          service-url:</span> <span class="attr">http://127.0.0.1:8080</span></span><br><span class="line"><span class="attr">          prefer-ip:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 客户端实例名称</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">sjfx-api-search</span></span><br><span class="line"><span class="attr">          metadata:</span></span><br><span class="line">            <span class="comment"># 客户端自身的用户和密码告诉服务端</span></span><br><span class="line">            <span class="string">user.name:</span> <span class="string">client</span></span><br><span class="line">            <span class="string">user.password:</span> <span class="number">123</span></span><br><span class="line">        <span class="comment"># 服务端用户名密码</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">        password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>客户端敏感接口访问测试。</p><p><img src="/assets/springboot-18-admin/image-20191222232720674.png" alt="客户端应用访问"></p><p>到这里，客户端的敏感接口访问需要登录，服务端的管理页面也需要登录，客户端和服务端的访问控制已经完成了。</p><p>文中代码已经上传到：<a href="github.com/niumoo/springboot/tree/master/springboot-admin">github.com/niumoo/springboot/tree/master/springboot-admin</a></p><p><strong>参考资料：</strong></p><p><a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener">https://github.com/codecentric/spring-boot-admin</a></p><p><a href="https://codecentric.github.io/spring-boot-admin/current/" target="_blank" rel="noopener">https://codecentric.github.io/spring-boot-admin/current/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Spring-Boot-Admin-是什么&quot;&gt;&lt;a href=&quot;#1-Spring-Boot-Admin-是什么&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Boot Admin 是什么&quot;&gt;&lt;/a&gt;1. Spring Boot Admin 是什么&lt;/h2&gt;&lt;p&gt;Spring Boot Admin 是由 &lt;a href=&quot;github.com/codecentric&quot;&gt;codecentric&lt;/a&gt; 组织开发的开源项目，使用 Spring Boot Admin 可以管理和监控你的 Spring Boot 项目。它分为客户端和服务端两部分，客户端添加到你的 Spring Boot 应用增加暴漏相关信息的 HTTP 接口，然后注册到 Spring Boot Admin 服务端，这一步骤可以直接向服务端注册，也可以通过 Eureka 或者 Consul 进行注册。而 Spring Boot Admin Server 通过 Vue.js 程序监控信息进行可视化呈现。并且支持多种事件通知操作。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="工具" scheme="https://www.codingme.net/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="监控" scheme="https://www.codingme.net/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>超好用的自带火焰图的 Java 性能分析工具 Async-profiler 了解一下</title>
    <link href="https://www.codingme.net/2019/12/async-profiler/"/>
    <id>https://www.codingme.net/2019/12/async-profiler/</id>
    <published>2019-12-09T00:55:08.000Z</published>
    <updated>2019-12-18T05:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20191209082448987.png" alt="火焰图"></p><p>如果你经常遇到  Java 线上性能问题束手无策，看着线上服务 CPU 飙升一筹莫展，发现内存不断泄露满脸茫然。别慌，这里有一款低开销、自带<strong>火焰图</strong>、让你大呼好用的 Java 性能分析工具 - <strong>async-profiler</strong>。</p><p>最近 Arthas 性能分析工具上线了<strong>火焰图</strong>分析功能，Arthas 使用  <strong>async-profiler</strong> 生成 CPU/内存火焰图进行性能分析，弥补了之前内存分析的不足。在 Arthas 上使用还是比较方便的，使用方式可以看官方文档。这篇文章介绍  <strong>async-profiler</strong> 相关内容。</p><p>Arthas 火焰图官方文档：<a href="https://alibaba.github.io/arthas/profiler.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/profiler.html</a></p><p>如果你想了解更多 Arthas 信息，可以参考之前文章：<a href="http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483907&amp;idx=1&amp;sn=653ecea3697873ad1f5c4f567034a1c3&amp;chksm=e984eb67def362715c0a01bc08e1491f7e8f892e92826406484174da264cb06bbc1c05cf30f6&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Arthas - Java 线上问题定位处理的终极利器</a></p><a id="more"></a><h2 id="async-profiler-介绍"><a href="#async-profiler-介绍" class="headerlink" title="async-profiler 介绍"></a>async-profiler 介绍</h2><p>async-profiler 是一款开源的 Java <strong>性能分析工具</strong>，原理是基于 HotSpot 的 API，以<strong>微乎其微的性能开销</strong>收集程序运行中的堆栈信息、内存分配等信息进行分析。</p><p>使用 async-profiler 可以做下面几个方面的分析。</p><ul><li><strong>CPU cycles</strong></li><li>Hardware and Software performance counters like cache misses, branch misses, page faults, context switches etc.</li><li><strong>Allocations in Java Heap</strong></li><li>Contented lock attempts, including both Java object monitors and ReentrantLocks</li></ul><p>我们常用的是 CPU 性能分析和 Heap 内存分配分析。在进行 CPU 性能分析时，仅需要<strong>非常低的性能开销</strong>就可以进行分析，这也是这个工具的优点之一。</p><p>在进行 Heap 分配分析时，async-profiler 工具会收集内存分配信息，而不是去检测占用 CPU 的代码。async-profiler 不使用侵入性的技术，例如字节码检测工具或者探针检测等，这也说明 async-profiler 的内存分配分析像 CPU 性能分析一样，不会产生太大的性能开销，同时也不用写出<strong>庞大的堆栈文件</strong>再去进行进一步处理，。</p><p>async-profile 目前支持 Linux 和 macOS 平台（macOS 下只能分析用户空间的代码）。</p><ul><li><strong>Linux</strong> / x64 / x86 / ARM / AArch64</li><li><strong>macOS</strong> / x64</li></ul><p>async-profiler 工具在采样后可以生成采样结果的日志报告，也可以生成 SVG 格式的<strong>火焰图</strong>，在之前生成<strong>火焰图</strong>要使用 <a href="https://github.com/brendangregg/FlameGraph" target="_blank" rel="noopener">FlameGraph</a> 工具。现在已经不需要了，从 1.2 版本开始，就已经内置了开箱即用的 SVG 文件生成功能。</p><p>其他信息可以看官方文档：<a href="https://github.com/jvm-profiling-tools/async-profiler" target="_blank" rel="noopener">https://github.com/jvm-profiling-tools/async-profiler</a></p><h2 id="async-profiler-安装"><a href="#async-profiler-安装" class="headerlink" title="async-profiler 安装"></a>async-profiler 安装</h2><p>下载 async-profiler 工具可以在官方的 Github 上直接下载编译好的文件，如果你就是想体验手动挡的感觉，也可以克隆项目，手动编译一下，不得不说这个工具十分的易用，我在手动编译的过程十分顺滑，没有出现任何问题。</p><p>如果你想下载编译好的，可以到这里下载。</p><p><a href="https://github.com/jvm-profiling-tools/async-profiler/releases" target="_blank" rel="noopener">https://github.com/jvm-profiling-tools/async-profiler/releases</a></p><p>如果想体验手动挡的感觉，可以克隆整个项目，进项项目编译。</p><p>手动编译的环境要求。</p><ul><li>JDK</li><li>GCC</li></ul><p>下面是手动安装的操作命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jvm-profiling-tools/async-profiler</span><br><span class="line">cd async-profiler</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>执行 make 命令编译后会在项目的目录下生成一个 build 文件夹，里面存放着编译的结果。下面是我手动编译的过程输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  develop git clone https://github.com/jvm-profiling-tools/async-profiler</span><br><span class="line">Cloning into 'async-profiler'...</span><br><span class="line">remote: Enumerating objects: 69, done.</span><br><span class="line">remote: Counting objects: 100% (69/69), done.</span><br><span class="line">remote: Compressing objects: 100% (54/54), done.</span><br><span class="line">remote: Total 1805 (delta 34), reused 32 (delta 15), pack-reused 1736</span><br><span class="line">Receiving objects: 100% (1805/1805), 590.78 KiB | 23.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (1288/1288), done.</span><br><span class="line">➜  develop cd async-profiler</span><br><span class="line">➜  async-profiler git:(master) make</span><br><span class="line">mkdir -p build</span><br><span class="line">g++ -O2 -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE -DPROFILER_VERSION=\"1.6\" -I/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/include/darwin -fPIC -shared -o build/libasyncProfiler.so src/*.cpp -ldl -lpthread</span><br><span class="line">gcc -O2 -DJATTACH_VERSION=\"1.5\" -o build/jattach src/jattach/jattach.c</span><br><span class="line">mkdir -p build/classes</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin/javac -source 6 -target 6 -d build/classes src/java/one/profiler/AsyncProfiler.java src/java/one/profiler/AsyncProfilerMXBean.java src/java/one/profiler/Counter.java src/java/one/profiler/Events.java</span><br><span class="line">警告: [options] 未与 -source 1.6 一起设置引导类路径</span><br><span class="line">1 个警告</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin/jar cvf build/async-profiler.jar -C build/classes .</span><br><span class="line">已添加清单</span><br><span class="line">正在添加: one/(输入 = 0) (输出 = 0)(存储了 0%)</span><br><span class="line">正在添加: one/profiler/(输入 = 0) (输出 = 0)(存储了 0%)</span><br><span class="line">正在添加: one/profiler/AsyncProfiler.class(输入 = 1885) (输出 = 908)(压缩了 51%)</span><br><span class="line">正在添加: one/profiler/Events.class(输入 = 405) (输出 = 286)(压缩了 29%)</span><br><span class="line">正在添加: one/profiler/Counter.class(输入 = 845) (输出 = 473)(压缩了 44%)</span><br><span class="line">正在添加: one/profiler/AsyncProfilerMXBean.class(输入 = 631) (输出 = 344)(压缩了 45%)</span><br><span class="line">rm -rf build/classes</span><br><span class="line">➜  async-profiler git:(master)</span><br></pre></td></tr></table></figure><h2 id="async-profiler-使用"><a href="#async-profiler-使用" class="headerlink" title="async-profiler 使用"></a>async-profiler 使用</h2><p>运行项目里的 profiler.sh 可以看到 async-profiler 的使用帮助文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">➜  async-profiler git:(master) ./profiler.sh</span><br><span class="line">Usage: ./profiler.sh [action] [options] &lt;pid&gt;</span><br><span class="line">Actions:</span><br><span class="line">  start             start profiling and return immediately</span><br><span class="line">  resume            resume profiling without resetting collected data</span><br><span class="line">  stop              stop profiling</span><br><span class="line">  status            print profiling status</span><br><span class="line">  list              list profiling events supported by the target JVM</span><br><span class="line">  collect           collect profile for the specified period of time</span><br><span class="line">                    and then stop (default action)</span><br><span class="line">Options:</span><br><span class="line">  -e event          profiling event: cpu|alloc|lock|cache-misses etc.</span><br><span class="line">  -d duration       run profiling for &lt;duration&gt; seconds</span><br><span class="line">  -f filename       dump output to &lt;filename&gt;</span><br><span class="line">  -i interval       sampling interval in nanoseconds</span><br><span class="line">  -j jstackdepth    maximum Java stack depth</span><br><span class="line">  -b bufsize        frame buffer size</span><br><span class="line">  -t                profile different threads separately</span><br><span class="line">  -s                simple class names instead of FQN</span><br><span class="line">  -g                print method signatures</span><br><span class="line">  -a                annotate Java method names</span><br><span class="line">  -o fmt            output format: summary|traces|flat|collapsed|svg|tree|jfr</span><br><span class="line">  -v, --version     display version string</span><br><span class="line"></span><br><span class="line">  --title string    SVG title</span><br><span class="line">  --width px        SVG width</span><br><span class="line">  --height px       SVG frame height</span><br><span class="line">  --minwidth px     skip frames smaller than px</span><br><span class="line">  --reverse         generate stack-reversed FlameGraph / Call tree</span><br><span class="line"></span><br><span class="line">  --all-kernel      only include kernel-mode events</span><br><span class="line">  --all-user        only include user-mode events</span><br><span class="line">  --sync-walk       use synchronous JVMTI stack walker (dangerous!)</span><br><span class="line"></span><br><span class="line">&lt;pid&gt; is a numeric process ID of the target JVM</span><br><span class="line">      or 'jps' keyword to find running JVM automatically</span><br><span class="line"></span><br><span class="line">Example: ./profiler.sh -d 30 -f profile.svg 3456</span><br><span class="line">         ./profiler.sh start -i 999000 jps</span><br><span class="line">         ./profiler.sh stop -o summary,flat jps</span><br></pre></td></tr></table></figure><p>可以看到使用的方式是：Usage: ./profiler.sh [action] [options] <pid>，也就是 <strong>命令+操作+参数+PID</strong>。</pid></p><p>常用的使用的几个步骤：</p><ol><li>查看 java 进程的 PID（可以使用 jps ）。</li><li>使用 ./profiler.sh start <pid> 开始采样。</pid></li><li>使用 ./profiler.sh status <pid> 查看已经采样的时间。</pid></li><li>使用 ./profiler.sh stop <pid> 停止采样，输出结果。</pid></li></ol><p>这种方式使用起来多费劲啊，而且最后输出的是文本结果，看起来更是费劲，为了不那么费劲，可以使用帮助里给的采样后生成 SVG 文件例子。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./profiler.sh -d 30 -f profile.svg 3456</span><br></pre></td></tr></table></figure><p>这个命令的意思是，对 PID 为 3456 的 java 进程采样 30 秒，然后生成 profile.svg 结果文件。</p><p>默认情况下是分析 CPU 性能，如果要进行其他分析，可以使用 -e 参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e event     profiling event: cpu|alloc|lock|cache-misses etc.</span><br></pre></td></tr></table></figure><p>可以看到支持的分析事件有 CPU、Alloc、Lock、Cache-misses 。</p><h2 id="async-profiler-案例"><a href="#async-profiler-案例" class="headerlink" title="async-profiler 案例"></a>async-profiler 案例</h2><p>上面说完了 async-profiler 工具的作用和使用方式，既然能进行 CPU 性能分析和 Heap 内存分配分析，那么我们就写几个不一般的方法分析试试看。看看是不是有像上面介绍的那么好用。</p><h3 id="Java-案例编码"><a href="#Java-案例编码" class="headerlink" title="Java 案例编码"></a>Java 案例编码</h3><p>很简单的几个方法，hotmethod 方法写了几个常见操作，三个方法中很明显 hotmethod3 方法里的生成 UUID 和 replace（需要正则匹配）操作消耗的 CPU 性能会较多。allocate 方法里因为要不断的创建长度为 6万的数组，消耗的内存空间一定是最多的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 模拟热点代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            hotmethod1();</span><br><span class="line">            hotmethod2();</span><br><span class="line">            hotmethod3();</span><br><span class="line">            allocate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 6万长度的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allocate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span> * <span class="number">1000</span>];</span><br><span class="line">        array = <span class="keyword">new</span> Integer[<span class="number">6</span> * <span class="number">1000</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成一个UUID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hotmethod3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        UUID uuid = UUID.randomUUID();</span><br><span class="line">        String str = uuid.toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        list.add(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字累加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hotmethod2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        value++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成一个随机数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hotmethod1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> anInt = random.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CPU-性能分析"><a href="#CPU-性能分析" class="headerlink" title="CPU 性能分析"></a>CPU 性能分析</h3><p>运行上面的程序，然后使用 JPS 命令查看 PID 信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  develop jps</span><br><span class="line">2800 Jps</span><br><span class="line">2449 HotCode</span><br><span class="line">2450 Launcher</span><br><span class="line">805 RemoteMavenServer36</span><br><span class="line">470 NutstoreGUI</span><br><span class="line">699</span><br><span class="line">➜  develop</span><br></pre></td></tr></table></figure><p>上面运行的类名是 HotCode，可以看到对应的 PID 是 2449。</p><p>使用 <code>./profiler.sh -d 20 -f 2449.svg 2449</code> 命令对 2449 号进程采样20秒，然后得到生成的 2449.svg 文件，然后我们使用浏览器打开这个文件，可以看到 CPU 的使用<strong>火焰图</strong>。</p><p><img src="/assets/image-20191208225253486.png" alt="CPU 使用火焰图"></p><p>关于火焰图怎么看，一言以蔽之：<strong>火焰图里，横条越长，代表使用的越多，从下到上是调用堆栈信息</strong>。在这个图里可以看到 main 方法上面的调用中 hotmethod3 方法的 CPU 使用是最多的，点击这个方法。还可能看到更详细的信息。</p><p><img src="/assets/image-20191208225613748.png" alt="hotmethod3 CPU 火焰图"></p><p>可以看到 replace 方法占用的 CPU 最多，也是程序中性能问题所在，是需要注意的地方。</p><h3 id="Heap-内存分析"><a href="#Heap-内存分析" class="headerlink" title="Heap 内存分析"></a>Heap 内存分析</h3><p>还是上面运行的程序，进程 PID 还是 2449，这次使用 -e 参数分析内存使用情况。</p><p>命令：<code>./profiler.sh -d 20 -e alloc -f 2449-alloc.svg 2449</code></p><p>命令的意思是收集进程号是 2449 的进程的内存信息 20 秒，然后输出为 2449-alloc.svg 文件。20秒后得到 svg 文件使用浏览器打开，可以看到内存分配情况。</p><p><img src="/assets/image-20191208230100288.png" alt="内存分配火焰图"></p><p>依旧是横条越长，代表使用的越多，从下到上是调用堆栈信息。从图里可以看出来 main 方法调用的 allocate 方法使用的内存最多，这个方法里的 Integer 类型数组占用的内存又最多，为 71%。</p><p>文中测试代码已经上传到 Github：<a href="https://github.com/niumoo/lab-notes" target="_blank" rel="noopener">https://github.com/niumoo/lab-notes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/image-20191209082448987.png&quot; alt=&quot;火焰图&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你经常遇到  Java 线上性能问题束手无策，看着线上服务 CPU 飙升一筹莫展，发现内存不断泄露满脸茫然。别慌，这里有一款低开销、自带&lt;strong&gt;火焰图&lt;/strong&gt;、让你大呼好用的 Java 性能分析工具 - &lt;strong&gt;async-profiler&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;最近 Arthas 性能分析工具上线了&lt;strong&gt;火焰图&lt;/strong&gt;分析功能，Arthas 使用  &lt;strong&gt;async-profiler&lt;/strong&gt; 生成 CPU/内存火焰图进行性能分析，弥补了之前内存分析的不足。在 Arthas 上使用还是比较方便的，使用方式可以看官方文档。这篇文章介绍  &lt;strong&gt;async-profiler&lt;/strong&gt; 相关内容。&lt;/p&gt;
&lt;p&gt;Arthas 火焰图官方文档：&lt;a href=&quot;https://alibaba.github.io/arthas/profiler.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://alibaba.github.io/arthas/profiler.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你想了解更多 Arthas 信息，可以参考之前文章：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;amp;mid=2247483907&amp;amp;idx=1&amp;amp;sn=653ecea3697873ad1f5c4f567034a1c3&amp;amp;chksm=e984eb67def362715c0a01bc08e1491f7e8f892e92826406484174da264cb06bbc1c05cf30f6&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arthas - Java 线上问题定位处理的终极利器&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生产工具" scheme="https://www.codingme.net/categories/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="性能分析" scheme="https://www.codingme.net/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十六）你真的了解 Swagger 文档吗？</title>
    <link href="https://www.codingme.net/2019/11/springboot/springboot-16-web-swagger/"/>
    <id>https://www.codingme.net/2019/11/springboot/springboot-16-web-swagger/</id>
    <published>2019-11-26T00:08:08.000Z</published>
    <updated>2019-11-26T00:47:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前来说，在 Java 领域使用 <code>Springboot</code> 构建微服务是比较流行的，在构建微服务时，我们大多数会选择暴漏一个 <code>REST API</code> 以供调用。又或者公司采用前后端分离的开发模式，让前端和后端的工作由完全不同的工程师进行开发完成。不管是微服务还是这种前后端分离开发，维持一份完整的及时更新的 <code>REST API</code> 文档，会极大的提高我们的工作效率。而传统的文档更新方式（如手动编写），很难保证文档的及时性，经常会年久失修，失去应有的意义。因此选择一种新的 API 文档维护方式很有必要，这也是这篇文章要介绍的内容。<br><a id="more"></a></p><h2 id="1-OpenAPI-规范介绍"><a href="#1-OpenAPI-规范介绍" class="headerlink" title="1. OpenAPI  规范介绍"></a>1. OpenAPI  规范介绍</h2><p><img src="/assets/oas_original-01.png" alt="Open API"></p><p><code>OpenAPI Specification</code> 简称 OAS，中文也称  <code>OpenAPI</code> 描述规范，使用 <code>OpenAPI</code> 文件可以描述整个 API，它制定了一套的适合通用的与语言无关的 <code>REST API</code> 描述规范，如 API 路径规范、请求方法规范、请求参数规范、返回格式规范等各种相关信息，使人类和计算机都可以不需要访问源代码就可以理解和使用服务的功能。</p><p>下面是 <code>OpenAPI</code> 规范中建议的 API 设计规范，基本路径设计规范。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v1/users?role=admin&amp;status=active</span><br><span class="line">\________________________/\____/ \______________________/</span><br><span class="line">         server URL       endpoint    query parameters</span><br><span class="line">                            path</span><br></pre></td></tr></table></figure></p><p>对于传参的设计也有规范，可以像下面这样：</p><ul><li><a href="https://swagger.io/docs/specification/describing-parameters/#path-parameters" target="_blank" rel="noopener">路径参数</a>, 例如 <code>/users/{id}</code></li><li><a href="https://swagger.io/docs/specification/describing-parameters/#query-parameters" target="_blank" rel="noopener">查询参数</a>, 例如 <code>/users?role=未读代码</code></li><li><a href="https://swagger.io/docs/specification/describing-parameters/#header-parameters" target="_blank" rel="noopener">header 参数</a>, 例如 <code>X-MyHeader: Value</code></li><li><a href="https://swagger.io/docs/specification/describing-parameters/#cookie-parameters" target="_blank" rel="noopener">cookie 参数</a>,  例如 <code>Cookie: debug=0; csrftoken=BUSe35dohU3O1MZvDCU</code></li></ul><p><code>OpenAPI</code> 规范的东西远远不止这些，目前 <code>OpenAPI</code> 规范最新版本是 3.0.2，如果你想了解更多的 <code>OpenAPI</code> 规范，可以访问下面的链接。<br><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md" target="_blank" rel="noopener">OpenAPI Specification (https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md)</a></p><h2 id="2-Swagger-介绍"><a href="#2-Swagger-介绍" class="headerlink" title="2. Swagger 介绍"></a>2. Swagger 介绍</h2><p><img src="/assets/image-20191125225207292.png" alt="swagger"></p><p>很多人都以为 <code>Swagger</code> 只是一个接口文档生成框架，其实并不是。 Swagger  是一个围绕着 <code>OpenAPI Specification</code>（OAS，中文也称 OpenAPI规范）构建的一组开源工具。可以帮助你从 API 的设计到 API 文档的输出再到  API 的测试，直至最后的 API 部署等整个 API 的开发周期提供相应的解决方案，是一个庞大的项目。 Swagger  不仅免费，而且开源，不管你是企业用户还是个人玩家，都可以使用 Swagger 提供的方案构建令人惊艳的 <code>REST API</code>。</p><p>Swagger 有几个主要的产品。</p><ul><li><a href="http://editor.swagger.io/?_ga=2.112541447.2078165713.1574600445-3923049.1574128700" target="_blank" rel="noopener">Swagger Editor</a> – 一个基于浏览器的 Open API 规范编辑器。</li><li><a href="https://swagger.io/swagger-ui/" target="_blank" rel="noopener">Swagger UI</a> – 一个将 OpenAPI 规范呈现为可交互在线文档的工具。</li><li><a href="https://github.com/swagger-api/swagger-codegen" target="_blank" rel="noopener">Swagger Codegen</a> – 一个根据 OpenAPI 生成调用代码的工具。</li></ul><p>如果你想了解更多信息，可以访问 Swagger 官方网站 <a href="https://swagger.io" target="_blank" rel="noopener">https://swagger.io</a>。</p><h2 id="3-Springfox-介绍"><a href="#3-Springfox-介绍" class="headerlink" title="3. Springfox 介绍"></a>3. Springfox 介绍</h2><p>源于 Java 中 Spring 框架的流行，让一个叫做  Marrty Pitt 的老外有了为 SpringMVC 添加接口描述的想法，因此他创建了一个遵守 OpenAPI 规范（OAS）的项目，取名为 <em>swagger-springmvc</em>，这个项目可以让 Spring 项目自动生成 JSON 格式的 OpenAPI 文档。这个框架也仿照了 Spring 项目的开发习惯，使用注解来进行信息配置。</p><p>后来这个项目发展成为 <code>Springfox</code>，再后来扩展出 <code>springfox-swagger2</code> ，为了让 JSON 格式的 API 文档更好的呈现，又出现了 <code>springfox-swagger-ui</code> 用来展示和测试生成的 OpenAPI 。这里的 springfox-swagger-ui 其实就是上面介绍的 Swagger-ui，只是它被通过 webjar 的方式打包到 jar 包内，并通过 maven 的方式引入进来。 </p><p>上面提到了 Springfox-swagger2 也是通过注解进行信息配置的，那么是怎么使用的呢？下面列举常用的一些注解，这些注解在下面的 Springboot 整合 Swagger 中会用到。</p><table><thead><tr><th>注解</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>@ApiModel</td><td>@ApiModel(value = “用户对象”)</td><td>描述一个实体对象</td></tr><tr><td>@ApiModelProperty</td><td>@ApiModelProperty(value = “用户ID”, required = true, example = “1000”)</td><td>描述属性信息，执行描述，是否必须，给出示例</td></tr><tr><td>@Api</td><td>@Api(value = “用户操作 API(v1)”, tags = “用户操作接口”)</td><td>用在接口类上，为接口类添加描述</td></tr><tr><td>@ApiOperation</td><td>@ApiOperation(value = “新增用户”)</td><td>描述类的一个方法或者说一个接口</td></tr><tr><td>@ApiParam</td><td>@ApiParam(value = “用户名”, required = true)</td><td>描述单个参数</td><td></td></tr></tbody></table><p>更多的 Springfox 介绍，可以访问 Springfox 官方网站。</p><p><a href="http://springfox.github.io/springfox/docs/current/" target="_blank" rel="noopener">Springfox Reference Documentation (http://springfox.github.io)</a></p><h2 id="4-Springboot-整合-Swagger"><a href="#4-Springboot-整合-Swagger" class="headerlink" title="4. Springboot 整合 Swagger"></a>4. Springboot 整合 Swagger</h2><p>就目前来说 ，Springboot 框架是非常流行的微服务框架，在微服务框架下，很多时候我们都是直接提供 <code>REST API</code> 的。REST API 如果没有文档的话，使用者就很头疼了。不过不用担心，上面说了有一位叫 Marrty Pitt 的老外已经创建了一个发展成为 Springfox 的项目，可以方便的提供 JSON 格式的 OpenAPI 规范和文档支持。且扩展出了 springfox-swagger-ui 用于页面的展示。</p><p>需要注意的是，这里使用的所谓的 Swagger 其实和真正的 Swagger 并不是一个东西，这里使用的是 Springfox 提供的 Swagger 实现。它们都是基于 OpenAPI 规范进行 API 构建。所以也都可以 Swagger-ui 进行 API 的页面呈现。</p><h3 id="4-1-创建项目"><a href="#4-1-创建项目" class="headerlink" title="4.1. 创建项目"></a>4.1. 创建项目</h3><p>如何创建一个 Springboot 项目这里不提，你可以直接从 <a href="https://start.spring.io/" target="_blank" rel="noopener">Springboot 官方</a> 下载一个标准项目，也可以使用 idea 快速创建一个 Springboot 项目，也可以顺便拷贝一个 Springboot 项目过来测试，总之，方式多种多样，任你选择。</p><p>下面演示如何在 Springboot 项目中使用 swagger2。</p><h3 id="4-2-引入依赖"><a href="#4-2-引入依赖" class="headerlink" title="4.2. 引入依赖"></a>4.2. 引入依赖</h3><p>这里主要是引入了 springfox-swagger2，可以通过注解生成 JSON 格式的 OpenAPI 接口文档，然后由于 Springfox 需要依赖 jackson，所以引入之。springfox-swagger-ui 可以把生成的 OpenAPI 接口文档显示为页面。Lombok 的引入可以通过注解为实体类生成 get/set 方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- Spring Boot web 开发整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入swagger2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- jackson相关依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Lombok 工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-配置-Springfox-swagger"><a href="#4-3-配置-Springfox-swagger" class="headerlink" title="4.3. 配置 Springfox-swagger"></a>4.3. 配置 Springfox-swagger</h3><p>Springfox-swagger 的配置通过一个 Docket 来包装，Docket 里的 apiInfo 方法可以传入关于接口总体的描述信息。而 apis 方法可以指定要扫描的包的具体路径。在类上添加 @Configuration 声明这是一个配置类，最后使用 @EnableSwagger2 开启 Springfox-swagger2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Springfox-swagger2 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/11/19 23:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"net.codingme.boot.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"未读代码 API"</span>)</span><br><span class="line">                .description(<span class="string">"公众号：未读代码(weidudaima) springboot-swagger2 在线借口文档"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"https://www.codingme.net"</span>)</span><br><span class="line">                .contact(<span class="string">"达西呀"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-代码编写"><a href="#4-4-代码编写" class="headerlink" title="4.4. 代码编写"></a>4.4. 代码编写</h3><p>文章不会把所有代码一一列出来，这没有太大意义，所以只贴出主要代码，完整代码会上传到 Github，并在文章底部附上 Github 链接。</p><p>参数实体类 <code>User.java</code>，使用 <code>@ApiModel</code> 和 <code>@ApiModelProperty</code> 描述参数对象，使用 <code>@NotNull</code> 进行数据校验，使用 <code>@Data</code> 为参数实体类自动生成 get/set 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/19 17:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"用户对象"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Id</span> 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GeneratedValue</span> 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户 ID 不能为空"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, example = <span class="string">"1000"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户名不能为空"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户名"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户密码"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户年龄"</span>, example = <span class="string">"18"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd hh:mm:ss"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户生日"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 技能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户技能"</span>)</span><br><span class="line">    <span class="keyword">private</span> String skills;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写 Controller 层，使用 <code>@Api</code> 描述接口类，使用 <code>@ApiOperation</code> 描述接口，使用 <code>@ApiParam</code> 描述接口参数。代码中在查询用户信息的两个接口上都添加了 <code>tags = &quot;用户查询&quot;</code> 标记，这样这两个方法在生成 Swagger 接口文档时候会分到一个共同的标签组里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.Response;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.User;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.enums.ResponseEnum;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.utils.ResponseUtill;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/11/19 23:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span>(value = <span class="string">"/v1"</span>)</span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"用户操作 API(v1)"</span>, tags = <span class="string">"用户操作接口"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"新增用户"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">create</span><span class="params">(@Valid User user, BindingResult bindingResult)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            String message = bindingResult.getFieldError().getDefaultMessage();</span><br><span class="line">            log.info(message);</span><br><span class="line">            <span class="keyword">return</span> ResponseUtill.error(ResponseEnum.ERROR.getCode(), message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 新增用户信息 do something</span></span><br><span class="line">            <span class="keyword">return</span> ResponseUtill.success(<span class="string">"用户["</span> + user.getUsername() + <span class="string">"]信息已新增"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"删除用户"</span>)</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(value = <span class="string">"/user/&#123;username&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span></span></span><br><span class="line"><span class="function">                           @<span class="title">ApiParam</span><span class="params">(value = <span class="string">"用户名"</span>, required = <span class="keyword">true</span>)</span> String name) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 删除用户信息 do something</span></span><br><span class="line">        <span class="keyword">return</span> ResponseUtill.success(<span class="string">"用户["</span> + name + <span class="string">"]信息已删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"修改用户"</span>)</span><br><span class="line">    <span class="meta">@PutMapping</span>(value = <span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">update</span><span class="params">(@Valid User user, BindingResult bindingResult)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            String message = bindingResult.getFieldError().getDefaultMessage();</span><br><span class="line">            log.info(message);</span><br><span class="line">            <span class="keyword">return</span> ResponseUtill.error(ResponseEnum.ERROR.getCode(), message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String username = user.getUsername();</span><br><span class="line">            <span class="keyword">return</span> ResponseUtill.success(<span class="string">"用户["</span> + username + <span class="string">"]信息已修改"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"获取单个用户信息"</span>, tags = <span class="string">"用户查询"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/user/&#123;username&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span></span></span><br><span class="line"><span class="function">                        @<span class="title">NotNull</span><span class="params">(message = <span class="string">"用户名称不能为空"</span>)</span></span></span><br><span class="line"><span class="function">                        @<span class="title">ApiParam</span><span class="params">(value = <span class="string">"用户名"</span>, required = <span class="keyword">true</span>)</span> String username) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 查询用户信息 do something</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">10000</span>);</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setAge(<span class="number">99</span>);</span><br><span class="line">        user.setSkills(<span class="string">"cnp"</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseUtill.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"获取用户列表"</span>, tags = <span class="string">"用户查询"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">selectAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 查询用户信息列表 do something</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">10000</span>);</span><br><span class="line">        user.setUsername(<span class="string">"未读代码"</span>);</span><br><span class="line">        user.setAge(<span class="number">99</span>);</span><br><span class="line">        user.setSkills(<span class="string">"cnp"</span>);</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseUtill.success(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，为了让代码变得更加符合规范和好用，使用一个统一的类进行接口响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"响应信息"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"响应码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"响应信息"</span>)</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"响应数据"</span>)</span><br><span class="line">    <span class="keyword">private</span> Collection content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-运行访问"><a href="#4-5-运行访问" class="headerlink" title="4.5. 运行访问"></a>4.5. 运行访问</h3><p>直接启动 Springboog 项目，可以看到控制台输出扫描到的各个接口的访问路径，其中就有 <code>/2/api-docs</code>。</p><p><img src="/assets/image-20191126000341030.png" alt="Springboot 启动"></p><p>这个也就是生成的 OpenAPI 规范的描述 JSON 访问路径，访问可以看到。</p><p><img src="/assets/image-20191126000613238.png" alt="OpenAPI - JSON"></p><p>因为上面我们在引入依赖时，也引入了 springfox-swagger-ui 包，所以还可以访问 API 的页面文档。访问路径是 /swagger-ui.html，访问看到的效果可以看下图。</p><p><img src="/assets/image-20191126000808167.png" alt="swagger 访问"></p><p>也可以看到用户查询的两个方法会归到了一起，原因就是这两个方法的注解上使用相同的 tag 属性。</p><h3 id="4-7-调用测试"><a href="#4-7-调用测试" class="headerlink" title="4.7. 调用测试"></a>4.7. 调用测试</h3><p>springfox-swagger-ui 不仅是生成了 API 文档，还提供了调用测试功能。下面是在页面上测试获取单个用户信息的过程。</p><ol><li>点击接口 [/user/{username}] 获取单个用户信息。</li><li>点击 <code>**Try it out**</code> 进入测试传参页面。</li><li>输入参数，点击 <strong>Execute</strong> 蓝色按钮执行调用。</li><li>查看返回信息。</li></ol><p>下面是测试时的响应截图。</p><p><img src="/assets/image-20191126001337387.png" alt="swagger 测试"></p><h2 id="5-常见报错"><a href="#5-常见报错" class="headerlink" title="5. 常见报错"></a>5. 常见报错</h2><p>如果你在程序运行中经常发现像下面这样的报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NumberFormatException: For input string: &quot;&quot;</span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) ~[na:1.8.0_111]</span><br><span class="line">at java.lang.Long.parseLong(Long.java:601) ~[na:1.8.0_111]</span><br><span class="line">at java.lang.Long.valueOf(Long.java:803) ~[na:1.8.0_111]</span><br><span class="line">at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412) ~[swagger-models-1.5.20.jar:1.5.20]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]</span><br><span class="line">at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:536) [jackson-databind-2.5.4.jar:2.5.4]</span><br><span class="line">at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:666) [jackson-databind-2.5.4.jar:2.5.4]</span><br><span class="line">at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:156) [jackson-databind-2.5.4.jar:2.5.4]</span><br><span class="line">at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:113) [jackson-databind-2.5.4.jar:2.5.4]</span><br></pre></td></tr></table></figure><p>那么你需要检查使用了 <code>@ApiModelProperty</code> 注解且字段类型为数字类型的属性上，<code>@ApiModelProperty</code> 注解是否设置了 example 值，如果没有，那就需要设置一下，像下面这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotNull</span>(message = <span class="string">"用户 ID 不能为空"</span>)</span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, example = <span class="string">"1000"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br></pre></td></tr></table></figure><p>文中代码都已经上传到 <a href="https://github.com/niumoo/springboot" target="_blank" rel="noopener"> https://github.com/niumoo/springboot </a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md" target="_blank" rel="noopener">OpenAPI Specification</a></li><li><a href="https://swagger.io/docs/specification/about/" target="_blank" rel="noopener">Swagger Documentation</a></li><li><a href="http://springfox.github.io/springfox/docs/current/" target="_blank" rel="noopener">Springfox Reference Documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前来说，在 Java 领域使用 &lt;code&gt;Springboot&lt;/code&gt; 构建微服务是比较流行的，在构建微服务时，我们大多数会选择暴漏一个 &lt;code&gt;REST API&lt;/code&gt; 以供调用。又或者公司采用前后端分离的开发模式，让前端和后端的工作由完全不同的工程师进行开发完成。不管是微服务还是这种前后端分离开发，维持一份完整的及时更新的 &lt;code&gt;REST API&lt;/code&gt; 文档，会极大的提高我们的工作效率。而传统的文档更新方式（如手动编写），很难保证文档的及时性，经常会年久失修，失去应有的意义。因此选择一种新的 API 文档维护方式很有必要，这也是这篇文章要介绍的内容。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="swagger" scheme="https://www.codingme.net/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>还看不懂同事的代码？超强的 Stream 流操作姿势还不学习一下</title>
    <link href="https://www.codingme.net/2019/11/jdk/jdk8-stream/"/>
    <id>https://www.codingme.net/2019/11/jdk/jdk8-stream/</id>
    <published>2019-11-18T01:00:00.000Z</published>
    <updated>2020-02-18T14:36:54.266Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/jdk8-stream/java-streams.png" alt="java-streams"></p><p>Java 8 新特性系列文章索引。</p><ol><li><a href="http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483879&amp;idx=1&amp;sn=1eb37f5a97fda31ebb9d80d6e96cfb88&amp;chksm=e984e883def361957df3a954b0f28775404b5f0a278958e91c65b3f3175a37f5384b0988c564&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Jdk14都要出了，还不能使用 Optional优雅的处理空指针？</a> </li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483801&amp;idx=1&amp;sn=eea69b039feb1ae86187ade222e6bfd8&amp;chksm=e984e8fddef361ebd4acc58e11f3ccdeea9b06b6514957a5c203d52046c551f3ea3203d187e9&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Jdk14 都要出了，Jdk8 的时间处理姿势还不了解一下？</a> </li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483923&amp;idx=1&amp;sn=57c720a9ba7dbd79e84a069e0d6fa84f&amp;chksm=e984eb77def36261de6f0b9edd8aaa9ef34f74f90c08e6d395880545b6bf1a7b054ecdbff483#rd" target="_blank" rel="noopener">还看不懂同事的代码？Lambda 表达式、函数接口了解一下</a> </li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道 <code>Lambda</code> 和 Stream 是 Java 8 的两大亮点功能，在前面的文章里已经介绍过 <code>Lambda</code> 相关知识，这次介绍下 Java 8 的 Stream 流操作。它完全不同于 java.io 包的 Input/Output Stream ，也不是大数据实时处理的 Stream 流。这个 Stream 流操作是 Java 8 对集合操作功能的增强，专注于对集合的各种高效、便利、优雅的<strong>聚合操作</strong>。借助于 <code>Lambda</code> 表达式，显著的提高<strong>编程效率</strong>和<strong>可读性</strong>。且 Stream 提供了<strong>并行计算</strong>模式，可以简洁的编写出并行代码，能充分发挥如今计算机的多核处理优势。</p><a id="more"></a><p>在使用 Stream 流操作之前你应该先了解 <code>Lambda</code> 相关知识，如果还不了解，可以参考之前文章：<a href="http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483923&amp;idx=1&amp;sn=57c720a9ba7dbd79e84a069e0d6fa84f&amp;chksm=e984eb77def36261de6f0b9edd8aaa9ef34f74f90c08e6d395880545b6bf1a7b054ecdbff483#rd" target="_blank" rel="noopener">还看不懂同事的代码？Lambda 表达式、函数接口了解一下</a> 。</p><h2 id="1-Stream-流介绍"><a href="#1-Stream-流介绍" class="headerlink" title="1. Stream 流介绍"></a>1. Stream 流介绍</h2><p>Stream 不同于其他集合框架，它也不是某种数据结构，也不会保存数据，但是它负责相关计算，使用起来更像一个高级的迭代器。在之前的迭代器中，我们只能先遍历然后在执行业务操作，而现在只需要指定执行什么操作， Stream 就会隐式的遍历然后做出想要的操作。另外 Stream 和迭代器一样的只能单向处理，如同奔腾长江之水一去而不复返。 </p><p>由于 Stream 流提供了<strong>惰性计算</strong>和<strong>并行处理</strong>的能力，在使用并行计算方式时数据会被自动分解成多段然后并行处理，最后将结果汇总。所以 Stream 操作可以让程序运行变得更加高效。</p><h2 id="2-Stream-流概念"><a href="#2-Stream-流概念" class="headerlink" title="2. Stream 流概念"></a>2. Stream 流概念</h2><p>Stream 流的使用总是按照一定的步骤进行，可以抽象出下面的使用流程。</p><blockquote><p>数据源（source） -&gt; 数据处理/转换（intermedia） -&gt; 结果处理（terminal ）</p></blockquote><h3 id="2-1-数据源"><a href="#2-1-数据源" class="headerlink" title="2.1. 数据源"></a>2.1. 数据源</h3><p><code>数据源（source）</code>也就是数据的来源，可以通过多种方式获得 Stream 数据源，下面列举几种常见的获取方式。</p><ul><li>Collection.stream();  从集合获取流。</li><li>Collection.parallelStream();  从集合获取<strong>并行流。</strong></li><li>Arrays.stream(T array) or Stream.of(); 从数组获取流。</li><li>BufferedReader.lines(); 从输入流中获取流。</li><li>IntStream.of() ; 从静态方法中获取流。</li><li>Stream.generate(); 自己生成流</li></ul><h3 id="2-2-数据处理"><a href="#2-2-数据处理" class="headerlink" title="2.2. 数据处理"></a>2.2. 数据处理</h3><p><code>数据处理/转换（intermedia）</code>步骤可以有多个操作，这步也被称为<code>intermedia</code>（中间操作）。在这个步骤中不管怎样操作，它返回的都是一个新的流对象，原始数据不会发生任何改变，而且这个步骤是<code>惰性计算</code>处理的，也就是说只调用方法并不会开始处理，只有在真正的开始收集结果时，中间操作才会生效，而且如果遍历没有完成，想要的结果已经获取到了（比如获取第一个值），会停止遍历，然后返回结果。<code>惰性计算</code>可以显著提高运行效率。</p><p>数据处理演示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">streamDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; nameList = Arrays.asList(<span class="string">"Darcy"</span>, <span class="string">"Chris"</span>, <span class="string">"Linda"</span>, <span class="string">"Sid"</span>, <span class="string">"Kim"</span>, <span class="string">"Jack"</span>, <span class="string">"Poul"</span>, <span class="string">"Peter"</span>);</span><br><span class="line">    <span class="comment">// 1. 筛选出名字长度为4的</span></span><br><span class="line">    <span class="comment">// 2. 名字前面拼接 This is</span></span><br><span class="line">    <span class="comment">// 3. 遍历输出</span></span><br><span class="line">    nameList.stream()</span><br><span class="line">            .filter(name -&gt; name.length() == <span class="number">4</span>)</span><br><span class="line">            .map(name -&gt; <span class="string">"This is "</span>+name)</span><br><span class="line">            .forEach(name -&gt; System.out.println(name));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// This is Jack</span></span><br><span class="line"><span class="comment">// This is Poul</span></span><br></pre></td></tr></table></figure><p><code>数据处理/转换</code>操作自然不止是上面演示的过滤 <code>filter</code> 和 <code>map</code>映射两种，另外还有 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered 等。</p><h3 id="2-3-收集结果"><a href="#2-3-收集结果" class="headerlink" title="2.3. 收集结果"></a>2.3. 收集结果</h3><p><code>结果处理（terminal ）</code>是流处理的最后一步，执行完这一步之后流会被彻底用尽，流也不能继续操作了。也只有到了这个操作的时候，流的<code>数据处理/转换</code>等中间过程才会开始计算，也就是上面所说的<code>惰性计算</code>。<code>结果处理</code>也必定是流操作的最后一步。</p><p>常见的<code>结果处理</code>操作有 forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator 等。</p><p>下面演示了简单的<code>结果处理</code>的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换成为大写然后收集结果，遍历输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toUpperCaseDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; nameList = Arrays.asList(<span class="string">"Darcy"</span>, <span class="string">"Chris"</span>, <span class="string">"Linda"</span>, <span class="string">"Sid"</span>, <span class="string">"Kim"</span>, <span class="string">"Jack"</span>, <span class="string">"Poul"</span>, <span class="string">"Peter"</span>);</span><br><span class="line">    List&lt;String&gt; upperCaseNameList = nameList.stream()</span><br><span class="line">            .map(String::toUpperCase)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    upperCaseNameList.forEach(name -&gt; System.out.println(name + <span class="string">","</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// DARCY,CHRIS,LINDA,SID,KIM,JACK,POUL,PETER,</span></span><br></pre></td></tr></table></figure><h3 id="2-4-short-circuiting"><a href="#2-4-short-circuiting" class="headerlink" title="2.4. short-circuiting"></a>2.4. short-circuiting</h3><p>有一种 Stream 操作被称作 <code>short-circuiting</code> ，它是指当 Stream 流<strong>无限大</strong>但是需要返回的 Stream 流是<strong>有限</strong>的时候，而又希望它能在<strong>有限的时间</strong>内计算出结果，那么这个操作就被称为<code>short-circuiting</code>。例如　<code>findFirst</code>操作。</p><h2 id="3-Stream-流使用"><a href="#3-Stream-流使用" class="headerlink" title="3. Stream 流使用"></a>3. Stream 流使用</h2><p>Stream 流在使用时候总是借助于 <code>Lambda</code> 表达式进行操作，Stream 流的操作也有很多种方式，下面列举的是常用的 11 种操作。</p><h3 id="3-1-Stream-流获取"><a href="#3-1-Stream-流获取" class="headerlink" title="3.1. Stream 流获取"></a>3.1. Stream 流获取</h3><p>获取 Stream 的几种方式在上面的 Stream 数据源里已经介绍过了，下面是针对上面介绍的几种获取 Stream 流的使用示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createStream</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    List&lt;String&gt; nameList = Arrays.asList(<span class="string">"Darcy"</span>, <span class="string">"Chris"</span>, <span class="string">"Linda"</span>, <span class="string">"Sid"</span>, <span class="string">"Kim"</span>, <span class="string">"Jack"</span>, <span class="string">"Poul"</span>, <span class="string">"Peter"</span>);</span><br><span class="line">    String[] nameArr = &#123;<span class="string">"Darcy"</span>, <span class="string">"Chris"</span>, <span class="string">"Linda"</span>, <span class="string">"Sid"</span>, <span class="string">"Kim"</span>, <span class="string">"Jack"</span>, <span class="string">"Poul"</span>, <span class="string">"Peter"</span>&#125;;</span><br><span class="line">    <span class="comment">// 集合获取 Stream 流</span></span><br><span class="line">    Stream&lt;String&gt; nameListStream = nameList.stream();</span><br><span class="line">    <span class="comment">// 集合获取并行 Stream 流</span></span><br><span class="line">    Stream&lt;String&gt; nameListStream2 = nameList.parallelStream();</span><br><span class="line">    <span class="comment">// 数组获取 Stream 流</span></span><br><span class="line">    Stream&lt;String&gt; nameArrStream = Stream.of(nameArr);</span><br><span class="line">    <span class="comment">// 数组获取 Stream 流</span></span><br><span class="line">    Stream&lt;String&gt; nameArrStream1 = Arrays.stream(nameArr);</span><br><span class="line">    <span class="comment">// 文件流获取 Stream 流</span></span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"README.md"</span>));</span><br><span class="line">    Stream&lt;String&gt; linesStream = bufferedReader.lines();</span><br><span class="line">    <span class="comment">// 从静态方法获取流操作</span></span><br><span class="line">    IntStream rangeStream = IntStream.range(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    rangeStream.limit(<span class="number">10</span>).forEach(num -&gt; System.out.print(num+<span class="string">","</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    IntStream intStream = IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    intStream.forEach(num -&gt; System.out.print(num+<span class="string">","</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-forEach"><a href="#3-2-forEach" class="headerlink" title="3.2. forEach"></a>3.2. forEach</h3><p><code>forEach</code> 是 <code>Stream</code> 流中的一个重要方法，用于遍历 <code>Stream</code> 流，它支持传入一个标准的 <code>Lambda</code> 表达式。但是它的遍历不能通过 return/break 进行终止。同时它也是一个 <code>terminal</code> 操作，执行之后 <code>Stream</code> 流中的数据会被消费掉。</p><p>如输出对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numberList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">numberList.stream().forEach(number -&gt; System.out.println(number+<span class="string">","</span>));</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 1,2,3,4,5,6,7,8,9,</span></span><br></pre></td></tr></table></figure><h3 id="3-3-map-flatMap"><a href="#3-3-map-flatMap" class="headerlink" title="3.3. map / flatMap"></a>3.3. map / flatMap</h3><p>使用 <code>map</code> 把对象一对一映射成另一种对象或者形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把数字值乘以2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numberList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="comment">// 映射成 2倍数字</span></span><br><span class="line">    List&lt;Integer&gt; collect = numberList.stream()</span><br><span class="line">            .map(number -&gt; number * <span class="number">2</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    collect.forEach(number -&gt; System.out.print(number + <span class="string">","</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    numberList.stream()</span><br><span class="line">            .map(number -&gt; <span class="string">"数字 "</span> + number + <span class="string">","</span>)</span><br><span class="line">            .forEach(number -&gt; System.out.println(number));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 2,4,6,8,10,12,14,16,18,</span></span><br><span class="line"><span class="comment">// 数字 1,数字 2,数字 3,数字 4,数字 5,数字 6,数字 7,数字 8,数字 9,</span></span><br></pre></td></tr></table></figure><p>上面的 <code>map</code> 可以把数据进行一对一的映射，而有些时候关系可能不止 1对 1那么简单，可能会有1对多。这时可以使用 <code>flatMap。下面演示</code>使用 <code>flatMap</code>把对象扁平化展开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * flatmap把对象扁平化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class="line">            Arrays.asList(<span class="number">1</span>),</span><br><span class="line">            Arrays.asList(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">            Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    );</span><br><span class="line">    List&lt;Integer&gt; collect = inputStream</span><br><span class="line">            .flatMap((childList) -&gt; childList.stream())</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    collect.forEach(number -&gt; System.out.print(number + <span class="string">","</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 1,2,3,4,5,6,</span></span><br></pre></td></tr></table></figure><h3 id="3-4-filter"><a href="#3-4-filter" class="headerlink" title="3.4. filter"></a>3.4. filter</h3><p>使用 <code>filter</code> 进行数据筛选，挑选出想要的元素，下面的例子演示怎么挑选出偶数数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter 数据筛选</span></span><br><span class="line"><span class="comment"> * 筛选出偶数数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numberList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = numberList.stream()</span><br><span class="line">            .filter(number -&gt; number % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    collect.forEach(number -&gt; System.out.print(number + <span class="string">","</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如下结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2,4,6,8,</span><br></pre></td></tr></table></figure><h3 id="3-5-findFirst"><a href="#3-5-findFirst" class="headerlink" title="3.5. findFirst"></a>3.5. findFirst</h3><p><code>findFirst</code> 可以查找出 <code>Stream</code> 流中的第一个元素，它返回的是一个 Optional 类型，如果还不知道 Optional 类的用处，可以参考之前文章 <a href="http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483879&amp;idx=1&amp;sn=1eb37f5a97fda31ebb9d80d6e96cfb88&amp;chksm=e984e883def361957df3a954b0f28775404b5f0a278958e91c65b3f3175a37f5384b0988c564&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Jdk14都要出了，还不能使用 Optional优雅的处理空指针？</a> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找第一个数据</span></span><br><span class="line"><span class="comment"> * 返回的是一个 Optional 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findFirstTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numberList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">    Optional&lt;Integer&gt; firstNumber = numberList.stream()</span><br><span class="line">            .findFirst();</span><br><span class="line">    System.out.println(firstNumber.orElse(-<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>findFirst</code> 方法在查找到需要的数据之后就会返回<strong>不再遍历</strong>数据了，也因此 <code>findFirst</code> 方法可以对有无限数据的  <code>Stream</code> 流进行操作，也可以说 <code>findFirst</code> 是一个 <code>short-circuiting</code> 操作。</p><h3 id="3-6-collect-toArray"><a href="#3-6-collect-toArray" class="headerlink" title="3.6. collect / toArray"></a>3.6. collect / toArray</h3><p><code>Stream</code> 流可以轻松的转换为其他结构，下面是几种常见的示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stream 转换为其他数据结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numberList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">// to array</span></span><br><span class="line">    Integer[] toArray = numberList.stream()</span><br><span class="line">            .toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">    <span class="comment">// to List</span></span><br><span class="line">    List&lt;Integer&gt; integerList = numberList.stream()</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// to set</span></span><br><span class="line">    Set&lt;Integer&gt; integerSet = numberList.stream()</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line">    System.out.println(integerSet);</span><br><span class="line">    <span class="comment">// to string</span></span><br><span class="line">    String toString = numberList.stream()</span><br><span class="line">            .map(number -&gt; String.valueOf(number))</span><br><span class="line">            .collect(Collectors.joining()).toString();</span><br><span class="line">    System.out.println(toString);</span><br><span class="line">    <span class="comment">// to string split by ,</span></span><br><span class="line">    String toStringbJoin = numberList.stream()</span><br><span class="line">            .map(number -&gt; String.valueOf(number))</span><br><span class="line">            .collect(Collectors.joining(<span class="string">","</span>)).toString();</span><br><span class="line">    System.out.println(toStringbJoin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 112233445</span></span><br><span class="line"><span class="comment">// 1,1,2,2,3,3,4,4,5</span></span><br></pre></td></tr></table></figure><h3 id="3-7-limit-skip"><a href="#3-7-limit-skip" class="headerlink" title="3.7. limit / skip"></a>3.7. limit / skip</h3><p>获取或者扔掉前 n 个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 / 扔掉前 n 个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">limitOrSkipTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成自己的随机数流</span></span><br><span class="line">    List&lt;Integer&gt; ageList = Arrays.asList(<span class="number">11</span>, <span class="number">22</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">25</span>, <span class="number">26</span>);</span><br><span class="line">    ageList.stream()</span><br><span class="line">            .limit(<span class="number">3</span>)</span><br><span class="line">            .forEach(age -&gt; System.out.print(age+<span class="string">","</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    ageList.stream()</span><br><span class="line">            .skip(<span class="number">3</span>)</span><br><span class="line">            .forEach(age -&gt; System.out.print(age+<span class="string">","</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 11,22,13,</span></span><br><span class="line"><span class="comment">// 14,25,26,</span></span><br></pre></td></tr></table></figure><h3 id="3-8-Statistics"><a href="#3-8-Statistics" class="headerlink" title="3.8. Statistics"></a>3.8. Statistics</h3><p>数学统计功能，求一组数组的最大值、最小值、个数、数据和、平均数等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数学计算测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mathTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    IntSummaryStatistics stats = list.stream().mapToInt(x -&gt; x).summaryStatistics();</span><br><span class="line">    System.out.println(<span class="string">"最小值："</span> + stats.getMin());</span><br><span class="line">    System.out.println(<span class="string">"最大值："</span> + stats.getMax());</span><br><span class="line">    System.out.println(<span class="string">"个数："</span> + stats.getCount());</span><br><span class="line">    System.out.println(<span class="string">"和："</span> + stats.getSum());</span><br><span class="line">    System.out.println(<span class="string">"平均数："</span> + stats.getAverage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 最小值：1</span></span><br><span class="line"><span class="comment">// 最大值：6</span></span><br><span class="line"><span class="comment">// 个数：6</span></span><br><span class="line"><span class="comment">// 和：21</span></span><br><span class="line"><span class="comment">// 平均数：3.5</span></span><br></pre></td></tr></table></figure><h3 id="3-9-groupingBy"><a href="#3-9-groupingBy" class="headerlink" title="3.9. groupingBy"></a>3.9. groupingBy</h3><p>分组聚合功能，和数据库的 Group by 的功能一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * groupingBy</span></span><br><span class="line"><span class="comment"> * 按年龄分组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">groupByTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ageList = Arrays.asList(<span class="number">11</span>, <span class="number">22</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">25</span>, <span class="number">26</span>);</span><br><span class="line">    Map&lt;String, List&lt;Integer&gt;&gt; ageGrouyByMap = ageList.stream()            </span><br><span class="line">        .collect(Collectors.groupingBy(age -&gt; String.valueOf(age / <span class="number">10</span>)));</span><br><span class="line">    ageGrouyByMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"年龄"</span> + k + <span class="string">"0多岁的有："</span> + v);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 年龄10多岁的有：[11, 13, 14]</span></span><br><span class="line"><span class="comment">// 年龄20多岁的有：[22, 25, 26]</span></span><br></pre></td></tr></table></figure><h3 id="3-10-partitioningBy"><a href="#3-10-partitioningBy" class="headerlink" title="3.10. partitioningBy"></a>3.10. partitioningBy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * partitioningBy</span></span><br><span class="line"><span class="comment"> * 按某个条件分组</span></span><br><span class="line"><span class="comment"> * 给一组年龄，分出成年人和未成年人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partitioningByTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ageList = Arrays.asList(<span class="number">11</span>, <span class="number">22</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">25</span>, <span class="number">26</span>);</span><br><span class="line">    Map&lt;Boolean, List&lt;Integer&gt;&gt; ageMap = ageList.stream()</span><br><span class="line">            .collect(Collectors.partitioningBy(age -&gt; age &gt; <span class="number">18</span>));</span><br><span class="line">    System.out.println(<span class="string">"未成年人："</span> + ageMap.get(<span class="keyword">false</span>));</span><br><span class="line">    System.out.println(<span class="string">"成年人："</span> + ageMap.get(<span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 未成年人：[11, 13, 14]</span></span><br><span class="line"><span class="comment">// 成年人：[22, 25, 26]</span></span><br></pre></td></tr></table></figure><h3 id="3-11-进阶-自己生成-Stream-流"><a href="#3-11-进阶-自己生成-Stream-流" class="headerlink" title="3.11. 进阶 - 自己生成 Stream 流"></a>3.11. 进阶 - 自己生成 Stream 流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成自己的 Stream 流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 生成自己的随机数流</span></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    Stream&lt;Integer&gt; generateRandom = Stream.generate(random::nextInt);</span><br><span class="line">    generateRandom.limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line">    <span class="comment">// 生成自己的 UUID 流</span></span><br><span class="line">    Stream&lt;UUID&gt; generate = Stream.generate(UUID::randomUUID);</span><br><span class="line">    generate.limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 793776932</span></span><br><span class="line"><span class="comment">// -2051545609</span></span><br><span class="line"><span class="comment">// -917435897</span></span><br><span class="line"><span class="comment">// 298077102</span></span><br><span class="line"><span class="comment">// -1626306315</span></span><br><span class="line"><span class="comment">// 31277974-841a-4ad0-a809-80ae105228bd</span></span><br><span class="line"><span class="comment">// f14918aa-2f94-4774-afcf-fba08250674c</span></span><br><span class="line"><span class="comment">// d86ccefe-1cd2-4eb4-bb0c-74858f2a7864</span></span><br><span class="line"><span class="comment">// 4905724b-1df5-48f4-9948-fa9c64c7e1c9</span></span><br><span class="line"><span class="comment">// 3af2a07f-0855-455f-a339-6e890e533ab3</span></span><br></pre></td></tr></table></figure><p>上面的例子中 <code>Stream</code> 流是无限的，但是获取到的结果是有限的，使用了 <code>Limit</code> 限制获取的数量，所以这个操作也是 <code>short-circuiting</code> 操作。</p><h2 id="4-Stream-流优点"><a href="#4-Stream-流优点" class="headerlink" title="4. Stream 流优点"></a>4. Stream 流优点</h2><h3 id="4-1-简洁优雅"><a href="#4-1-简洁优雅" class="headerlink" title="4.1. 简洁优雅"></a>4.1. 简洁优雅</h3><p>正确使用并且<strong>正确格式化</strong>的 <code>Stream</code> 流操作代码不仅<strong>简洁优雅</strong>，更让人赏心悦目。下面对比下在使用 <code>Stream</code> 流和不使用 <code>Stream</code> 流时相同操作的编码风格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用流操作和不使用流操作的编码风格对比</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">diffTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不使用流操作</span></span><br><span class="line">    List&lt;String&gt; names = Arrays.asList(<span class="string">"Jack"</span>, <span class="string">"Jill"</span>, <span class="string">"Nate"</span>, <span class="string">"Kara"</span>, <span class="string">"Kim"</span>, <span class="string">"Jullie"</span>, <span class="string">"Paul"</span>, <span class="string">"Peter"</span>);</span><br><span class="line">    <span class="comment">// 筛选出长度为4的名字</span></span><br><span class="line">    List&lt;String&gt; subList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length() == <span class="number">4</span>) &#123;</span><br><span class="line">            subList.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把值用逗号分隔</span></span><br><span class="line">    StringBuilder sbNames = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; subList.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        sbNames.append(subList.get(i));</span><br><span class="line">        sbNames.append(<span class="string">", "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去掉最后一个逗号</span></span><br><span class="line">    <span class="keyword">if</span> (subList.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        sbNames.append(subList.get(subList.size() - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sbNames);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// Jack, Jill, Nate, Kara, Paul</span></span><br></pre></td></tr></table></figure><p>如果是使用 <code>Stream</code> 流操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Stream 流操作</span></span><br><span class="line">String nameString = names.stream()</span><br><span class="line">       .filter(num -&gt; num.length() == <span class="number">4</span>)</span><br><span class="line">       .collect(Collectors.joining(<span class="string">", "</span>));</span><br><span class="line">System.out.println(nameString);</span><br></pre></td></tr></table></figure><h3 id="4-2-惰性计算"><a href="#4-2-惰性计算" class="headerlink" title="4.2. 惰性计算"></a>4.2. 惰性计算</h3><p>上面有提到，<code>数据处理/转换（intermedia）</code> 操作 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered 等这些操作，在调用方法时并不会立即调用，而是在真正使用的时候才会生效，这样可以让操作延迟到真正需要使用的时刻。</p><p>下面会举个例子演示这一点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找出偶数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lazyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成自己的随机数流</span></span><br><span class="line">    List&lt;Integer&gt; numberLIst = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 找出偶数</span></span><br><span class="line">    Stream&lt;Integer&gt; integerStream = numberLIst.stream()</span><br><span class="line">            .filter(number -&gt; &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = number % <span class="number">2</span>;</span><br><span class="line">     <span class="keyword">if</span> (temp == <span class="number">0</span> )&#123;</span><br><span class="line">                    System.out.println(number);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> temp == <span class="number">0</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"分割线"</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = integerStream.collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有 <code>惰性计算</code>，那么很明显会先输出偶数，然后输出 <code>分割线</code>。而实际的效果是。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分割线</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>可见 <code>惰性计算</code> 把计算延迟到了真正需要的时候。</p><h3 id="4-3-并行计算"><a href="#4-3-并行计算" class="headerlink" title="4.3. 并行计算"></a>4.3. 并行计算</h3><p>获取 <code>Stream</code> 流时可以使用 <code>parallelStream</code> 方法代替 <code>stream</code> 方法以获取并行处理流，并行处理可以充分的发挥多核优势，而且不增加编码的复杂性。</p><p>下面的代码演示了生成一千万个随机数后，把每个随机数乘以2然后求和时，串行计算和并行计算的耗时差异。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 并行计算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成自己的随机数流，取一千万个随机数</span></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    Stream&lt;Integer&gt; generateRandom = Stream.generate(random::nextInt);</span><br><span class="line">    List&lt;Integer&gt; numberList = generateRandom.limit(<span class="number">10000000</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 串行 - 把一千万个随机数，每个随机数 * 2 ，然后求和</span></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">int</span> sum = numberList.stream()</span><br><span class="line">        .map(number -&gt; number * <span class="number">2</span>)</span><br><span class="line">        .mapToInt(x -&gt; x)</span><br><span class="line">        .sum();</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"串行耗时："</span>+(end - start)+<span class="string">"ms，和是:"</span>+sum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并行 - 把一千万个随机数，每个随机数 * 2 ，然后求和</span></span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    sum = numberList.parallelStream()</span><br><span class="line">        .map(number -&gt; number * <span class="number">2</span>)</span><br><span class="line">        .mapToInt(x -&gt; x)</span><br><span class="line">        .sum();</span><br><span class="line">    end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"并行耗时："</span>+(end - start)+<span class="string">"ms，和是:"</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如下输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">串行耗时：<span class="number">1005</span>ms，和是:<span class="number">481385106</span></span><br><span class="line">并行耗时：<span class="number">47</span>ms，和是:<span class="number">481385106</span></span><br></pre></td></tr></table></figure><p>效果显而易见，代码简洁优雅。</p><h2 id="5-Stream-流建议"><a href="#5-Stream-流建议" class="headerlink" title="5. Stream 流建议"></a>5. Stream 流建议</h2><h3 id="5-1-保证正确排版"><a href="#5-1-保证正确排版" class="headerlink" title="5.1 保证正确排版"></a>5.1 保证正确排版</h3><p>从上面的使用案例中，可以发现使用 <code>Stream</code> 流操作的代码非常简洁，而且可读性更高。但是如果不正确的排版，那么看起来将会很糟糕，比如下面的同样功能的代码例子，多几层操作呢，是不是有些让人头大？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不排版</span></span><br><span class="line">String string = names.stream().filter(num -&gt; num.length() == <span class="number">4</span>).map(name -&gt; name.toUpperCase()).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line"><span class="comment">// 排版</span></span><br><span class="line">String string = names.stream()</span><br><span class="line">        .filter(num -&gt; num.length() == <span class="number">4</span>)</span><br><span class="line">        .map(name -&gt; name.toUpperCase())</span><br><span class="line">        .collect(Collectors.joining(<span class="string">","</span>));</span><br></pre></td></tr></table></figure><h3 id="5-2-保证函数纯度"><a href="#5-2-保证函数纯度" class="headerlink" title="5.2 保证函数纯度"></a>5.2 保证函数纯度</h3><p>如果想要你的 <code>Stream</code> 流对于每次的相同操作的结果都是相同的话，那么你必须保证 <code>Lambda</code> 表达式的纯度，也就是下面两点。</p><ul><li>Lambda 中不会更改任何元素。</li><li>Lambda 中不依赖于任何可能更改的元素。</li></ul><p>这两点对于保证函数的幂等非常重要，不然你程序执行结果可能会变得难以预测，就像下面的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span>[] factor = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">2</span> &#125;;</span><br><span class="line">    Stream&lt;Integer&gt; stream = numbers.stream()</span><br><span class="line">            .map(e -&gt; e * factor[<span class="number">0</span>]);</span><br><span class="line">    factor[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>文中代码都已经上传到 </p><p><a href="https://github.com/niumoo/jdk-feature/blob/master/src/main/java/net/codingme/feature/jdk8/Jdk8Stream.java" target="_blank" rel="noopener"> https://github.com/niumoo/jdk-feature/blob/master/src/main/java/net/codingme/feature/jdk8/Jdk8Stream.java </a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/jdk8-stream/java-streams.png&quot; alt=&quot;java-streams&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java 8 新特性系列文章索引。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;amp;mid=2247483879&amp;amp;idx=1&amp;amp;sn=1eb37f5a97fda31ebb9d80d6e96cfb88&amp;amp;chksm=e984e883def361957df3a954b0f28775404b5f0a278958e91c65b3f3175a37f5384b0988c564&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jdk14都要出了，还不能使用 Optional优雅的处理空指针？&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;amp;mid=2247483801&amp;amp;idx=1&amp;amp;sn=eea69b039feb1ae86187ade222e6bfd8&amp;amp;chksm=e984e8fddef361ebd4acc58e11f3ccdeea9b06b6514957a5c203d52046c551f3ea3203d187e9&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jdk14 都要出了，Jdk8 的时间处理姿势还不了解一下？&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;amp;mid=2247483923&amp;amp;idx=1&amp;amp;sn=57c720a9ba7dbd79e84a069e0d6fa84f&amp;amp;chksm=e984eb77def36261de6f0b9edd8aaa9ef34f74f90c08e6d395880545b6bf1a7b054ecdbff483#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;还看不懂同事的代码？Lambda 表达式、函数接口了解一下&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们都知道 &lt;code&gt;Lambda&lt;/code&gt; 和 Stream 是 Java 8 的两大亮点功能，在前面的文章里已经介绍过 &lt;code&gt;Lambda&lt;/code&gt; 相关知识，这次介绍下 Java 8 的 Stream 流操作。它完全不同于 java.io 包的 Input/Output Stream ，也不是大数据实时处理的 Stream 流。这个 Stream 流操作是 Java 8 对集合操作功能的增强，专注于对集合的各种高效、便利、优雅的&lt;strong&gt;聚合操作&lt;/strong&gt;。借助于 &lt;code&gt;Lambda&lt;/code&gt; 表达式，显著的提高&lt;strong&gt;编程效率&lt;/strong&gt;和&lt;strong&gt;可读性&lt;/strong&gt;。且 Stream 提供了&lt;strong&gt;并行计算&lt;/strong&gt;模式，可以简洁的编写出并行代码，能充分发挥如今计算机的多核处理优势。&lt;/p&gt;
    
    </summary>
    
      <category term="Jdk 新特性" scheme="https://www.codingme.net/categories/Jdk-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java8" scheme="https://www.codingme.net/tags/Java8/"/>
    
      <category term="Stream" scheme="https://www.codingme.net/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>还看不懂同事的代码？Lambda 表达式、函数接口了解一下</title>
    <link href="https://www.codingme.net/2019/11/jdk/jdk8-lambda/"/>
    <id>https://www.codingme.net/2019/11/jdk/jdk8-lambda/</id>
    <published>2019-11-11T00:01:01.000Z</published>
    <updated>2020-02-18T14:37:35.724Z</updated>
    
    <content type="html"><![CDATA[<p>当前时间：2019年 11月 11日，距离 JDK 14 发布时间（2020年3月17日）还有多少天？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 距离JDK 14 发布还有多少天？</span></span><br><span class="line">LocalDate jdk14 = LocalDate.of(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">17</span>);</span><br><span class="line">LocalDate nowDate = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"距离JDK 14 发布还有："</span>+nowDate.until(jdk14,ChronoUnit.DAYS)+<span class="string">"天"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p><code>Java 8</code> 早已经在2014 年 3月 18日发布，毫无疑问 <code>Java 8</code> 对 Java 来说绝对算得上是一次重大版本更新，它包含了十多项语言、库、工具、JVM 等方面的十多项新特性。比如提供了语言级的匿名函数，也就是被官方称为 <code>Lambda</code> 的表达式语法（外界也称为闭包，<code>Lambda</code> 的引入也让流式操作成为可能，减少了代码编写的复杂性），比如函数式接口，方法引用，重复注解。再比如 <code>Optional</code> 预防空指针，<code>Stearm</code> 流式操作，<code>LocalDateTime</code> 时间操作等。</p><p>在前面的文章里已经介绍了 <code>Java 8</code> 的部分新特性。</p><ol><li><p><a href="https://www.codingme.net/2019/10/jdk/jdk8-time/">Jdk14 都要出了，Jdk8 的时间处理姿势还不了解一下？</a></p></li><li><p><a href="https://www.codingme.net/2019/11/jdk/jdk8-optional/">Jdk14都要出了，还不能使用 Optional优雅的处理空指针？</a></p></li></ol><p>这一次主要介绍一下 Lambda 的相关情况。</p><h1 id="2-Lambda-介绍"><a href="#2-Lambda-介绍" class="headerlink" title="2. Lambda 介绍"></a>2. Lambda 介绍</h1><p><code>Lambda</code> 名字来源于希腊字母表中排序第十一位的字母 λ，大写为Λ，英语名称为 <code>Lambda</code>。在 Java 中 <code>Lambda</code> 表达式（lambda expression）是一个匿名函数，在编写 Java 中的 <code>Lambda</code> 的时候，你也会发现 <code>Lambda</code> 不仅没有函数名称，有时候甚至连入参和返回都可以省略，这也让代码变得更加紧凑。</p><h1 id="3-函数接口介绍"><a href="#3-函数接口介绍" class="headerlink" title="3. 函数接口介绍"></a>3. 函数接口介绍</h1><p>上面说了这次是介绍 <code>Lambda</code> 表达式，为什么要介绍函数接口呢？其实 Java 中的函数接口在使用时，可以隐式的转换成 <code>Lambda</code> 表达式，在 <code>Java 8</code>中已经有很多接口已经声明为函数接口，如 Runnable、Callable、Comparator 等。</p><p>函数接口的例子可以看下 <code>Java 8</code> 中的 <code>Runnable</code> 源码（去掉了注释）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么什么样子的接口才是函数接口呢？有一个很简单的定义，也就是只有<code>一个抽象函数</code>的接口，函数接口使用注解 <code>@FunctionalInterface</code> 进行声明（注解声明不是必须的，如果没有注解，也是只有一个抽象函数，依旧会被认为是函数接口）。多一个或者少一个抽象函数都不能定义为函数接口，如果使用了函数接口注解又不止一个抽象函数，那么编译器会拒绝编译。函数接口在使用时候可以隐式的转换成 Lambda 表达式。</p><p><code>Java 8</code> 中很多有很多不同功能的函数接口定义，都放在了 <code>Java 8</code> 新增的 <code>java.util.function</code>包内。下面是一些关于 <code>Java 8</code> 中函数接口功能的描述。</p><table><thead><tr><th style="text-align:left">序号</th><th>接口 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>BiConsumer</strong></td><td>代表了一个接受两个输入参数的操作，并且不返回任何结果</td></tr><tr><td style="text-align:left"><strong>BiFunction</strong></td><td>代表了一个接受两个输入参数的方法，并且返回一个结果</td></tr><tr><td style="text-align:left"><strong>BinaryOperator</strong></td><td>代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果</td></tr><tr><td style="text-align:left"><strong>BiPredicate</strong></td><td>代表了一个两个参数的boolean值方法</td></tr><tr><td style="text-align:left"><strong>BooleanSupplier</strong></td><td>代表了boolean值结果的提供方</td></tr><tr><td style="text-align:left"><strong>Consumer</strong></td><td>代表了接受一个输入参数并且无返回的操作</td></tr><tr><td style="text-align:left"><strong>DoubleBinaryOperator</strong></td><td>代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。</td></tr><tr><td style="text-align:left"><strong>DoubleConsumer</strong></td><td>代表一个接受double值参数的操作，并且不返回结果。</td></tr><tr><td style="text-align:left"><strong>DoubleFunction</strong></td><td>代表接受一个double值参数的方法，并且返回结果</td></tr><tr><td style="text-align:left"><strong>DoublePredicate</strong></td><td>代表一个拥有double值参数的boolean值方法</td></tr><tr><td style="text-align:left"><strong>DoubleSupplier</strong></td><td>代表一个double值结构的提供方</td></tr><tr><td style="text-align:left"><strong>DoubleToIntFunction</strong></td><td>接受一个double类型输入，返回一个int类型结果。</td></tr><tr><td style="text-align:left"><strong>DoubleToLongFunction</strong></td><td>接受一个double类型输入，返回一个long类型结果</td></tr><tr><td style="text-align:left"><strong>DoubleUnaryOperator</strong></td><td>接受一个参数同为类型double,返回值类型也为double 。</td></tr><tr><td style="text-align:left"><strong>Function</strong></td><td>接受一个输入参数，返回一个结果。</td></tr><tr><td style="text-align:left"><strong>IntBinaryOperator</strong></td><td>接受两个参数同为类型int,返回值类型也为int 。</td></tr><tr><td style="text-align:left"><strong>IntConsumer</strong></td><td>接受一个int类型的输入参数，无返回值 。</td></tr><tr><td style="text-align:left"><strong>IntFunction</strong></td><td>接受一个int类型输入参数，返回一个结果 。</td></tr><tr><td style="text-align:left"><strong>IntPredicate</strong></td><td>接受一个int输入参数，返回一个布尔值的结果。</td></tr><tr><td style="text-align:left"><strong>IntSupplier</strong></td><td>无参数，返回一个int类型结果。</td></tr><tr><td style="text-align:left"><strong>IntToDoubleFunction</strong></td><td>接受一个int类型输入，返回一个double类型结果 。</td></tr><tr><td style="text-align:left"><strong>IntToLongFunction</strong></td><td>接受一个int类型输入，返回一个long类型结果。</td></tr><tr><td style="text-align:left"><strong>IntUnaryOperator</strong></td><td>接受一个参数同为类型int,返回值类型也为int 。</td></tr><tr><td style="text-align:left"><strong>LongBinaryOperator</strong></td><td>接受两个参数同为类型long,返回值类型也为long。</td></tr><tr><td style="text-align:left"><strong>LongConsumer</strong></td><td>接受一个long类型的输入参数，无返回值。</td></tr><tr><td style="text-align:left"><strong>LongFunction</strong></td><td>接受一个long类型输入参数，返回一个结果。</td></tr><tr><td style="text-align:left"><strong>LongPredicate</strong></td><td>接受一个long输入参数，返回一个布尔值类型结果。</td></tr><tr><td style="text-align:left"><strong>LongSupplier</strong></td><td>无参数，返回一个结果long类型的值。</td></tr><tr><td style="text-align:left"><strong>LongToDoubleFunction</strong></td><td>接受一个long类型输入，返回一个double类型结果。</td></tr><tr><td style="text-align:left"><strong>LongToIntFunction</strong></td><td>接受一个long类型输入，返回一个int类型结果。</td></tr><tr><td style="text-align:left"><strong>LongUnaryOperator</strong></td><td>接受一个参数同为类型long,返回值类型也为long。</td></tr><tr><td style="text-align:left"><strong>ObjDoubleConsumer</strong></td><td>接受一个object类型和一个double类型的输入参数，无返回值。</td></tr><tr><td style="text-align:left"><strong>ObjIntConsumer</strong></td><td>接受一个object类型和一个int类型的输入参数，无返回值。</td></tr><tr><td style="text-align:left"><strong>ObjLongConsumer</strong></td><td>接受一个object类型和一个long类型的输入参数，无返回值。</td></tr><tr><td style="text-align:left"><strong>Predicate</strong></td><td>接受一个输入参数，返回一个布尔值结果。</td></tr><tr><td style="text-align:left"><strong>Supplier</strong></td><td>无参数，返回一个结果。</td></tr><tr><td style="text-align:left"><strong>ToDoubleBiFunction</strong></td><td>接受两个输入参数，返回一个double类型结果</td></tr><tr><td style="text-align:left"><strong>ToDoubleFunction</strong></td><td>接受一个输入参数，返回一个double类型结果</td></tr><tr><td style="text-align:left"><strong>ToIntBiFunction</strong></td><td>接受两个输入参数，返回一个int类型结果。</td></tr><tr><td style="text-align:left"><strong>ToIntFunction</strong></td><td>接受一个输入参数，返回一个int类型结果。</td></tr><tr><td style="text-align:left"><strong>ToLongBiFunction</strong></td><td>接受两个输入参数，返回一个long类型结果。</td></tr><tr><td style="text-align:left"><strong>ToLongFunction</strong></td><td>接受一个输入参数，返回一个long类型结果。</td></tr><tr><td style="text-align:left"><strong>UnaryOperator</strong></td><td>接受一个参数为类型T,返回值类型也为T。</td></tr></tbody></table><p>（上面表格来源于菜鸟教程）</p><h1 id="3-Lambda-语法"><a href="#3-Lambda-语法" class="headerlink" title="3. Lambda 语法"></a>3. Lambda 语法</h1><p>Lambda 的语法主要是下面几种。</p><ol><li><p>(params) -&gt; expression</p></li><li><p>(params) -&gt; {statements;}</p></li></ol><p>Lambda 的语法特性。</p><ol><li>使用 <code>-&gt;</code> 分割 Lambda 参数和处理语句。</li><li>类型可选，可以不指定参数类型，编译器可以自动判断。</li><li>圆括号可选，如果只有一个参数，可以不需要圆括号，多个参数必须要圆括号。</li><li>花括号可选，一个语句可以不用花括号，多个参数则花括号必须。</li><li>返回值可选，如果只有一个表达式，可以自动返回，不需要 return 语句；花括号中需要 return 语法。<ol start="6"><li>Lambda 中引用的外部变量必须为 final 类型，内部声明的变量不可修改，内部声明的变量名称不能与外部变量名相同。</li></ol></li></ol><p>举几个具体的例子， params 在只有一个参数或者没有参数的时候，可以直接省略不写，像这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.不需要参数，没有返回值，输出 hello</span></span><br><span class="line">()-&gt;System.out.pritnln(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.不需要参数，返回 hello</span></span><br><span class="line">()-&gt;<span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),返回两数之和 </span></span><br><span class="line">(x, y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接受2个数字参数,返回两数之和 </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 两个数字参数，如果都大于10，返回和，如果都小于10，返回差</span></span><br><span class="line">(<span class="keyword">int</span> x,<span class="keyword">int</span> y) -&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>( x &gt; <span class="number">10</span> &amp;&amp; y &gt; <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>( x &lt; <span class="number">10</span> &amp;&amp; y &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> Math.abs(x-y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过上面的几种情况，已经可以大致了解 Lambda 的语法结构了。</p><h1 id="4-Lambda-使用"><a href="#4-Lambda-使用" class="headerlink" title="4. Lambda 使用"></a>4. Lambda 使用</h1><h2 id="4-1-对于函数接口"><a href="#4-1-对于函数接口" class="headerlink" title="4.1 对于函数接口"></a>4.1 对于函数接口</h2><p>从上面的介绍中已经知道了 Runnable 接口已经是函数接口了，它可以隐式的转换为 Lambda 表达式进行使用，通过下面的创建线程并运行的例子看下 <code>Java 8</code> 中 Lambda 表达式的具体使用方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lambda 的使用，使用 Runnable 例子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createLambda</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 Lambda 之前</span></span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"JDK8 之前的线程创建"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">   <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">   <span class="comment">// 使用 Lambda 之后</span></span><br><span class="line">   Runnable runnable1Jdk8 = () -&gt; System.out.println(<span class="string">"JDK8 之后的线程创建"</span>);</span><br><span class="line">   <span class="keyword">new</span> Thread(runnable1Jdk8).start();</span><br><span class="line">   <span class="comment">// 更加紧凑的方式</span></span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"JDK8 之后的线程创建"</span>)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现 <code>Java 8</code> 中的 <code>Lambda</code> 碰到了函数接口 Runnable，自动推断了要运行的 run 方法，不仅省去了 run 方法的编写，也代码变得更加紧凑。</p><p>运行得到结果如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JDK8 之前的线程创建</span><br><span class="line">JDK8 之后的线程创建</span><br><span class="line">JDK8 之后的线程创建</span><br></pre></td></tr></table></figure><p>上面的 Runnable 函数接口里的 run 方法是没有参数的情况，如果是有参数的，那么怎么使用呢？我们编写一个函数接口，写一个 <code>say</code> 方法接受两个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义函数接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FunctionInterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数接口，Lambda 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">functionLambdaTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FunctionInterfaceDemo demo = (name, age) -&gt; System.out.println(<span class="string">"我叫"</span> + name + <span class="string">"，我今年"</span> + age + <span class="string">"岁了"</span>);</span><br><span class="line">    demo.say(<span class="string">"金庸"</span>, <span class="number">99</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫金庸，我今年<span class="number">99</span>岁了。</span><br></pre></td></tr></table></figure><h2 id="4-2-对于方法引用"><a href="#4-2-对于方法引用" class="headerlink" title="4.2 对于方法引用"></a>4.2 对于方法引用</h2><p>方法引用这个概念前面还没有介绍过，方法引用可以让我们直接访问类的实例或者方法，在 Lambda 只是执行一个方法的时候，就可以不用 <code>Lambda</code> 的编写方式，而用方法引用的方式：<code>实例/类::方法</code>。这样不仅代码更加的紧凑，而且可以增加代码的可读性。</p><p>通过一个例子查看方法引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"A"</span>, <span class="number">26</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"B"</span>, <span class="number">18</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"C"</span>, <span class="number">23</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">"D"</span>, <span class="number">19</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试方法引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User[] userArr = <span class="keyword">new</span> User[userList.size()];</span><br><span class="line">    userList.toArray(userArr);</span><br><span class="line">    <span class="comment">// User::getAge 调用 getAge 方法</span></span><br><span class="line">    Arrays.sort(userArr, Comparator.comparing(User::getAge));</span><br><span class="line">    <span class="keyword">for</span> (User user : userArr) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到输出结果。</p><p>Jdk8Lambda.User(name=B, age=18)<br>Jdk8Lambda.User(name=D, age=19)<br>Jdk8Lambda.User(name=C, age=23)<br>Jdk8Lambda.User(name=A, age=26)</p><h2 id="4-3-对于遍历方式"><a href="#4-3-对于遍历方式" class="headerlink" title="4.3 对于遍历方式"></a>4.3 对于遍历方式</h2><p>Lambda 带来了新的遍历方式，<code>Java 8</code> 为集合增加了 <code>foreach</code> 方法，它可以接受函数接口进行操作。下面看一下 <code>Lambda</code> 的集合遍历方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新的遍历方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foreachTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; skills = Arrays.asList(<span class="string">"java"</span>, <span class="string">"golang"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span>, <span class="string">"python"</span>);</span><br><span class="line">    <span class="comment">// 使用 Lambda 之前</span></span><br><span class="line">    <span class="keyword">for</span> (String skill : skills) &#123;</span><br><span class="line">        System.out.print(skill+<span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">// 使用 Lambda 之后</span></span><br><span class="line">    <span class="comment">// 方式1,forEach+lambda</span></span><br><span class="line">    skills.forEach((skill) -&gt; System.out.print(skill+<span class="string">","</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">// 方式2，forEach+方法引用</span></span><br><span class="line">    skills.forEach(System.out::print);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java,golang,c++,c,python,</span><br><span class="line">java,golang,c++,c,python,</span><br><span class="line">javagolangc++cpython</span><br></pre></td></tr></table></figure><h2 id="4-4-对于流式操作"><a href="#4-4-对于流式操作" class="headerlink" title="4.4 对于流式操作"></a>4.4 对于流式操作</h2><p>得益于 <code>Lambda</code> 的引入，让 <code>Java 8</code> 中的流式操作成为可能，<code>Java 8</code> 提供了 stream 类用于获取数据流，它专注对数据集合进行各种高效便利操作，提高了编程效率，且同时支持串行和并行的两种模式汇聚计算。能充分的利用多核优势。</p><p>流式操作如此强大， <code>Lambda</code> 在流式操作中怎么使用呢？下面来感受流操作带来的方便与高效。</p><p>流式操作一切从这里开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为集合创建串行流</span></span><br><span class="line">stream()</span><br><span class="line"><span class="comment">// 为集合创建并行流</span></span><br><span class="line">parallelStream()</span><br></pre></td></tr></table></figure><p>流式操作的去重 <code>distinct</code>和过滤 <code>filter</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">streamTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; skills = Arrays.asList(<span class="string">"java"</span>, <span class="string">"golang"</span>, <span class="string">"c++"</span>, <span class="string">"c"</span>, <span class="string">"python"</span>, <span class="string">"java"</span>);</span><br><span class="line">    <span class="comment">// Jdk8 之前</span></span><br><span class="line">    <span class="keyword">for</span> (String skill : skills) &#123;</span><br><span class="line">        System.out.print(skill + <span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">// Jdk8 之后-去重遍历</span></span><br><span class="line">    skills.stream().distinct().forEach(skill -&gt; System.out.print(skill + <span class="string">","</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">// Jdk8 之后-去重遍历</span></span><br><span class="line">    skills.stream().distinct().forEach(System.out::print);</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">// Jdk8 之后-去重，过滤掉 ptyhon 再遍历</span></span><br><span class="line">    skills.stream().distinct().filter(skill -&gt; skill != <span class="string">"python"</span>).forEach(skill -&gt; System.out.print(skill + <span class="string">","</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">// Jdk8 之后转字符串</span></span><br><span class="line">    String skillString = String.join(<span class="string">","</span>, skills);</span><br><span class="line">    System.out.println(skillString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java,golang,c++,c,python,java,</span><br><span class="line">java,golang,c++,c,python,</span><br><span class="line">javagolangc++cpython</span><br><span class="line">java,golang,c++,c,</span><br><span class="line">java,golang,c++,c,python,java</span><br></pre></td></tr></table></figure><p>流式操作的数据转换（也称映射）<code>map</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 数据转换</span></span><br><span class="line">    numList.stream().map(num -&gt; num * num).forEach(num -&gt; System.out.print(num + <span class="string">","</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据收集</span></span><br><span class="line">    Set&lt;Integer&gt; numSet = numList.stream().map(num -&gt; num * num).collect(Collectors.toSet());</span><br><span class="line">    numSet.forEach(num -&gt; System.out.print(num + <span class="string">","</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,4,9,16,25,</span><br><span class="line">16,1,4,9,25,</span><br></pre></td></tr></table></figure><p>流式操作的数学计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数学计算测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapMathTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    IntSummaryStatistics stats = list.stream().mapToInt(x -&gt; x).summaryStatistics();</span><br><span class="line">    System.out.println(<span class="string">"最小值："</span> + stats.getMin());</span><br><span class="line">    System.out.println(<span class="string">"最大值："</span> + stats.getMax());</span><br><span class="line">    System.out.println(<span class="string">"个数："</span> + stats.getCount());</span><br><span class="line">    System.out.println(<span class="string">"和："</span> + stats.getSum());</span><br><span class="line">    System.out.println(<span class="string">"平均数："</span> + stats.getAverage());</span><br><span class="line">    <span class="comment">// 求和的另一种方式</span></span><br><span class="line">    Integer integer = list.stream().reduce((sum, cost) -&gt; sum + cost).get();</span><br><span class="line">    System.out.println(integer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">得到输出</span><br><span class="line">最小值：1</span><br><span class="line">最大值：5</span><br><span class="line">个数：5</span><br><span class="line">和：15</span><br><span class="line">平均数：3.0</span><br><span class="line">15</span><br></pre></td></tr></table></figure><h1 id="5-Lambda-总结"><a href="#5-Lambda-总结" class="headerlink" title="5. Lambda 总结"></a>5. Lambda 总结</h1><p><code>Lamdba</code> 结合函数接口，方法引用，类型推导以及流式操作，可以让代码变得更加简洁紧凑，也可以借此开发出更加强大且支持并行计算的程序，函数编程也为 Java 带来了新的程序设计方式。但是缺点也很明显，在实际的使用过程中可能会发现调式困难，测试表示 <code>Lamdba</code> 的遍历性能并不如 for 的性能高，同事可能没有学习导致看不懂 <code>Lamdba</code> 等（可以推荐来看这篇文章）。</p><p>文章代码已经上传到 <a href="https://github.com/niumoo/jdk-feature" target="_blank" rel="noopener">https://github.com/niumoo/jdk-feature)</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当前时间：2019年 11月 11日，距离 JDK 14 发布时间（2020年3月17日）还有多少天？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 距离JDK 14 发布还有多少天？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LocalDate jdk14 = LocalDate.of(&lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LocalDate nowDate = LocalDate.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;距离JDK 14 发布还有：&quot;&lt;/span&gt;+nowDate.until(jdk14,ChronoUnit.DAYS)+&lt;span class=&quot;string&quot;&gt;&quot;天&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Jdk 新特性" scheme="https://www.codingme.net/categories/Jdk-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java8" scheme="https://www.codingme.net/tags/Java8/"/>
    
      <category term="Lambda" scheme="https://www.codingme.net/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Arthas - Java 线上问题定位处理的终极利器</title>
    <link href="https://www.codingme.net/2019/11/arthas/"/>
    <id>https://www.codingme.net/2019/11/arthas/</id>
    <published>2019-11-05T18:15:08.000Z</published>
    <updated>2019-11-13T02:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/arthas/arthas-1572972116473.png" alt="Arthas logo"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用 <strong>Arthas</strong> 之前，当遇到 Java 线上问题时，如 CPU 飙升、负载突高、内存溢出等问题，你需要查命令，查网络，然后 jps、jstack、jmap、jhat、jstat、hprof 等一通操作。最终焦头烂额，还不一定能查出问题所在。而现在，大多数的常见问题你都可以使用 <strong>Arthas</strong> 轻松定位，迅速解决，及时止损，准时下班。</p><h1 id="1、Arthas-介绍"><a href="#1、Arthas-介绍" class="headerlink" title="1、Arthas  介绍"></a>1、Arthas  介绍</h1><p><strong>Arthas</strong> 是 <code>Alibaba</code> 在 2018 年 9 月开源的 <strong>Java 诊断</strong>工具。支持 <code>JDK6+</code>， 采用命令行交互模式，提供 <code>Tab</code> 自动不全，可以方便的定位和诊断线上程序运行问题。截至本篇文章编写时，已经收获 <code>Star</code> 17000+。</p><p><strong>Arthas</strong> 官方文档十分详细，本文也参考了官方文档内容，同时在开源在的 <code>Github</code> 的项目里的 <code>Issues</code> 里不仅有问题反馈，更有大量的使用案例，也可以进行学习参考。</p><p>开源地址：<em><a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></em></p><p>官方文档：<em><a href="https://alibaba.github.io/arthas" target="_blank" rel="noopener">https://alibaba.github.io/arthas</a></em></p><a id="more"></a><h1 id="2、Arthas-使用场景"><a href="#2、Arthas-使用场景" class="headerlink" title="2、Arthas  使用场景"></a>2、Arthas  使用场景</h1><p>得益于 <strong>Arthas</strong> 强大且丰富的功能，让 <strong>Arthas</strong> 能做的事情超乎想象。下面仅仅列举几项常见的使用情况，更多的使用场景可以在熟悉了 <strong>Arthas</strong> 之后自行探索。</p><ol><li>是否有一个全局视角来查看系统的运行状况？</li><li>为什么 CPU 又升高了，到底是哪里占用了 CPU ？</li><li>运行的多线程有死锁吗？有阻塞吗？</li><li>程序运行耗时很长，是哪里耗时比较长呢？如何监测呢？</li><li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li><li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li><li>有什么办法可以监控到 JVM 的实时运行状态？</li></ol><h1 id="3、Arthas-怎么用"><a href="#3、Arthas-怎么用" class="headerlink" title="3、Arthas  怎么用"></a>3、Arthas  怎么用</h1><p>前文已经提到，<strong>Arthas</strong> 是一款命令行交互模式的 Java 诊断工具，由于是 Java 编写，所以可以直接下载相应 的 jar 包运行。</p><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><p>可以在官方 Github 上进行下载，如果速度较慢，可以尝试国内的码云 Gitee 下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> github下载</span><br><span class="line">wget https://alibaba.github.io/arthas/arthas-boot.jar</span><br><span class="line"><span class="meta">#</span> 或者 Gitee 下载</span><br><span class="line">wget https://arthas.gitee.io/arthas-boot.jar</span><br><span class="line"><span class="meta">#</span> 打印帮助信息</span><br><span class="line">java -jar arthas-boot.jar -h</span><br></pre></td></tr></table></figure><h2 id="3-2-运行"><a href="#3-2-运行" class="headerlink" title="3.2 运行"></a>3.2 运行</h2><p><strong>Arthas</strong> 只是一个 java 程序，所以可以直接用 <code>java -jar</code> 运行。运行时或者运行之后要选择要监测的 Java 进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 运行方式1，先运行，在选择 Java 进程 PID</span><br><span class="line">java -jar arthas-boot.jar</span><br><span class="line"><span class="meta">#</span> 选择进程(输入[]内编号(不是PID)回车)</span><br><span class="line">[INFO] arthas-boot version: 3.1.4</span><br><span class="line">[INFO] Found existing java process, please choose one and hit RETURN.</span><br><span class="line">* [1]: 11616 com.Arthas</span><br><span class="line">  [2]: 8676</span><br><span class="line">  [3]: 16200 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">  [4]: 21032 org.jetbrains.idea.maven.server.RemoteMavenServer</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 运行方式2，运行时选择 Java 进程 PID</span><br><span class="line">java -jar arthas-boot.jar [PID]</span><br></pre></td></tr></table></figure><p>查看 PID 的方式可以通过 <code>ps</code> 命令，也可以通过 JDK 提供的 <code>jps</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看运行的 java 进程信息</span><br><span class="line"><span class="meta">$</span> jps -mlvV </span><br><span class="line"><span class="meta">#</span> 筛选 java 进程信息</span><br><span class="line"><span class="meta">$</span> jps -mlvV | grep [xxx]</span><br></pre></td></tr></table></figure><p><code>jps</code> 筛选想要的进程方式。</p><p><img src="/assets/arthas/1570979767404.png" alt="jps 筛选进程"></p><p>在出现 <strong>Arthas</strong> Logo 之后就可以使用命令进行问题诊断了。下面会详细介绍。</p><p><img src="/assets/arthas/image-20191106003512451.png" alt="Arthas 启动"></p><p>更多的启动方式可以参考 help 帮助命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 其他用法</span><br><span class="line">EXAMPLES:</span><br><span class="line">  java -jar arthas-boot.jar &lt;pid&gt;</span><br><span class="line">  java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br><span class="line">  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1</span><br><span class="line">  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'</span><br><span class="line">  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'</span><br><span class="line">--agent-id bvDOe8XbTM2pQWjF4cfw</span><br><span class="line">  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'</span><br><span class="line">  java -jar arthas-boot.jar -c 'sysprop; thread' &lt;pid&gt;</span><br><span class="line">  java -jar arthas-boot.jar -f batch.as &lt;pid&gt;</span><br><span class="line">  java -jar arthas-boot.jar --use-version 3.1.4</span><br><span class="line">  java -jar arthas-boot.jar --versions</span><br><span class="line">  java -jar arthas-boot.jar --session-timeout 3600</span><br><span class="line">  java -jar arthas-boot.jar --attach-only</span><br><span class="line">  java -jar arthas-boot.jar --repo-mirror aliyun --use-http</span><br></pre></td></tr></table></figure><h2 id="3-3-web-console"><a href="#3-3-web-console" class="headerlink" title="3.3 web console"></a>3.3 web console</h2><p><strong>Arthas</strong> 目前支持 <code>Web Console</code>，在成功启动连接进程之后就已经自动启动，可以直接访问 <a href="http://127.0.0.1:8563/" target="_blank" rel="noopener">http://127.0.0.1:8563/</a> 访问，页面上的操作模式和控制台完全一样。  </p><p><img src="/assets/arthas/1570979937637.png" alt="1570979937637"></p><h2 id="3-4-常用命令"><a href="#3-4-常用命令" class="headerlink" title="3.4 常用命令"></a>3.4 常用命令</h2><p>下面列举一些 <a href="https://www.codingme.net/2019/11/arthas/"><strong>Arthas</strong></a> 的常用命令，看到这里你可能还不知道怎么使用，别急，后面会一一介绍。</p><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td><a href="https://alibaba.github.io/arthas/dashboard.html" target="_blank" rel="noopener">dashboard</a></td><td>当前系统的实时数据面板</td></tr><tr><td><a href="https://alibaba.github.io/arthas/thread.html" target="_blank" rel="noopener"><strong>thread</strong></a></td><td>查看当前 JVM 的线程堆栈信息</td></tr><tr><td><a href="https://alibaba.github.io/arthas/watch.html" target="_blank" rel="noopener"><strong>watch</strong></a></td><td>方法执行数据观测</td></tr><tr><td><strong><a href="https://alibaba.github.io/arthas/trace.html" target="_blank" rel="noopener">trace</a></strong></td><td>方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td><a href="https://alibaba.github.io/arthas/stack.html" target="_blank" rel="noopener"><strong>stack</strong></a></td><td>输出当前方法被调用的调用路径</td></tr><tr><td><a href="https://alibaba.github.io/arthas/tt.html" target="_blank" rel="noopener"><strong>tt</strong></a></td><td>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td><a href="https://alibaba.github.io/arthas/monitor.html" target="_blank" rel="noopener">monitor</a></td><td>方法执行监控</td></tr><tr><td><a href="https://alibaba.github.io/arthas/jvm.html" target="_blank" rel="noopener">jvm</a></td><td>查看当前 JVM 信息</td></tr><tr><td><a href="https://alibaba.github.io/arthas/vmoption.html" target="_blank" rel="noopener">vmoption</a></td><td>查看，更新 JVM 诊断相关的参数</td></tr><tr><td><a href="https://alibaba.github.io/arthas/sc.html" target="_blank" rel="noopener">sc</a></td><td>查看 JVM 已加载的类信息</td></tr><tr><td><a href="https://alibaba.github.io/arthas/sm.html" target="_blank" rel="noopener">sm</a></td><td>查看已加载类的方法信息</td></tr><tr><td><a href="https://alibaba.github.io/arthas/jad.html" target="_blank" rel="noopener">jad</a></td><td>反编译指定已加载类的源码</td></tr><tr><td><a href="https://alibaba.github.io/arthas/classloader.html" target="_blank" rel="noopener">classloader</a></td><td>查看 classloader 的继承树，urls，类加载信息</td></tr><tr><td><a href="https://alibaba.github.io/arthas/heapdump.html" target="_blank" rel="noopener">heapdump</a></td><td>类似 jmap 命令的 heap dump 功能</td></tr></tbody></table><h2 id="3-5-退出"><a href="#3-5-退出" class="headerlink" title="3.5 退出"></a>3.5 退出</h2><p>使用 shutdown 退出时 <strong>Arthas</strong> 同时自动重置所有增强过的类 。</p><h1 id="4、Arthas-常用操作"><a href="#4、Arthas-常用操作" class="headerlink" title="4、Arthas 常用操作"></a>4、Arthas 常用操作</h1><p>上面已经了解了什么是  <strong>Arthas</strong>，以及  <strong>Arthas</strong> 的启动方式，下面会依据一些情况，详细说一说 <strong>Arthas</strong> 的使用方式。在使用命令的过程中如果有问题，每个命令都可以是 <code>-h</code> 查看帮助信息。</p><p>首先编写一个有各种情况的测试类运行起来，再使用 <strong>Arthas</strong> 进行问题定位，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Arthas Demo</span></span><br><span class="line"><span class="comment"> * 公众号：未读代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arthas</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashSet hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line">    <span class="comment">/** 线程池，大小1*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟 CPU 过高，这里注释掉了，测试时可以打开</span></span><br><span class="line">        <span class="comment">// cpu();</span></span><br><span class="line">        <span class="comment">// 模拟线程阻塞</span></span><br><span class="line">        thread();</span><br><span class="line">        <span class="comment">// 模拟线程死锁</span></span><br><span class="line">        deadThread();</span><br><span class="line">        <span class="comment">// 不断的向 hashSet 集合增加数据</span></span><br><span class="line">        addHashSetThread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不断的向 hashSet 集合添加数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addHashSetThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化常量</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    hashSet.add(<span class="string">"count"</span> + count);</span><br><span class="line">                    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cpuHigh();</span><br><span class="line">        cpuNormal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 极度消耗CPU的线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cpuHigh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                log.info(<span class="string">"cpu start 100"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 添加到线程</span></span><br><span class="line">        executorService.submit(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通消耗CPU的线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cpuNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    log.info(<span class="string">"cpu start"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟线程阻塞,向已经满了的线程池提交线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                log.debug(<span class="string">"thread start"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 添加到线程</span></span><br><span class="line">        executorService.submit(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deadThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** 创建资源 */</span></span><br><span class="line">        Object resourceA = <span class="keyword">new</span> Object();</span><br><span class="line">        Object resourceB = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        Thread threadA = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resourceA) &#123;</span><br><span class="line">                log.info(Thread.currentThread() + <span class="string">" get ResourceA"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(Thread.currentThread() + <span class="string">"waiting get resourceB"</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resourceB) &#123;</span><br><span class="line">                    log.info(Thread.currentThread() + <span class="string">" get resourceB"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread threadB = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resourceB) &#123;</span><br><span class="line">                log.info(Thread.currentThread() + <span class="string">" get ResourceB"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(Thread.currentThread() + <span class="string">"waiting get resourceA"</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resourceA) &#123;</span><br><span class="line">                    log.info(Thread.currentThread() + <span class="string">" get resourceA"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-1-全局监控"><a href="#4-1-全局监控" class="headerlink" title="4.1 全局监控"></a>4.1 全局监控</h2><p>使用 <strong>dashboard</strong> 命令可以概览程序的 线程、内存、GC、运行环境信息。</p><p><img src="/assets/arthas/1571212470373.png" alt="dashboard"></p><h2 id="4-2-CPU-为什么起飞了"><a href="#4-2-CPU-为什么起飞了" class="headerlink" title="4.2 CPU 为什么起飞了"></a>4.2 CPU 为什么起飞了</h2><p>上面的代码例子有一个 <code>CPU</code> 空转的死循环，非常的消耗 <code>CPU性能</code>，那么怎么找出来呢？</p><p>使用 <strong>thread</strong>查看<strong>所有</strong>线程信息，同时会列出每个线程的 <code>CPU</code> 使用率，可以看到图里 ID 为12 的线程 CPU 使用100%。<br><img src="/assets/arthas/1570983440457.png" alt=""></p><p>使用命令 <strong>thread 12</strong> 查看 CPU 消耗较高的 12 号线程信息，可以看到 CPU 使用较高的方法和行数（这里的行数可能和上面代码里的行数有区别，因为上面的代码在我写文章时候重新排过版了）。</p><p><img src="/assets/arthas/1570983401254.png" alt=""></p><p>上面是先通过观察总体的线程信息，然后查看具体的线程运行情况。如果只是为了寻找 CPU 使用较高的线程，可以直接使用命令 <strong>thread -n [显示的线程个数]</strong> ，就可以排列出 CPU 使用率 <strong>Top N</strong> 的线程。</p><p><img src="/assets/arthas/1570983061047.png" alt=""></p><p>定位到的 CPU 使用最高的方法。</p><p><img src="/assets/arthas/1571016675083.png" alt=""></p><h2 id="4-3-线程池线程状态"><a href="#4-3-线程池线程状态" class="headerlink" title="4.3 线程池线程状态"></a>4.3 线程池线程状态</h2><p>定位线程问题之前，先回顾一下线程的几种常见状态：</p><ul><li><strong>RUNNABLE</strong> 运行中</li><li><strong>TIMED_WAITIN</strong> 调用了以下方法的线程会进入<strong>TIMED_WAITING</strong>：<ol><li>Thread#sleep()</li><li>Object#wait() 并加了超时参数</li><li>Thread#join() 并加了超时参数</li><li>LockSupport#parkNanos()</li><li>LockSupport#parkUntil()</li></ol></li><li><strong>WAITING</strong> 当线程调用以下方法时会进入WAITING状态：<ol><li>Object#wait() 而且不加超时参数</li><li>Thread#join() 而且不加超时参数</li><li>LockSupport#park()</li></ol></li><li><strong>BLOCKED</strong> 阻塞，等待锁</li></ul><p>上面的模拟代码里，定义了线程池大小为1 的线程池，然后在 <code>cpuHigh</code> 方法里提交了一个线程，在 <code>thread</code>方法再次提交了一个线程，后面的这个线程因为线程池已满，会阻塞下来。</p><p>使用 <strong>thread | grep pool</strong> 命令查看线程池里线程信息。</p><p><img src="/assets/arthas/1571020871537.png" alt=""></p><p>可以看到线程池有 <strong>WAITING</strong> 的线程。</p><p><img src="/assets/arthas/1571021838323.png" alt=""></p><h2 id="4-4-线程死锁"><a href="#4-4-线程死锁" class="headerlink" title="4.4 线程死锁"></a>4.4 线程死锁</h2><p>上面的模拟代码里 <code>deadThread</code>方法实现了一个死锁，使用 <strong>thread -b</strong> 命令查看直接定位到死锁信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deadThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 创建资源 */</span></span><br><span class="line">    Object resourceA = <span class="keyword">new</span> Object();</span><br><span class="line">    Object resourceB = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">// 创建线程</span></span><br><span class="line">    Thread threadA = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (resourceA) &#123;</span><br><span class="line">            log.info(Thread.currentThread() + <span class="string">" get ResourceA"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(Thread.currentThread() + <span class="string">"waiting get resourceB"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (resourceB) &#123;</span><br><span class="line">                log.info(Thread.currentThread() + <span class="string">" get resourceB"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Thread threadB = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (resourceB) &#123;</span><br><span class="line">            log.info(Thread.currentThread() + <span class="string">" get ResourceB"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(Thread.currentThread() + <span class="string">"waiting get resourceA"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (resourceA) &#123;</span><br><span class="line">                log.info(Thread.currentThread() + <span class="string">" get resourceA"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    threadA.start();</span><br><span class="line">    threadB.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查到的死锁信息。</p><p><img src="/assets/arthas/1571206638142.png" alt=""></p><h2 id="4-5-反编译"><a href="#4-5-反编译" class="headerlink" title="4.5 反编译"></a>4.5 反编译</h2><p>上面的代码放到了包 <code>com</code>下，假设这是一个线程环境，当怀疑当前运行的代码不是自己想要的代码时，可以直接反编译出代码，也可以选择性的查看类的字段或方法信息。</p><p>如果怀疑不是自己的代码，可以使用 <strong>jad</strong> 命令直接反编译 class。</p><p><img src="/assets/arthas/image-20191106012005747.png" alt="jad"></p><p><code>jad</code> 命令还提供了一些其他参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 反编译只显示源码</span><br><span class="line">jad --source-only com.Arthas</span><br><span class="line"><span class="meta">#</span> 反编译某个类的某个方法</span><br><span class="line">jad --source-only com.Arthas mysql</span><br></pre></td></tr></table></figure><h2 id="4-6-查看字段信息"><a href="#4-6-查看字段信息" class="headerlink" title="4.6 查看字段信息"></a>4.6 查看字段信息</h2><p>使用  <strong>sc -d -f </strong> 命令查看类的字段信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[arthas@20252]$</span> sc -d -f com.Arthas</span><br><span class="line">sc -d -f com.Arthas</span><br><span class="line"> class-info        com.Arthas</span><br><span class="line"> code-source       /C:/Users/Niu/Desktop/arthas/target/classes/</span><br><span class="line"> name              com.Arthas</span><br><span class="line"> isInterface       false</span><br><span class="line"> isAnnotation      false</span><br><span class="line"> isEnum            false</span><br><span class="line"> isAnonymousClass  false</span><br><span class="line"> isArray           false</span><br><span class="line"> isLocalClass      false</span><br><span class="line"> isMemberClass     false</span><br><span class="line"> isPrimitive       false</span><br><span class="line"> isSynthetic       false</span><br><span class="line"> simple-name       Arthas</span><br><span class="line"> modifier          public</span><br><span class="line"> annotation</span><br><span class="line"> interfaces</span><br><span class="line"> super-class       +-java.lang.Object</span><br><span class="line"> class-loader      +-sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">                     +-sun.misc.Launcher$ExtClassLoader@2ef1e4fa</span><br><span class="line"> classLoaderHash   18b4aac2</span><br><span class="line"> fields            modifierfinal,private,static</span><br><span class="line">                   type    org.slf4j.Logger</span><br><span class="line">                   name    log</span><br><span class="line">                   value   Logger[com.Arthas]</span><br><span class="line"></span><br><span class="line">                   modifierprivate,static</span><br><span class="line">                   type    java.util.HashSet</span><br><span class="line">                   name    hashSet</span><br><span class="line">                   value   [count1, count2]</span><br><span class="line"></span><br><span class="line">                   modifierprivate,static</span><br><span class="line">                   type    java.util.concurrent.ExecutorService</span><br><span class="line">                   name    executorService</span><br><span class="line">                   value   java.util.concurrent.ThreadPoolExecutor@71c03156[Ru</span><br><span class="line">                           nning, pool size = 1, active threads = 1, queued ta</span><br><span class="line">                           sks = 0, completed tasks = 0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost in 9 ms.</span><br></pre></td></tr></table></figure><h2 id="4-7-查看方法信息"><a href="#4-7-查看方法信息" class="headerlink" title="4.7 查看方法信息"></a>4.7 查看方法信息</h2><p>使用 <strong>sm</strong> 命令查看类的方法信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[arthas@22180]$</span> sm com.Arthas</span><br><span class="line">com.Arthas &lt;init&gt;()V</span><br><span class="line">com.Arthas start()V</span><br><span class="line">com.Arthas thread()V</span><br><span class="line">com.Arthas deadThread()V</span><br><span class="line">com.Arthas lambda$cpuHigh$1()V</span><br><span class="line">com.Arthas cpuHigh()V</span><br><span class="line">com.Arthas lambda$thread$3()V</span><br><span class="line">com.Arthas addHashSetThread()V</span><br><span class="line">com.Arthas cpuNormal()V</span><br><span class="line">com.Arthas cpu()V</span><br><span class="line">com.Arthas lambda$addHashSetThread$0()V</span><br><span class="line">com.Arthas lambda$deadThread$4(Ljava/lang/Object;Ljava/lang/Object;)V</span><br><span class="line">com.Arthas lambda$deadThread$5(Ljava/lang/Object;Ljava/lang/Object;)V</span><br><span class="line">com.Arthas lambda$cpuNormal$2()V</span><br><span class="line">Affect(row-cnt:16) cost in 6 ms.</span><br></pre></td></tr></table></figure><h2 id="4-8-对变量的值很是好奇"><a href="#4-8-对变量的值很是好奇" class="headerlink" title="4.8 对变量的值很是好奇"></a>4.8 对变量的值很是好奇</h2><p>使用 <strong>ognl</strong> 命令，ognl 表达式可以轻松操作想要的信息。</p><p>代码还是上面的示例代码，我们查看变量 <code>hashSet</code> 中的数据：</p><p><img src="/assets/arthas/1571196786678.png" alt=""></p><p>查看静态变量 <code>hashSet</code> 信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[arthas@19856]$</span> ognl '@com.Arthas@hashSet'</span><br><span class="line">@HashSet[</span><br><span class="line">    @String[count1],</span><br><span class="line">    @String[count2],</span><br><span class="line">    @String[count29],</span><br><span class="line">    @String[count28],</span><br><span class="line">    @String[count0],</span><br><span class="line">    @String[count27],</span><br><span class="line">    @String[count5],</span><br><span class="line">    @String[count26],</span><br><span class="line">    @String[count6],</span><br><span class="line">    @String[count25],</span><br><span class="line">    @String[count3],</span><br><span class="line">    @String[count24],</span><br></pre></td></tr></table></figure><p>查看静态变量 hashSet 大小。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[arthas@19856]$</span> ognl '@com.Arthas@hashSet.size()'</span><br><span class="line">@Integer[57]</span><br></pre></td></tr></table></figure><p>甚至可以进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[arthas@19856]$</span> ognl  '@com.Arthas@hashSet.add("test")'</span><br><span class="line">@Boolean[true]</span><br><span class="line"><span class="meta">[arthas@19856]$</span></span><br><span class="line"><span class="meta">#</span> 查看添加的字符</span><br><span class="line"><span class="meta">[arthas@19856]$</span> ognl  '@com.Arthas@hashSet' | grep test</span><br><span class="line">    @String[test],</span><br><span class="line"><span class="meta">[arthas@19856]$</span></span><br></pre></td></tr></table></figure><p><code>ognl</code> 可以做很多事情，可以参考 <a href="https://github.com/alibaba/arthas/issues/71" target="_blank" rel="noopener">ognl 表达式特殊用法( https://github.com/alibaba/arthas/issues/71 )</a>。</p><h2 id="4-9-程序有没有问题"><a href="#4-9-程序有没有问题" class="headerlink" title="4.9 程序有没有问题"></a>4.9 程序有没有问题</h2><h3 id="4-9-1-运行较慢、耗时较长"><a href="#4-9-1-运行较慢、耗时较长" class="headerlink" title="4.9.1 运行较慢、耗时较长"></a>4.9.1 运行较慢、耗时较长</h3><p>使用 <strong>trace</strong> 命令可以跟踪统计方法耗时</p><p>这次换一个模拟代码。一个最基础的 Springboot 项目（当然，不想 Springboot 的话，你也可以直接在 UserController 里 main 方法启动）控制层 <code>getUser</code> 方法调用了 <code>userService.get(uid);</code>，这个方法中分别进行<code>check</code>、<code>service</code>、<code>redis</code>、<code>mysql</code>操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">getUser</span><span class="params">(Integer uid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟用户查询</span></span><br><span class="line">        userService.get(uid);</span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">"uid"</span>, uid);</span><br><span class="line">        hashMap.put(<span class="string">"name"</span>, <span class="string">"name"</span> + uid);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟代码 Service:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Integer uid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        check(uid);</span><br><span class="line">        service(uid);</span><br><span class="line">        redis(uid);</span><br><span class="line">        mysql(uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(Integer uid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            count += i;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"service  end &#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redis</span><span class="params">(Integer uid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            count += i;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"redis  end &#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mysql</span><span class="params">(Integer uid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            count += i;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"mysql end &#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(Integer uid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (uid == <span class="keyword">null</span> || uid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             log.error(<span class="string">"uid不正确，uid:&#123;&#125;"</span>, uid);</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"uid不正确"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 Springboot 之后，使用 <strong>trace== </strong> 命令开始检测耗时情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[arthas@6592]$</span> trace com.UserController getUser</span><br></pre></td></tr></table></figure><p>访问接口 <code>/getUser</code> ，可以看到耗时信息，看到 <code>com.UserServiceImpl:get()</code>方法耗时较高。<br><img src="/assets/arthas/1571208153793.png" alt=""></p><p>继续跟踪耗时高的方法，然后再次访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[arthas@6592]$</span> trace com.UserServiceImpl get</span><br></pre></td></tr></table></figure><p><img src="/assets/arthas/1571208245597.png" alt=""></p><p>很清楚的看到是 <code>com.UserServiceImpl</code>的  <code>mysql</code>方法耗时是最高的。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 31 ms.</span><br><span class="line">`---ts=<span class="number">2019</span>-<span class="number">10</span>-<span class="number">16</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">10</span>;thread_name=http-nio-<span class="number">8080</span>-exec-<span class="number">8</span>;id=<span class="number">1f</span>;is_daemon=<span class="keyword">true</span>;priority=<span class="number">5</span>;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@<span class="number">23</span>a918c7</span><br><span class="line">    `---[<span class="number">6.792201</span>ms] com.UserServiceImpl:get()</span><br><span class="line">        +---[0.008ms] com.UserServiceImpl:check() #17</span><br><span class="line">        +---[0.076ms] com.UserServiceImpl:service() #18</span><br><span class="line">        +---[0.1089ms] com.UserServiceImpl:redis() #19</span><br><span class="line">        `---[6.528899ms] com.UserServiceImpl:mysql() #20</span><br></pre></td></tr></table></figure><h3 id="4-9-2-统计方法耗时"><a href="#4-9-2-统计方法耗时" class="headerlink" title="4.9.2 统计方法耗时"></a>4.9.2 统计方法耗时</h3><p>使用 <strong>monitor</strong> 命令监控统计方法的执行情况。</p><p>每5秒统计一次 <code>com.UserServiceImpl</code> 类的 <code>get</code> 方法执行情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monitor -c 5 com.UserServiceImpl get</span><br></pre></td></tr></table></figure><p><img src="/assets/arthas/1571210158018.png" alt=""></p><h2 id="4-10-想观察方法信息"><a href="#4-10-想观察方法信息" class="headerlink" title="4.10 想观察方法信息"></a>4.10 想观察方法信息</h2><p>下面的示例用到了文章的前两个模拟代码。</p><h3 id="4-10-1-观察方法的入参出参信息"><a href="#4-10-1-观察方法的入参出参信息" class="headerlink" title="4.10.1 观察方法的入参出参信息"></a>4.10.1 观察方法的入参出参信息</h3><p>使用 <strong>watch</strong> 命令轻松查看输入输出参数以及异常等信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">  watch [-b] [-e] [-x &lt;value&gt;] [-f] [-h] [-n &lt;value&gt;] [-E] [-M &lt;value&gt;] [-s] class-pattern method-pattern express [condition-express]</span><br><span class="line"></span><br><span class="line">SUMMARY:</span><br><span class="line">  Display the input/output parameter, return object, and thrown exception of specified method invocation</span><br><span class="line">  The express may be one of the following expression (evaluated dynamically):</span><br><span class="line">          target : the object</span><br><span class="line">           clazz : the object's class</span><br><span class="line">          method : the constructor or method</span><br><span class="line">          params : the parameters array of method</span><br><span class="line">    params[0..n] : the element of parameters array</span><br><span class="line">       returnObj : the returned object of method</span><br><span class="line">        throwExp : the throw exception of method</span><br><span class="line">        isReturn : the method ended by return</span><br><span class="line">         isThrow : the method ended by throwing exception</span><br><span class="line">           #cost : the execution time in ms of method invocation</span><br><span class="line">Examples:</span><br><span class="line">  watch -b org.apache.commons.lang.StringUtils isBlank params</span><br><span class="line">  watch -f org.apache.commons.lang.StringUtils isBlank returnObj</span><br><span class="line">  watch org.apache.commons.lang.StringUtils isBlank '&#123;params, target, returnObj&#125;' -x 2</span><br><span class="line">  watch -bf *StringUtils isBlank params</span><br><span class="line">  watch *StringUtils isBlank params[0]</span><br><span class="line">  watch *StringUtils isBlank params[0] params[0].length==1</span><br><span class="line">  watch *StringUtils isBlank params '#cost&gt;100'</span><br><span class="line">  watch -E -b org\.apache\.commons\.lang\.StringUtils isBlank params[0]</span><br><span class="line"></span><br><span class="line">WIKI:</span><br><span class="line">  https://alibaba.github.io/arthas/watch</span><br></pre></td></tr></table></figure><p>常用操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看入参和出参</span><br><span class="line"><span class="meta">$</span> watch com.Arthas addHashSet '&#123;params[0],returnObj&#125;'</span><br><span class="line"><span class="meta">#</span> 查看入参和出参大小</span><br><span class="line"><span class="meta">$</span> watch com.Arthas addHashSet '&#123;params[0],returnObj.size&#125;'</span><br><span class="line"><span class="meta">#</span> 查看入参和出参中是否包含 'count10'</span><br><span class="line"><span class="meta">$</span> watch com.Arthas addHashSet '&#123;params[0],returnObj.contains("count10")&#125;'</span><br><span class="line"><span class="meta">#</span> 查看入参和出参，出参 toString</span><br><span class="line"><span class="meta">$</span> watch com.Arthas addHashSet '&#123;params[0],returnObj.toString()&#125;'</span><br></pre></td></tr></table></figure><p>查看入参出参。</p><p><img src="/assets/arthas/1571196483469.png" alt=""></p><p>查看返回的异常信息。</p><h3 id="4-10-2-观察方法的调用路径"><a href="#4-10-2-观察方法的调用路径" class="headerlink" title="4.10.2 观察方法的调用路径"></a>4.10.2 观察方法的调用路径</h3><p>使用 <strong>stack</strong>命令查看方法的调用信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 观察 类com.UserServiceImpl的 mysql 方法调用路径</span><br><span class="line">stack com.UserServiceImpl mysql</span><br></pre></td></tr></table></figure><p><img src="/assets/arthas/1571210706602.png" alt=""></p><h3 id="4-10-3-方法调用时空隧道"><a href="#4-10-3-方法调用时空隧道" class="headerlink" title="4.10.3 方法调用时空隧道"></a>4.10.3 方法调用时空隧道</h3><p>使用 <strong>tt</strong> 命令记录方法执行的详细情况。</p><blockquote><p><strong>tt</strong> 命令方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测 。</p></blockquote><p>常用操作：</p><p>开始记录方法调用信息：tt -t com.UserServiceImpl check</p><p><img src="/assets/arthas/1571212007249.png" alt=""></p><p>可以看到记录中 INDEX=1001 的记录的 IS-EXP = true ，说明这次调用出现异常。 </p><p>查看记录的方法调用信息： tt -l</p><p><img src="/assets/arthas/1571212080071.png" alt=""></p><p>查看调用记录的详细信息（-i 指定 INDEX）： tt -i 1001</p><p><img src="/assets/arthas/1571212151064.png" alt=""></p><p>可以看到 INDEX=1001 的记录的异常信息。</p><p> 重新发起调用，使用指定记录，使用 -p 重新调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tt -i <span class="number">1001</span> -p</span><br></pre></td></tr></table></figure><p><img src="/assets/arthas/1571212227058.png" alt=""></p><p>文中代码已经上传到 <a href="https://github.com/niumoo/lab-notes/tree/master/src/main/java/net/codingme/arthas" target="_blank" rel="noopener">Github</a>。</p><p><a href="https://github.com/niumoo/lab-notes/tree/master/src/main/java/net/codingme/arthas" target="_blank" rel="noopener">https://github.com/niumoo/lab-notes/tree/master/src/main/java/net/codingme/arthas</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/arthas/arthas-1572972116473.png&quot; alt=&quot;Arthas logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用 &lt;strong&gt;Arthas&lt;/strong&gt; 之前，当遇到 Java 线上问题时，如 CPU 飙升、负载突高、内存溢出等问题，你需要查命令，查网络，然后 jps、jstack、jmap、jhat、jstat、hprof 等一通操作。最终焦头烂额，还不一定能查出问题所在。而现在，大多数的常见问题你都可以使用 &lt;strong&gt;Arthas&lt;/strong&gt; 轻松定位，迅速解决，及时止损，准时下班。&lt;/p&gt;
&lt;h1 id=&quot;1、Arthas-介绍&quot;&gt;&lt;a href=&quot;#1、Arthas-介绍&quot; class=&quot;headerlink&quot; title=&quot;1、Arthas  介绍&quot;&gt;&lt;/a&gt;1、Arthas  介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Arthas&lt;/strong&gt; 是 &lt;code&gt;Alibaba&lt;/code&gt; 在 2018 年 9 月开源的 &lt;strong&gt;Java 诊断&lt;/strong&gt;工具。支持 &lt;code&gt;JDK6+&lt;/code&gt;， 采用命令行交互模式，提供 &lt;code&gt;Tab&lt;/code&gt; 自动不全，可以方便的定位和诊断线上程序运行问题。截至本篇文章编写时，已经收获 &lt;code&gt;Star&lt;/code&gt; 17000+。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arthas&lt;/strong&gt; 官方文档十分详细，本文也参考了官方文档内容，同时在开源在的 &lt;code&gt;Github&lt;/code&gt; 的项目里的 &lt;code&gt;Issues&lt;/code&gt; 里不仅有问题反馈，更有大量的使用案例，也可以进行学习参考。&lt;/p&gt;
&lt;p&gt;开源地址：&lt;em&gt;&lt;a href=&quot;https://github.com/alibaba/arthas&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/alibaba/arthas&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;官方文档：&lt;em&gt;&lt;a href=&quot;https://alibaba.github.io/arthas&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://alibaba.github.io/arthas&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生产工具" scheme="https://www.codingme.net/categories/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="问题处理" scheme="https://www.codingme.net/tags/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Jdk14都要出了，还不能使用 Optional优雅的处理空指针？</title>
    <link href="https://www.codingme.net/2019/11/jdk/jdk8-optional/"/>
    <id>https://www.codingme.net/2019/11/jdk/jdk8-optional/</id>
    <published>2019-11-04T00:01:01.000Z</published>
    <updated>2020-02-18T14:37:47.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><blockquote><p>如果你没有处理过空指针，那么你不是一位真正的 Java 程序员。</p></blockquote><p>空指针确实会产生很多问题，我们经常遇到空的引用，然后又想从这个空的引用上去获取其他的值，接着理所当然的碰到了 <code>NullPointException</code>。这是你可能会想，这报错很好处理，然后你看了眼报错行数，对比了下代码。脑海里瞬间闪过 ”对对对，这里有可能为空“，然后加上 <code>null check</code>轻松处理。然而你不知道这已经是你处理的第多少个空指针异常了。<br><a id="more"></a><br>为了解决上面的问题，在 Java SE8 中引入了一个新类 <code>java.util.Optional</code>，这个类可以<strong>缓解</strong>上面的问题。</p><p>你可能已经发现了，上面我用的是<strong>缓解</strong>而不是<strong>解决</strong>。这也是很多人理解不太对的地方，以为 Java SE8 中的 <code>Optional</code> 类可以解决空指针问题。其实 Optional 类的的使用只是<strong>提示</strong>你这里可能存在空值，需要特殊处理，并提供了一些特殊处理的方法。如果你把 <code>Optional</code> 类当作空指针的救命稻草而不加思考的使用，那么依旧会碰到错误。</p><p>因为 <code>Optional</code> 是的 Java SE8 中引入的，因此本文中难免会有一些 JDK8 中的语法，如 <strong>Lambda</strong> 表达式，流处理等，但是都是基本形式，不会有过于复杂的案例。</p><h1 id="2-Optional-创建"><a href="#2-Optional-创建" class="headerlink" title="2. Optional 创建"></a>2. Optional 创建</h1><p>Optional 的创建一共有三种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个 Optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOptionalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Optional 构造方式1 - of 传入的值不能为 null</span></span><br><span class="line">    Optional&lt;String&gt; helloOption = Optional.of(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optional 构造方式2 - empty 一个空 optional</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optional 构造方式3 - ofNullable 支持传入 null 值的 optional</span></span><br><span class="line">    Optional&lt;String&gt; nullOptional = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中构造方式1中 <code>of</code> 方法，如果传入的值会空，会报出 <code>NullPointerException</code> 异常。</p><h1 id="3-Optional-判断"><a href="#3-Optional-判断" class="headerlink" title="3. Optional 判断"></a>3. Optional 判断</h1><p>Optional 只是一个包装对象，想要判断里面有没有值可以使用 <code>isPresent</code>  方法检查其中是否有值 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查是否有值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkOptionalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; helloOptional = Optional.of(<span class="string">"Hello"</span>);</span><br><span class="line">    System.out.println(helloOptional.isPresent());</span><br><span class="line"></span><br><span class="line">    Optional&lt;Object&gt; emptyOptional = Optional.empty();</span><br><span class="line">    System.out.println(emptyOptional.isPresent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>从 JDK11 开始，提供了 <code>isEmpty</code>方法用来检查相反的结果：是否为空。</p><p>如果想要在有值的时候进行一下操作。可以使用 <code>ifPresent</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果有值，输出长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenIsPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有值，获取默认值</span></span><br><span class="line">    Optional&lt;String&gt; helloOptional = Optional.of(<span class="string">"Hello"</span>);</span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    helloOptional.ifPresent(s -&gt; System.out.println(s.length()));</span><br><span class="line">    emptyOptional.ifPresent(s -&gt; System.out.println(s.length()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="4-Optional-获取值"><a href="#4-Optional-获取值" class="headerlink" title="4. Optional 获取值"></a>4. Optional 获取值</h1><p>使用 <code>get</code>方法可以获取值，但是如果值不存在，会抛出 <code>NoSuchElementException</code> 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有值，会抛异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;String&gt; stringOptional = Optional.of(<span class="string">"hello"</span>);</span><br><span class="line">    System.out.println(stringOptional.get());</span><br><span class="line">    <span class="comment">// 如果没有值，会抛异常</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    System.out.println(emptyOptional.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line"></span><br><span class="line">java.util.NoSuchElementException: No value present</span><br><span class="line">at java.util.Optional.get(Optional.java:<span class="number">135</span>)</span><br><span class="line">at net.codingme.feature.jdk8.Jdk8Optional.getTest(Jdk8Optional.java:<span class="number">91</span>)</span><br></pre></td></tr></table></figure><h1 id="5-Optional-默认值"><a href="#5-Optional-默认值" class="headerlink" title="5. Optional 默认值"></a>5. Optional 默认值</h1><p>使用 <code>orElse</code>, <code>orElseGet</code> 方法可以在没有值的情况下获取给定的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有值，获取默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenIsNullGetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有值，获取默认值</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    String orElse = emptyOptional.orElse(<span class="string">"orElse default"</span>);</span><br><span class="line">    String orElseGet = emptyOptional.orElseGet(() -&gt; <span class="string">"orElseGet default"</span>);</span><br><span class="line">    System.out.println(orElse);</span><br><span class="line">    System.out.println(orElseGet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orElse default</span><br><span class="line">orElseGet default</span><br></pre></td></tr></table></figure></p><p>看到这里你可能会有些疑惑了，这两个方法看起来效果是一模一样的，为什么会提供两个呢？下面再看一个例子，你会发现两者的区别。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * orElse 和 orElseGet 的区别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orElseAndOrElseGetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有值，默认值</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    System.out.println(<span class="string">"空Optional.orElse"</span>);</span><br><span class="line">    String orElse = emptyOptional.orElse(getDefault());</span><br><span class="line">    System.out.println(<span class="string">"空Optional.orElseGet"</span>);</span><br><span class="line">    String orElseGet = emptyOptional.orElseGet(() -&gt; getDefault());</span><br><span class="line">    System.out.println(<span class="string">"空Optional.orElse结果："</span>+orElse);</span><br><span class="line">    System.out.println(<span class="string">"空Optional.orElseGet结果："</span>+orElseGet);</span><br><span class="line">    System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">    <span class="comment">// 如果没有值，默认值</span></span><br><span class="line">    Optional&lt;String&gt; stringOptional = Optional.of(<span class="string">"hello"</span>);</span><br><span class="line">    System.out.println(<span class="string">"有值Optional.orElse"</span>);</span><br><span class="line">    orElse = stringOptional.orElse(getDefault());</span><br><span class="line">    System.out.println(<span class="string">"有值Optional.orElseGet"</span>);</span><br><span class="line">    orElseGet = stringOptional.orElseGet(() -&gt; getDefault());</span><br><span class="line">    System.out.println(<span class="string">"有值Optional.orElse结果："</span>+orElse);</span><br><span class="line">    System.out.println(<span class="string">"有值Optional.orElseGet结果："</span>+orElseGet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"   获取默认值中..run getDeafult method"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">空Optional.orElse</span><br><span class="line">   获取默认值中..run getDeafult method</span><br><span class="line">空Optional.orElseGet</span><br><span class="line">   获取默认值中..run getDeafult method</span><br><span class="line">空Optional.orElse结果：hello</span><br><span class="line">空Optional.orElseGet结果：hello</span><br><span class="line">--------------------------------</span><br><span class="line">有值Optional.orElse</span><br><span class="line">   获取默认值中..run getDeafult method</span><br><span class="line">有值Optional.orElseGet</span><br><span class="line">有值Optional.orElse结果：hello</span><br><span class="line">有值Optional.orElseGet结果：hello</span><br></pre></td></tr></table></figure><p>在这个例子中会发现 <code>orElseGet</code> 传入的方法在有值的情况下并不会运行。而 <code>orElse</code>却都会运行。</p><h1 id="6-Optional-异常"><a href="#6-Optional-异常" class="headerlink" title="6. Optional 异常"></a>6. Optional 异常</h1><p>使用 <code>orElseThrow</code> 在没有值的时候抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有值，抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenIsNullThrowExceTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有值，抛出异常</span></span><br><span class="line">    Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">    String value = emptyOptional.orElseThrow(() -&gt; <span class="keyword">new</span> Exception(<span class="string">"发现空值"</span>));</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: 发现空值</span><br><span class="line">at net.codingme.feature.jdk8.Jdk8Optional.lambda$whenIsNullThrowExceTest$<span class="number">7</span>(Jdk8Optional.java:<span class="number">118</span>)</span><br><span class="line">at java.util.Optional.orElseThrow(Optional.java:<span class="number">290</span>)</span><br><span class="line">at net.codingme.feature.jdk8.Jdk8Optional.whenIsNullThrowExceTest(Jdk8Optional.java:<span class="number">118</span>)</span><br></pre></td></tr></table></figure><h1 id="7-Optional-函数接口"><a href="#7-Optional-函数接口" class="headerlink" title="7. Optional 函数接口"></a>7. Optional 函数接口</h1><p><code>Optional</code> 随 JDK8 一同出现，必然会有一些 JDK8 中的新特性，比如函数接口。<code>Optional</code> 中主要有三个传入函数接口的方法，分别是<code>filter</code>，<code>map</code>，<code>flatMap</code>。这里面的实现其实是 JDK8 的另一个新特性了，因此这里只是简单演示，不做解释。后面放到其他 JDK8 新特性文章里介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">functionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// filter 过滤</span></span><br><span class="line">    Optional&lt;Integer&gt; optional123 = Optional.of(<span class="number">123</span>);</span><br><span class="line">    optional123.filter(num -&gt; num == <span class="number">123</span>).ifPresent(num -&gt; System.out.println(num));</span><br><span class="line"></span><br><span class="line">    Optional&lt;Integer&gt; optional456 = Optional.of(<span class="number">456</span>);</span><br><span class="line">    optional456.filter(num -&gt; num == <span class="number">123</span>).ifPresent(num -&gt; System.out.println(num));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map 转换</span></span><br><span class="line">    Optional&lt;Integer&gt; optional789 = Optional.of(<span class="number">789</span>);</span><br><span class="line">    optional789.map(String::valueOf).map(String::length).ifPresent(length -&gt; System.out.println(length));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="8-Optional-案例"><a href="#8-Optional-案例" class="headerlink" title="8. Optional 案例"></a>8. Optional 案例</h1><p>假设有计算机、声卡、usb 三种硬件（下面的代码中使用了 <code>Lombok</code> 的 <code>@Data</code> 注解）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;SoundCard&gt; soundCard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声卡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Usb&gt; usb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * USB</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usb</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算机可能会有声卡，声卡可能会有 usb。那么怎么取得 usb 版本呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑里【有可能】有声卡</span></span><br><span class="line"><span class="comment"> * 声卡【有可能】有USB接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optionalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 没有声卡，没有 Usb 的电脑</span></span><br><span class="line">    Computer computerNoUsb = <span class="keyword">new</span> Computer();</span><br><span class="line">    computerNoUsb.setSoundCard(Optional.empty());</span><br><span class="line">    <span class="comment">// 获取 usb 版本</span></span><br><span class="line">    Optional&lt;Computer&gt; computerOptional = Optional.ofNullable(computerNoUsb);</span><br><span class="line">    String version = computerOptional.flatMap(Computer::getSoundCard).flatMap(SoundCard::getUsb)</span><br><span class="line">        .map(Usb::getVersion).orElse(<span class="string">"UNKNOWN"</span>);</span><br><span class="line">    System.out.println(version);</span><br><span class="line">    System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有值，则输出</span></span><br><span class="line">    SoundCard soundCard = <span class="keyword">new</span> SoundCard();</span><br><span class="line">    Usb usb = <span class="keyword">new</span> Usb();</span><br><span class="line">    usb.setVersion(<span class="string">"2.0"</span>);</span><br><span class="line">    soundCard.setUsb(Optional.ofNullable(usb));</span><br><span class="line">    Optional&lt;SoundCard&gt; optionalSoundCard = Optional.ofNullable(soundCard);</span><br><span class="line">    optionalSoundCard.ifPresent(System.out::println);</span><br><span class="line">    <span class="comment">// 如果有值，则输出</span></span><br><span class="line">    <span class="keyword">if</span> (optionalSoundCard.isPresent()) &#123;</span><br><span class="line">        System.out.println(optionalSoundCard.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出没有值，则没有输出</span></span><br><span class="line">    Optional&lt;SoundCard&gt; optionalSoundCardEmpty = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">    optionalSoundCardEmpty.ifPresent(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选 Usb2.0</span></span><br><span class="line">    optionalSoundCard.map(SoundCard::getUsb)</span><br><span class="line">            .filter(usb1 -&gt; <span class="string">"3.0"</span>.equals(usb1.map(Usb::getVersion)</span><br><span class="line">            .orElse(<span class="string">"UBKNOW"</span>)))</span><br><span class="line">            .ifPresent(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UNKNOWN</span><br><span class="line">-----------------</span><br><span class="line">SoundCard(usb=Optional[Usb(version=<span class="number">2.0</span>)])</span><br><span class="line">SoundCard(usb=Optional[Usb(version=<span class="number">2.0</span>)])</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><h1 id="9-Optional-总结"><a href="#9-Optional-总结" class="headerlink" title="9. Optional 总结"></a>9. Optional 总结</h1><p>在本文中，我们看到了如何使用 Java SE8 的 <code>java.util.Optional</code> 类。<code>Optional</code> 类的目的不是为了替换代码中的每个空引用，而是为了帮助更好的设计程序，让使用者可以仅通过观察属性类型就可以知道会不会有空值。另外，<code>Optional</code>不提供直接获取值的方法，使用时会强迫你处理不存在的情况。间接的让你的程序免受空指针的影响。</p><p>文中代码已经上传 <a href="https://github.com/niumoo/jdk-feature" target="_blank" rel="noopener">Github</a>。</p><p><a href="https://github.com/niumoo/jdk-feature" target="_blank" rel="noopener">https://github.com/niumoo/jdk-feature</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;如果你没有处理过空指针，那么你不是一位真正的 Java 程序员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;空指针确实会产生很多问题，我们经常遇到空的引用，然后又想从这个空的引用上去获取其他的值，接着理所当然的碰到了 &lt;code&gt;NullPointException&lt;/code&gt;。这是你可能会想，这报错很好处理，然后你看了眼报错行数，对比了下代码。脑海里瞬间闪过 ”对对对，这里有可能为空“，然后加上 &lt;code&gt;null check&lt;/code&gt;轻松处理。然而你不知道这已经是你处理的第多少个空指针异常了。&lt;br&gt;
    
    </summary>
    
      <category term="Jdk 新特性" scheme="https://www.codingme.net/categories/Jdk-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java8" scheme="https://www.codingme.net/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十五）如何编写自己的 Springboot starter</title>
    <link href="https://www.codingme.net/2019/11/springboot/springboot-15-my-starter/"/>
    <id>https://www.codingme.net/2019/11/springboot/springboot-15-my-starter/</id>
    <published>2019-11-01T00:08:08.000Z</published>
    <updated>2019-11-01T00:42:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/springboot-15-my-starter/1572539675483.png" alt="1572539675483"></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p><code>Springboot</code> 中的自动配置确实方便，减少了我们开发上的复杂性，那么自动配置原理是什么呢？之前我也写过了一篇文章进行了分析。<br><a href="https://www.codingme.net/2019/01/springboot/springboot03-auto-config/">Springboot 系列（三）Spring Boot 自动配置</a>。<br><a id="more"></a><br>由于自动配置用到了配置文件的绑定，如果你还不知道常见的配置文件的用法，可以参考这篇文章。<br><a href="https://www.codingme.net/2019/01/springboot/springboot03-auto-config/">Springboot 系列（二）Spring Boot 配置文件</a>。</p><p>在这一次，通过学习 <code>Springboot</code> 自动配置模式，编写一个自己的 <code>starter</code>，用来加深对自动配置的理解。</p><p>熟悉模式，有助于提升编写的 <code>starter</code> 的规范性，编写自己的 <code>starter</code> 之前先来学习 <code>Springboot</code> 官方 <code>starter</code> 以及常见框架的整合 <code>starter</code> 的编写方式 ，可以领略到其中的奥秘。</p><h1 id="2-Springboot-官方模式"><a href="#2-Springboot-官方模式" class="headerlink" title="2. Springboot 官方模式"></a>2. Springboot 官方模式</h1><p>选择一个官方的自动配置进行分析，这里就选择常见的配置端口号配置。</p><h2 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1. 引入依赖"></a>2.1. 引入依赖</h2><p>使用端口号之前我们需要先引入 web 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你观察 <code>starter</code> 多的话，也许你发已经发现了一个<strong>模式</strong>，<code>Springboot</code> 官方的 <code>starter</code>的名字都是  <code>spring-boot-starter-xxxx</code>命名的。</p><p>查看 <code>spring-boot-starter-web</code> 会发现，其实这个依赖只是一个空盒子，除了依赖其他 <code>pom</code> 之外，没有一行代码。</p><p><img src="/assets/springboot-15-my-starter/1572480685107.png" alt="spring-boot-starter-web"></p><p>这时，发现了另外一个<strong>模式</strong>：<code>starter</code> 只依赖其他 <code>pom</code>，不做代码实现。</p><p>那么 <code>spring-boot-starter-web</code> 到底依赖了哪些内容？</p><p><img src="/assets/springboot-15-my-starter/1572481136481.png" alt="spring-boot-starter-web 的依赖"></p><p>观察这个依赖信息，然后再参照其他的官方 <code>starter</code> ，可以找到几个固定的引入，可以被称之为<strong>模式</strong>的依赖引入。</p><ol><li>依赖 <code>spring-boot-starter</code>。</li><li>依赖 <code>spring-boot-autoconfigure</code>。</li></ol><h2 id="2-2-自动配置"><a href="#2-2-自动配置" class="headerlink" title="2.2. 自动配置"></a>2.2. 自动配置</h2><p>引入依赖只有配置端口号，像这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8090</span><br></pre></td></tr></table></figure><p>IDEA 中可以通过点击 <code>server.port</code> 找到这个配置绑定的类文件。可以看到配置最终会注入到类<code>ServerProperties</code> 类的 <code>port</code> 属性上。</p><p><img src="/assets/springboot-15-my-starter/1572478509712.png" alt="Server 属性配置"></p><p>那么这个 <code>ServerProperties</code> 到底是哪里使用的呢？继续查找，找到一个和 <code>Servlet</code> 的有关的调用。</p><p><img src="/assets/springboot-15-my-starter/1572478794011.png" alt="getPort 的调用"></p><p>发现是被 <code>ServletWebServerFactoryCustomizer</code>类进行了调用，这个类里面定义了 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerProperties serverProperties;</span><br></pre></td></tr></table></figure><p>用来使用配置的属性。<br>继续查看这个类的调用，发现只有一个类使用这个类，这个类是<code>ServletWebServerFactoryAutoConfiguration</code>。  </p><p><img src="/assets/springboot-15-my-starter/1572479738431.png" alt="ServletWebServerFactoryAutoConfiguration 类"></p><p>根据我们对注解的理解，这个类就是自动配置主要类了。同时自动配置类都是以 <code>AutoConfiguration</code> 结尾。</p><p>看这个类的几个注解的意思。  </p><ol><li>优先级别较高。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br></pre></td></tr></table></figure><ol start="2"><li>只有在 <code>ServletRequest</code> 类存在和是 Web 应用时生效。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest.class)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br></pre></td></tr></table></figure><ol start="3"><li>开启了 <code>ServerProperties</code> 的配置绑定。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties.class)</span><br></pre></td></tr></table></figure><ol start="4"><li>导入了几个类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span><br></pre></td></tr></table></figure><p>同时注入配置到 Bean 工厂以供其他地方调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletWebServerFactoryCustomizer <span class="title">servletWebServerFactoryCustomizer</span><span class="params">(ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动配置仅仅是这些东西吗？根据之前文章里的分析，我们知道不止代码，至少还有一个指定自动配置类的配置文件需要读取。也就是 <code>spring.factories</code> 文件。</p><p><img src="/assets/springboot-15-my-starter/1572480162756.png" alt="spring.factories"></p><p>如果你不知道，可以先看这篇文章。<a href="https://www.codingme.net/2019/01/springboot/springboot03-auto-config/">Springboot 系列（三）Spring Boot 自动配置</a> 。<br>事实确实如此，可以在 <code>spring.factories</code> 中找到上面跟踪到的类。<br>也就是 <code>ServletWebServerFactoryAutoConfiguration</code>.</p><p>根据上面的分析，可以发现 <code>Springboot</code> 官方 <code>starter</code> 的几个<strong>模式</strong>。  </p><ol><li>使用 <code>XXXProperties</code> 自动绑定 <code>XXX</code> 开头的配置信息，如：<code>ServerProperties</code>。</li><li>把 <code>XXXProperties</code> 定义到要使用的类中，如：<code>ServletWebServerFactoryCustomizer</code>。</li><li>编写一个 <code>XXXAutoConfiguration</code> ，开启  <code>XXXProperties</code> 的自动配置，限定生效场景，创建需要的类到 <code>Bean</code> 工厂。如：<code>ServletWebServerFactoryAutoConfiguration</code>。</li></ol><h1 id="3-第三方集成模式"><a href="#3-第三方集成模式" class="headerlink" title="3. 第三方集成模式"></a>3. 第三方集成模式</h1><p><code>Springboot</code> 官方如果把所有的框架都编写成 <code>starter</code>，是不现实的。因此很多第三方框架需要主动集成到 <code>springboot</code>，所以我们选择一个常用的框架分析它的 <code>starter</code> 实现。因为已经看过了 <code>springboot</code> 官方 <code>starter</code> 是如何配置的， 第三方框架也是类似，所以在下面观察的过程中会直接指出相同点，而不再做对比详细对比。</p><p>这里选择 <code>mybatis-spring-boot-starter</code> 进行学习分析。</p><h2 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里 <code>mybatis</code> 框架的 <code>starter</code> 依赖符合一定的<strong>规则</strong>，即 <strong>xxx-spring-boot-starter</strong>.</p><p>观察这个 <code>starter</code>，发现它也没有做任何的代码实现，这一点和 <code>springboot</code> 官方一致。</p><p><img src="/assets/springboot-15-my-starter/1572532932799.png" alt="mybatis-spring-boot-starter"></p><p>查看 <code>mybatis-spring-boot-starter</code> 的依赖项，有很多，其中和自动配置有关的主要是。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-自动配置"><a href="#3-2-自动配置" class="headerlink" title="3.2 自动配置"></a>3.2 自动配置</h2><p>查看 <code>mybatis-spring-boot-autoconfigure</code> 的内容发现和 <code>springboot</code> 官方的 <code>autoconfigure</code>结构上是差不多的。</p><p><img src="/assets/springboot-15-my-starter/1572533517315.png" alt="mybatis-spring-boot-autoconfigure"></p><p><code>mybatis</code> 的自动配置也是通过 <code>spring.factories</code> 来指明自动配置，然后通过 <code>XxxAutoConfiguration</code> 绑定 <code>XxxProperties</code> 来进行自动配置.</p><p><img src="/assets/springboot-15-my-starter/1572533809395.png" alt="MybatisAutoConfiguration"></p><p>在原理上，和上面 <code>springboot</code> 官方的 <code>starter</code>是相同的，所以不做过多的介绍了。</p><h1 id="4-编写自己的-starter"><a href="#4-编写自己的-starter" class="headerlink" title="4. 编写自己的 starter"></a>4. 编写自己的 starter</h1><p>说了那么多，终于到了实操环节，通过上面的介绍，我们可以大致得出编写自己的 <code>starter</code>步骤。</p><ol><li>创建名字为 <code>xxx-spring-boot-starter</code> 的启动器项目。</li><li>创建名字为 <code>xxx-spring-boot-autoconfigure</code>的项目。<ul><li>编写属性绑定类 <code>xxxProperties</code>.</li><li>编写服务类，引入 <code>xxxProperties</code>.</li><li>编写自动配置类<code>XXXAutoConfiguration</code>注入配置。</li><li>创建 <code>spring.factories</code> 文件，用于指定要自动配置的类。</li></ul></li><li>启动器项目为空项目，用来引入 <code>xxx-spring-boot-autoconfigure</code>等其他依赖。</li><li>项目引入 <code>starter</code>，配置需要配置的信息。</li></ol><h2 id="4-1-创建启动器项目"><a href="#4-1-创建启动器项目" class="headerlink" title="4.1 创建启动器项目"></a>4.1 创建启动器项目</h2><p>由于启动器不需要代码实现，只需要依赖其他项目，所以直接创建一个空的 maven 项目。但是名字要规范。<br>这里创建的 <code>starter</code> 是 <code>myapp-spring-boot-starter</code>。</p><p><img src="/assets/springboot-15-my-starter/1572534904150.png" alt="myapp-spring-boot-starter"></p><p>pom 文件非常简单，只需要引入接下来要创建的 <code>myapp-spring-boot-autoconfigure</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.codingme.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  引入自动配置项目 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.codingme.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-创建自动配置项目"><a href="#4-2-创建自动配置项目" class="headerlink" title="4.2 创建自动配置项目"></a>4.2 创建自动配置项目</h2><p>结合上面对 <code>starter</code> 的分析，直接创建一个名字为 <code>myapp-spring-boot-autoconfigure</code> 的项目。项目中只引入 <code>springboot</code> 父项目以及 <code>spring-boot-starter</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.codingme.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myapp-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目的总体结构看图。</p><p><img src="/assets/springboot-15-my-starter/1572536336072.png" alt="myapp-spring-boot-starter-autoconfigure"></p><p>在 <code>HelloProperties</code>中通过注解 <code>@ConfigurationProperties(prefix = &quot;myapp.hello&quot;)</code>让类中的属性与 <code>myapp.hello</code>开头的配置进行绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/29 23:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"myapp.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>HelloService</code>中的 <code>sayHello</code>方法使用 <code>HelloProperties</code> 中自动绑定的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">"，"</span> + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让 <code>HelloService</code> 可以自动注入且能正常使用 <code>HelloProperties</code>，所以我们在<br><code>HelloServiceAutoConfiguration</code> 类中把 <code>HelloProperties.class</code> 引入，然后把 <code>HelloService</code> 注入到 <code>Bean</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * web应用才生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 让属性文件生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties.class)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 声明是一个配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HelloService helloService = <span class="keyword">new</span> HelloService();</span><br><span class="line">        helloService.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在 <code>spring.factories</code>中只需要指定要自动配置的类即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">net.codingme.starter.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure><p>到这里，自动配置项目就完成了。可以在 <code>myapp-spring-boot-autoconfigure</code>项目执行 <code>mvn install</code> 把自动配置项目打包到本地仓库，然后使用相同的命令把 <code>myapp-spring-boot-starter</code> 安装到仓库。因为后者依赖于前者项目，所以这里前者需要先进 <code>mvn install</code>。</p><h2 id="4-3-使用自定义的启动器"><a href="#4-3-使用自定义的启动器" class="headerlink" title="4.3 使用自定义的启动器"></a>4.3 使用自定义的启动器</h2><p>创建一个 <code>springboot</code>项目<code>myapp-spring-boot-starter-test</code>。</p><p><img src="/assets/springboot-15-my-starter/1572537470601.png" alt="myapp-spring-boot-starter-test"></p><p>引入 <code>web</code> 依赖，引入自己编写的 <code>myapp-spring-boot-starter</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入自己的 starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.codingme.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一个 <code>HelloController</code> 注入自动配置里的 <code>HelloService</code>用于测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 <code>autoConfigure</code>  项目中定义了 <code>sayHello</code>  方法会输出“Hello”+传入的 name + 配置的 <code>hello.suffix</code>，所以我们在 <code>springboot</code> 配置文件中配置这个属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myapp.hello.suffix=早上好</span><br></pre></td></tr></table></figure><p>运行测试项目，访问 /hello 路径传入一个 name 看看自动配置有没有生效。</p><p><img src="/assets/springboot-15-my-starter/1572537886411.png" alt="访问测试"></p><p>从测试结果可以看到自动配置的早上好已经生效了。到这里自己编写的 <code>starter</code>也已经完工。</p><p>项目已经传到 <a href="https://github.com/niumoo/springboot/tree/master/springboot-starter" target="_blank" rel="noopener">Github</a>.<br> <a href="https://github.com/niumoo/springboot/tree/master/springboot-starter" target="_blank" rel="noopener">https://github.com/niumoo/springboot/tree/master/springboot-starter</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/springboot-15-my-starter/1572539675483.png&quot; alt=&quot;1572539675483&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Springboot&lt;/code&gt; 中的自动配置确实方便，减少了我们开发上的复杂性，那么自动配置原理是什么呢？之前我也写过了一篇文章进行了分析。&lt;br&gt;&lt;a href=&quot;https://www.codingme.net/2019/01/springboot/springboot03-auto-config/&quot;&gt;Springboot 系列（三）Spring Boot 自动配置&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="starter" scheme="https://www.codingme.net/tags/starter/"/>
    
  </entry>
  
  <entry>
    <title>原来热加载如此简单，手动写一个 Java 热加载吧</title>
    <link href="https://www.codingme.net/2019/10/jvm/java-hotput/"/>
    <id>https://www.codingme.net/2019/10/jvm/java-hotput/</id>
    <published>2019-10-28T00:35:00.000Z</published>
    <updated>2019-10-31T08:59:17.000Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="/assets/java-hotput/640.webp" alt="热加载"> </p><h1 id="1-什么是热加载"><a href="#1-什么是热加载" class="headerlink" title="1. 什么是热加载"></a>1. 什么是热加载</h1><p><strong>热加载</strong>是指可以在不重启服务的情况下让更改的代码生效，<strong>热加载</strong>可以显著的提升开发以及调试的效率，它是基于 Java 的类加载器实现的，但是由于热加载的不安全性，一般不会用于正式的生产环境。<br><a id="more"></a></p><h1 id="2-热加载与热部署的区别"><a href="#2-热加载与热部署的区别" class="headerlink" title="2. 热加载与热部署的区别"></a>2. 热加载与热部署的区别</h1><p>首先，不管是<strong>热加载</strong>还是热部署，都可以在不重启服务的情况下编译/部署项目，都是基于 Java 的类加载器实现的。</p><p>那么两者到底有什么区别呢？</p><p>在部署方式上：</p><ul><li>热部署是在服务器运行时<strong>重新部署</strong>项目。</li><li>热加载是在运行时<strong>重新加载 class</strong>。</li></ul><p>在实现原理上：</p><ul><li>热部署是直接重新<strong>加载整个应用</strong>，耗时相对较高。</li><li>热加载是在运行时<strong>重新加载 class</strong>，后台会启动一个线程不断检测你的类是否改变。</li></ul><p>在使用场景上：</p><ul><li>热部署更多的是在<strong>生产环境</strong>使用。</li><li>热加载则更多的是在<strong>开发环境</strong>上使用。线上由于安全性问题不会使用，难以监控。</li></ul><h1 id="3-类加载五个阶段"><a href="#3-类加载五个阶段" class="headerlink" title="3. 类加载五个阶段"></a>3. 类加载五个阶段</h1><p><img src="/assets/java-hotput/1572188635986.png" alt="类的生命周期"></p><p>可能你已经发现了，图中一共是7个阶段，而不是5个。是因为图是类的完整生命周期，如果要说只是类加载阶段的话，图里最后的使用（Using）和卸载（Unloading）并不算在内。</p><p>简单描述一下类加载的五个阶段：</p><ol><li><p>加载阶段：找到类的静态存储结构，加载到虚拟机，定义数据结构。用户可以自定义类加载器。</p></li><li><p>验证阶段：确保字节码是安全的，确保不会对虚拟机的安全造成危害。</p></li><li><p>准备阶段：确定内存布局，确定内存遍历，赋<strong>初始值</strong>（注意：是初始值，也有特殊情况）。</p></li><li><p>解析阶段： 将符号变成直接引用。</p></li><li><p>初始化阶段：调用程序自定义的代码。规定有且仅有5种情况必须进行初始化。</p><ol><li>new（实例化对象）、getstatic（获取类变量的值，被final修饰的除外，他的值在编译器时放到了常量池）、putstatic（给类变量赋值）、invokestatic（调用静态方法） 时会初始化</li><li>调用子类的时候，发现父类还没有初始化，则父类需要立即初始化。</li><li>虚拟机启动，用户要执行的主类，主类需要立即初始化，如 main 方法。</li><li>使用 java.lang.reflect包的方法对类进行反射调用方法 是会初始化。</li><li>当使用JDK 1.7的动态语言支持时， 如果一个java.lang.invoke.MethodHandle实例最后<br>的解析结果REF_getStatic、 REF_putStatic、 REF_invokeStatic的方法句柄， 并且这个方法句柄<br>所对应的类没有进行过初始化， 则需要先触发其初始化。  </li></ol></li></ol><p>要说明的是，类加载的 5 个阶段中，只有加载阶段是用户可以自定义处理的，而验证阶段、准备阶段、解析阶段、初始化阶段都是用 JVM 来处理的。</p><h1 id="4-实现类的热加载"><a href="#4-实现类的热加载" class="headerlink" title="4. 实现类的热加载"></a>4. 实现类的热加载</h1><h2 id="4-1-实现思路"><a href="#4-1-实现思路" class="headerlink" title="4.1 实现思路"></a>4.1 实现思路</h2><p>我们怎么才能手动写一个类的热加载呢？根据上面的分析，Java 程序在运行的时候，首先会把 class 类文件加载到 JVM 中，而类的加载过程又有五个阶段，五个阶段中只有<strong>加载阶段</strong>用户可以进行自定义处理，所以我们如果能在程序代码更改且重新编译后，让运行的进程可以实时获取到新编译后的 class 文件，然后重新进行加载的话，那么理论上就可以实现一个简单的 <strong>Java 热加载</strong>。</p><p>所以我们可以得出实现思路：</p><ol><li>实现自己的类加载器。</li><li>从自己的类加载器中加载要热加载的类。</li><li>不断轮训要热加载的类 class 文件是否有更新。</li><li>如果有更新，重新加载。</li></ol><h2 id="4-2-自定义类加载器"><a href="#4-2-自定义类加载器" class="headerlink" title="4.2 自定义类加载器"></a>4.2 自定义类加载器</h2><p>设计 Java 虚拟机的团队把类的加载阶段放到的 JVM 的外部实现（  通过一个类的全限定名来获取描述此类的二进制字节流  ）。这样就可以让程序自己决定如果获取到类信息。而实现这个加载动作的代码模块，我们就称之为 “类加载器”。</p><p>在 Java 中，类加载器也就是  <code>java.lang.ClassLoader</code>. 所以如果我们想要自己实现一个类加载器，就需要继承 <code>ClassLoader</code> 然后重写里面 <code>findClass</code>的方法，同时因为类加载器是 <code>双亲委派模型</code>实现（也就说。除了一个最顶层的类加载器之外，每个类加载器都要有父加载器，而加载时，会先询问父加载器能否加载，如果父加载器不能加载，则会自己尝试加载）所以我们还需要指定父加载器。</p><p>最后根据传入的类路径，加载类的代码看下面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自定义 Java类加载器来实现Java 类的热加载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClasslLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 要加载的 Java 类的 classpath 路径 */</span></span><br><span class="line">    <span class="keyword">private</span> String classpath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClasslLoader</span><span class="params">(String classpath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定父加载器</span></span><br><span class="line">        <span class="keyword">super</span>(ClassLoader.getSystemClassLoader());</span><br><span class="line">        <span class="keyword">this</span>.classpath = classpath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">this</span>.loadClassData(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name, data, <span class="number">0</span>, data.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载 class 文件中的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 传进来是带包名的</span></span><br><span class="line">            name = name.replace(<span class="string">"."</span>, <span class="string">"//"</span>);</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(classpath + name + <span class="string">".class"</span>));</span><br><span class="line">            <span class="comment">// 定义字节数组输出流</span></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((b = inputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">            inputStream.close();</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-定义要热加载的类"><a href="#4-3-定义要热加载的类" class="headerlink" title="4.3 定义要热加载的类"></a>4.3 定义要热加载的类</h2><p>我们假设某个接口（BaseManager.java）下的某个方法（logic）要进行热加载处理。</p><p>首先定义接口信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 实现这个接口的子类，需要动态更新。也就是热加载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logic</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个这个接口的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * BaseManager 这个接口的子类要实现类的热加载功能。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyManager</span> <span class="keyword">implements</span> <span class="title">BaseManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(LocalTime.now() + <span class="string">": Java类的热加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面我们要做的就是让这个类可以通过我们的 MyClassLoader 进行自定义加载。类的<strong>热加载</strong>应当只有在类的信息被更改然后重新编译之后进行重新加载。所以为了不意义的重复加载，我们需要判断 class 是否进行了更新，所以我们需要记录 class 类的修改时间，以及对应的类信息。</p><p>所以编译一个类用来记录某个类对应的某个类加载器以及上次加载的 class 的修改时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 封装加载类的信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 自定义的类加载器 */</span></span><br><span class="line">    <span class="keyword">private</span> MyClasslLoader myClasslLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 记录要加载的类的时间戳--&gt;加载的时间 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> loadTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 需要被热加载的类 */</span></span><br><span class="line">    <span class="keyword">private</span> BaseManager manager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadInfo</span><span class="params">(MyClasslLoader myClasslLoader, <span class="keyword">long</span> loadTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myClasslLoader = myClasslLoader;</span><br><span class="line">        <span class="keyword">this</span>.loadTime = loadTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyClasslLoader <span class="title">getMyClasslLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myClasslLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyClasslLoader</span><span class="params">(MyClasslLoader myClasslLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myClasslLoader = myClasslLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLoadTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadTime</span><span class="params">(<span class="keyword">long</span> loadTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadTime = loadTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseManager <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setManager</span><span class="params">(BaseManager manager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manager = manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-热加载获取类信息"><a href="#4-4-热加载获取类信息" class="headerlink" title="4.4 热加载获取类信息"></a>4.4 热加载获取类信息</h2><p>在实现思路里，我们知道轮训检查 class 文件是不是被更新过，所以每次调用要热加载的类时，我们都要进行检查类是否被更新然后决定要不要重新加载。为了方便这步的获取操作，可以使用一个简单的工厂模式进行封装。</p><p>要注意是加载 class 文件需要指定完整的路径，所以类中定义了 CLASS_PATH 常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 加载 manager 的工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 记录热加载类的加载信息 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, LoadInfo&gt; loadTimeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 要加载的类的 classpath */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_PATH = <span class="string">"D:\\IdeaProjectMy\\lab-notes\\target\\classes\\"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 实现热加载的类的全名称(包名+类名 ) */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MY_MANAGER = <span class="string">"net.codingme.box.classloader.MyManager"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseManager <span class="title">getManager</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        File loadFile = <span class="keyword">new</span> File(CLASS_PATH + className.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>) + <span class="string">".class"</span>);</span><br><span class="line">        <span class="comment">// 获取最后一次修改时间</span></span><br><span class="line">        <span class="keyword">long</span> lastModified = loadFile.lastModified();</span><br><span class="line">        System.out.println(<span class="string">"当前的类时间："</span> + lastModified);</span><br><span class="line">        <span class="comment">// loadTimeMap 不包含 ClassName 为 key 的信息，证明这个类没有被加载，要加载到 JVM</span></span><br><span class="line">        <span class="keyword">if</span> (loadTimeMap.get(className) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            load(className, lastModified);</span><br><span class="line">        &#125; <span class="comment">// 加载类的时间戳变化了，我们同样要重新加载这个类到 JVM。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (loadTimeMap.get(className).getLoadTime() != lastModified) &#123;</span><br><span class="line">            load(className, lastModified);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loadTimeMap.get(className).getManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载 class ，缓存到 loadTimeMap</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastModified</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String className, <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">        MyClasslLoader myClasslLoader = <span class="keyword">new</span> MyClasslLoader(className);</span><br><span class="line">        Class loadClass = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loadClass = myClasslLoader.loadClass(className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BaseManager manager = newInstance(loadClass);</span><br><span class="line">        LoadInfo loadInfo = <span class="keyword">new</span> LoadInfo(myClasslLoader, lastModified);</span><br><span class="line">        loadInfo.setManager(manager);</span><br><span class="line">        loadTimeMap.put(className, loadInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以反射的方式创建 BaseManager 的子类对象</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BaseManager <span class="title">newInstance</span><span class="params">(Class loadClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (BaseManager)loadClass.getConstructor(<span class="keyword">new</span> Class[] &#123;&#125;).newInstance(<span class="keyword">new</span> Object[] &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-热加载测试"><a href="#4-5-热加载测试" class="headerlink" title="4.5  热加载测试"></a>4.5  热加载测试</h2><p>直接写一个线程不断的检测要热加载的类是不是已经更改需要重新加载，然后运行测试即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 后台启动一条线程，不断检测是否要刷新重新加载，实现了热加载的类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/24 23:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgHandle</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            BaseManager manager = ManagerFactory.getManager(ManagerFactory.MY_MANAGER);</span><br><span class="line">            manager.logic();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.box.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MsgHandle()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码已经全部准备好了，最后一步，可以启动测试了。如果你是用的是 Eclipse ，直接启动就行了；如果是 IDEA ，那么你需要 DEBUG 模式启动（IDEA 对热加载有一定的限制）。</p><p>启动后看到控制台不断的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00:08:13.018: Java类的热加载</span><br><span class="line">00:08:15.018: Java类的热加载</span><br></pre></td></tr></table></figure><p>这时候我们随便更改下 MyManager 类的 logic 方法的输出内容然后保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(LocalTime.now() + <span class="string">": Java类的热加载 Oh~~~~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到控制台的输出已经自动更改了（IDEA 在更改后需要按 CTRL + F9）。</p><p><img src="/assets/java-hotput/1572192565262.png" alt="类的热加载"></p><p>代码已经放到Github: <a href="https://github.com/niumoo/lab-notes/" target="_blank" rel="noopener">https://github.com/niumoo/lab-notes/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;img src=&quot;/assets/java-hotput/640.webp&quot; alt=&quot;热加载&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;1-什么是热加载&quot;&gt;&lt;a href=&quot;#1-什么是热加载&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是热加载&quot;&gt;&lt;/a&gt;1. 什么是热加载&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;热加载&lt;/strong&gt;是指可以在不重启服务的情况下让更改的代码生效，&lt;strong&gt;热加载&lt;/strong&gt;可以显著的提升开发以及调试的效率，它是基于 Java 的类加载器实现的，但是由于热加载的不安全性，一般不会用于正式的生产环境。&lt;br&gt;
    
    </summary>
    
      <category term="Java 虚拟机" scheme="https://www.codingme.net/categories/Java-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="jvm" scheme="https://www.codingme.net/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Jdk14 都要出了，Jdk8 的时间处理姿势还不了解一下？</title>
    <link href="https://www.codingme.net/2019/10/jdk/jdk8-time/"/>
    <id>https://www.codingme.net/2019/10/jdk/jdk8-time/</id>
    <published>2019-10-24T00:01:01.000Z</published>
    <updated>2019-10-24T00:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>当前时间：2019年10月24日。距离 JDK 14 发布时间（2020年3月17日）还有多少天？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 距离JDK 14 发布还有多少天？</span></span><br><span class="line">LocalDate jdk14 = LocalDate.of(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">17</span>);</span><br><span class="line">LocalDate nowDate = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"距离JDK 14 发布还有："</span>+nowDate.until(jdk14,ChronoUnit.DAYS)+<span class="string">"天"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>JDK 8 已经在 2014年 3月 18日正式可用 ，距离现在已经 5年多时间过去了。5年时间里很多企业也都换上了 JDK 8，明年 3月份 Jdk14 也要来了，那么 Jdk 8 的新特性你真的用起来了吗？我准备写一个 Jdk 8开始的新特性介绍以及使用的系列文章，后续 Jdk 也会继续更新，你如果需要的话不妨关注下博客或者公众号。</p><h2 id="1-时间处理类"><a href="#1-时间处理类" class="headerlink" title="1. 时间处理类"></a>1. 时间处理类</h2><p>Jdk8 带来了全新的时间处理工具类，用于代替之前存在缺陷的时间处理。新的时间处理相比之前更加简单好用。</p><p><img src="/assets/jdk8-time/1571847428464-1571848139345.png" alt="Jdk8 时间处理类"></p><p>常用的类有以下几个类。</p><table><thead><tr><th>时间相关类</th><th>介绍</th></tr></thead><tbody><tr><td>LocalDateTime</td><td>时间处理类，最高精确到纳秒</td></tr><tr><td>LocalDate</td><td>时间处理类，最高精确到天</td></tr><tr><td>DateTimeFormatter</td><td>时间格式化</td></tr><tr><td>ZoneId</td><td>时区设置类</td></tr></tbody></table><h2 id="2-时间获取"><a href="#2-时间获取" class="headerlink" title="2. 时间获取"></a>2. 时间获取</h2><p>使用不同的类可以获取不同精度的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nowTimeTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前精确时间</span></span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间："</span> + now);</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间："</span> + now.getYear() + <span class="string">"-"</span> + now.getMonthValue() + <span class="string">"-"</span> + now.getDayOfMonth() + <span class="string">" "</span> + now.getHour() + <span class="string">"-"</span> + now.getMinute() + <span class="string">"-"</span> + now.getSecond());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前日期</span></span><br><span class="line">    LocalDate localDate = LocalDate.now();</span><br><span class="line">    System.out.println(<span class="string">"当前日期："</span> + localDate);</span><br><span class="line">    System.out.println(<span class="string">"当前日期："</span> + localDate.getYear() + <span class="string">"-"</span> + localDate.getMonthValue() + <span class="string">"-"</span> + localDate.getDayOfMonth());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当天时间</span></span><br><span class="line">    LocalTime localTime = LocalTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当天时间："</span> + localTime);</span><br><span class="line">    System.out.println(<span class="string">"当天时间："</span> + localTime.getHour() + <span class="string">":"</span> + localTime.getMinute() + <span class="string">":"</span> + localTime.getSecond());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有时区的当前精确时间</span></span><br><span class="line">    ZonedDateTime nowZone = LocalDateTime.now().atZone(ZoneId.systemDefault());</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间（有时区）："</span> + nowZone);</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间（有时区）："</span> + nowZone.getYear() + <span class="string">"-"</span> + nowZone.getMonthValue() + <span class="string">"-"</span> + nowZone.getDayOfMonth() + <span class="string">" "</span> + nowZone.getHour() + <span class="string">"-"</span> + nowZone.getMinute() + <span class="string">"-"</span> + nowZone.getSecond());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到的时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当前精确时间：2019-10-24T00:26:41.724</span><br><span class="line">当前精确时间：2019-10-24 0-26-41</span><br><span class="line">当前日期：2019-10-24</span><br><span class="line">当前日期：2019-10-24</span><br><span class="line">当前精确时间（有时区）：2019-10-24T00:26:41.725+08:00[GMT+08:00]</span><br><span class="line">当前精确时间（有时区）：2019-10-24 0-26-41</span><br><span class="line">当天时间：00:26:41.725</span><br><span class="line">当天时间：0:26:41</span><br></pre></td></tr></table></figure><h2 id="3-时间创建"><a href="#3-时间创建" class="headerlink" title="3. 时间创建"></a>3. 时间创建</h2><p>可以指定年月日时分秒创建一个时间类，也可以使用字符串直接转换成时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime ofTime = LocalDateTime.of(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    System.out.println(<span class="string">"当前精确时间："</span> + ofTime);</span><br><span class="line"></span><br><span class="line">    LocalDate localDate = LocalDate.of(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">01</span>);</span><br><span class="line">    System.out.println(<span class="string">"当前日期："</span> + localDate);</span><br><span class="line"></span><br><span class="line">    LocalTime localTime = LocalTime.of(<span class="number">12</span>, <span class="number">01</span>, <span class="number">01</span>);</span><br><span class="line">    System.out.println(<span class="string">"当天时间："</span> + localTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前精确时间：2019-10-01T08:08:08</span><br><span class="line">当前日期：2019-10-01</span><br><span class="line">当天时间：12:01:01</span><br></pre></td></tr></table></figure><h2 id="4-时间转换"><a href="#4-时间转换" class="headerlink" title="4. 时间转换"></a>4. 时间转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 日期转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertTimeTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime parseTime = LocalDateTime.parse(<span class="string">"2019-10-01T22:22:22.222"</span>);</span><br><span class="line">    System.out.println(<span class="string">"字符串时间转换："</span> + parseTime);</span><br><span class="line"></span><br><span class="line">    LocalDate formatted = LocalDate.parse(<span class="string">"20190101"</span>, DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">    System.out.println(<span class="string">"字符串时间转换-指定格式："</span> + formatted);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Date 转换成 LocalDateTime</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    ZoneId zoneId = ZoneId.systemDefault();</span><br><span class="line">    System.out.println(<span class="string">"Date 转换成 LocalDateTime："</span> + LocalDateTime.ofInstant(date.toInstant(), zoneId));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LocalDateTime 转换成 Date</span></span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">    Date toDate = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());</span><br><span class="line">    System.out.println(<span class="string">"LocalDateTime 转换成 Date："</span> + toDate);\</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 当前时间转时间戳</span></span><br><span class="line">    <span class="keyword">long</span> epochMilli = LocalDateTime.now().toInstant(ZoneOffset.of(<span class="string">"+8"</span>)).toEpochMilli();</span><br><span class="line">    System.out.println(<span class="string">"当前时间转时间戳："</span> + epochMilli);</span><br><span class="line">    <span class="comment">// 时间戳转换成时间</span></span><br><span class="line">    LocalDateTime epochMilliTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMilli), ZoneId.systemDefault());</span><br><span class="line">    System.out.println(<span class="string">"时间戳转换成时间："</span> + epochMilliTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串时间转换：2019-10-01T22:22:22.222</span><br><span class="line">字符串时间转换-指定格式：2019-01-01</span><br><span class="line">Date 转换成 LocalDateTime：2019-10-24T00:46:41.251</span><br><span class="line">LocalDateTime 转换成 Date：Thu Oct 24 00:46:41 GMT+08:00 2019</span><br><span class="line">当前时间转时间戳：1571849201258</span><br><span class="line">时间戳转换成时间：2019-10-24T00:46:41.258</span><br></pre></td></tr></table></figure><h2 id="5-时间格式化"><a href="#5-时间格式化" class="headerlink" title="5. 时间格式化"></a>5. 时间格式化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">formatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当前时间："</span> + now);</span><br><span class="line">    System.out.println(<span class="string">"格式化后："</span> + now.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));</span><br><span class="line">    System.out.println(<span class="string">"格式化后："</span> + now.format(DateTimeFormatter.ISO_LOCAL_DATE));</span><br><span class="line">    System.out.println(<span class="string">"格式化后："</span> + now.format(DateTimeFormatter.ISO_LOCAL_TIME));</span><br><span class="line">    System.out.println(<span class="string">"格式化后："</span> + now.format(DateTimeFormatter.ofPattern(<span class="string">"YYYY-MM-dd hh:mm:ss"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前时间：2019-10-24T00:37:44.867</span><br><span class="line">格式化后：2019-10-24T00:37:44.867</span><br><span class="line">格式化后：2019-10-24</span><br><span class="line">格式化后：00:37:44.867</span><br><span class="line">格式化后：2019-10-24 12:37:44</span><br></pre></td></tr></table></figure><h2 id="6-时间比较"><a href="#6-时间比较" class="headerlink" title="6. 时间比较"></a>6. 时间比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">diffTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    LocalDateTime yestory = now.minusDays(<span class="number">1</span>);</span><br><span class="line">    System.out.println(now + <span class="string">"在"</span> + yestory + <span class="string">"之后吗?"</span> + now.isAfter(yestory));</span><br><span class="line">    System.out.println(now + <span class="string">"在"</span> + yestory + <span class="string">"之前吗?"</span> + now.isBefore(yestory));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间差</span></span><br><span class="line">    <span class="keyword">long</span> day = yestory.until(now, ChronoUnit.DAYS);</span><br><span class="line">    <span class="keyword">long</span> month = yestory.until(now, ChronoUnit.MONTHS);</span><br><span class="line">    <span class="keyword">long</span> hours = yestory.until(now, ChronoUnit.HOURS);</span><br><span class="line">    <span class="keyword">long</span> minutes = yestory.until(now, ChronoUnit.MINUTES);</span><br><span class="line">    System.out.println(<span class="string">"相差月份"</span> + month);</span><br><span class="line">    System.out.println(<span class="string">"相差天数"</span> + day);</span><br><span class="line">    System.out.println(<span class="string">"相差小时"</span> + hours);</span><br><span class="line">    System.out.println(<span class="string">"相差分钟"</span> + minutes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 距离JDK 14 发布还有多少天？</span></span><br><span class="line">    LocalDate jdk14 = LocalDate.of(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">17</span>);</span><br><span class="line">    LocalDate nowDate = LocalDate.now();</span><br><span class="line">    System.out.println(<span class="string">"距离JDK 14 发布还有："</span> + nowDate.until(jdk14, ChronoUnit.DAYS) + <span class="string">"天"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-10-24T00:39:01.589在2019-10-23T00:39:01.589之后吗?true</span><br><span class="line">2019-10-24T00:39:01.589在2019-10-23T00:39:01.589之前吗?false</span><br><span class="line">相差月份0</span><br><span class="line">相差天数1</span><br><span class="line">相差小时24</span><br><span class="line">相差分钟1440</span><br><span class="line">距离JDK 14 发布还有：145天</span><br></pre></td></tr></table></figure><h2 id="7-时间加减"><a href="#7-时间加减" class="headerlink" title="7. 时间加减"></a>7. 时间加减</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期加减</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calcTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当前时间："</span>+now);</span><br><span class="line">    LocalDateTime plusTime = now.plusMonths(<span class="number">1</span>).plusDays(<span class="number">1</span>).plusHours(<span class="number">1</span>).plusMinutes(<span class="number">1</span>).plusSeconds(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"增加1月1天1小时1分钟1秒时间后："</span> + plusTime);</span><br><span class="line">    LocalDateTime minusTime = now.minusMonths(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">"减少2个月时间后："</span> + minusTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前时间：2019-10-24T00:41:08.877</span><br><span class="line">增加1月1天1小时1分钟1秒时间后：2019-11-25T01:42:09.877</span><br><span class="line">减少2个月时间后：2019-08-24T00:41:08.877</span><br></pre></td></tr></table></figure><h2 id="8-时间扩展方法"><a href="#8-时间扩展方法" class="headerlink" title="8. 时间扩展方法"></a>8. 时间扩展方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeFunctionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(<span class="string">"当前时间："</span> + now);</span><br><span class="line">    <span class="comment">// 第一天</span></span><br><span class="line">    LocalDateTime firstDay = now.withDayOfMonth(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"本月第一天："</span> + firstDay);</span><br><span class="line">    <span class="comment">// 当天最后一秒</span></span><br><span class="line">    LocalDateTime lastSecondOfDay = now.withHour(<span class="number">23</span>).withMinute(<span class="number">59</span>).withSecond(<span class="number">59</span>);</span><br><span class="line">    System.out.println(<span class="string">"当天最后一秒："</span> + lastSecondOfDay);</span><br><span class="line">    <span class="comment">// 最后一天</span></span><br><span class="line">    LocalDateTime lastDay = now.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">    System.out.println(<span class="string">"本月最后一天:"</span> + lastDay);</span><br><span class="line">    <span class="comment">// 是否闰年</span></span><br><span class="line">    System.out.println(<span class="string">"今年是否闰年："</span> + Year.isLeap(now.getYear()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前时间：<span class="number">2019</span>-<span class="number">10</span>-<span class="number">24</span>T00:<span class="number">43</span>:<span class="number">28.296</span></span><br><span class="line">本月第一天：<span class="number">2019</span>-<span class="number">10</span>-<span class="number">01</span>T00:<span class="number">43</span>:<span class="number">28.296</span></span><br><span class="line">当天最后一秒：<span class="number">2019</span>-<span class="number">10</span>-<span class="number">24</span>T23:<span class="number">59</span>:<span class="number">59.296</span></span><br><span class="line">本月最后一天:<span class="number">2019</span>-<span class="number">10</span>-<span class="number">31</span>T00:<span class="number">43</span>:<span class="number">28.296</span></span><br><span class="line">今年是否闰年：<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>Jdk 8 新的时间类使用起来相比之前显得更加方便简单。</p><p><img src="/assets/jdk8-time/1571850210772.png" alt="JDK8 之前时间处理"></p><p>Jdk 8 也把时间处理成独立成一个包，并且使用不同的类名加以区分。而不是像之前相同的类名不同的包。这样的方式使用起来也更加清晰。</p><p>🚀 代码已经上传到 <a href="https://github.com/niumoo/jdk-feature" target="_blank" rel="noopener">Github(https://github.com/niumoo/jdk-feature)</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当前时间：2019年10月24日。距离 JDK 14 发布时间（2020年3月17日）还有多少天？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 距离JDK 14 发布还有多少天？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LocalDate jdk14 = LocalDate.of(&lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LocalDate nowDate = LocalDate.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;距离JDK 14 发布还有：&quot;&lt;/span&gt;+nowDate.until(jdk14,ChronoUnit.DAYS)+&lt;span class=&quot;string&quot;&gt;&quot;天&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Jdk 新特性" scheme="https://www.codingme.net/categories/Jdk-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="jdk8" scheme="https://www.codingme.net/tags/jdk8/"/>
    
      <category term="时间" scheme="https://www.codingme.net/tags/%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>抛弃Eclipse，投入IDEA 的独孤求败江湖</title>
    <link href="https://www.codingme.net/2019/10/develop/idea-skill/"/>
    <id>https://www.codingme.net/2019/10/develop/idea-skill/</id>
    <published>2019-10-22T17:01:01.000Z</published>
    <updated>2019-10-23T12:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> “工欲善其事，必先利其器”<br>出处：孔子《论语》</p></blockquote><p>两年了，这是我的 IDEA <strong>实用技巧</strong>总结，从前我是一个 Eclipse 忠实用户，直到某天我用上了  <strong>IntelliJ IDEA</strong> ，Eclipse 开始在硬盘躺尸…….</p><p><img src="/assets/idea-skill/1571750577728.png" alt="IDEA 启动"></p><p><strong>IDEA</strong> 是一个非常好用的工具，它的语法十分智能，当你写了一段不怎么聪明（很傻）的代码时候，它会告诉你有更优的写法；当你掌握了常用的快捷键后，开发效率提升 N 倍；当你熟练使用时候，编码速度与编码质量都有质的飞跃。<br><a id="more"></a><br>那么说了那么多，到底在哪里才能买到呢？哦不，到底怎么使用呢？</p><h2 id="1-窗口切换-凌波微步"><a href="#1-窗口切换-凌波微步" class="headerlink" title="1.   窗口切换 - 凌波微步"></a>1.   窗口切换 - 凌波微步</h2><blockquote><p>「凌波微步」乃是一门极上乘的轻功身法，所以列于卷轴之末，以易经八八六十四卦为基础，使用者按特定顺序踏着卦象方位行进，从第一步到最后一步正好行走一个大圈。此步法精妙异常。<br>出处：金庸《天龙八部》。</p></blockquote><p>IDEA 中的 “凌波微步” 恰好就是这么一圈常用窗口，均匀分布在编辑窗口周围，且配以方便的快捷键，切换起来十分的迅速。</p><p><img src="/assets/idea-skill/1571756048466.png" alt="IDEA 窗口"></p><p>在实际的开发过程中，窗口切换的操作是很频繁的，下面的几个快捷键必不可少。</p><p>快捷键：</p><ul><li><p><strong>ALT +１</strong>显示/隐藏文件窗口⭐。</p></li><li><p><strong>ALT + 2</strong>显示/隐藏收藏窗口  。</p></li><li><p><strong>ALT + 4</strong> 显示/隐藏运行窗口   。</p></li><li><p><strong>ALT + 6</strong>显示/隐藏Todo窗口  。</p></li><li><p><strong>ALT + 7</strong>显示/隐藏类结构窗口。</p></li></ul><h2 id="2-项目切换-来而不往"><a href="#2-项目切换-来而不往" class="headerlink" title="2. 项目切换 - 来而不往"></a>2. 项目切换 - 来而不往</h2><blockquote><p>往而不来，非礼也；来而不往，亦非礼也。<br>出处: 《<a href="https://baike.baidu.com/item/礼记" target="_blank" rel="noopener">礼记</a>·<a href="https://baike.baidu.com/item/曲礼" target="_blank" rel="noopener">曲礼</a>上》</p></blockquote><p><img src="/assets/idea-skill/1571756766101.png" alt="窗口切换"></p><p>开发当中很多时候会同时打开多个项目，如果这时候你还傻傻的点击窗口切换窗口，无疑效率低下，点来点去之间影响了敲击键盘的快感。既然同时打开了多个项目窗口，作为窗口邻居都不能自由来往有点不尽人意。</p><p>快捷键：</p><ul><li>上一个项目窗口 <strong>CTRL + ALT + [。</strong></li><li>上一个项目窗口 <strong>CTRL + ALT + ]</strong>。</li></ul><h2 id="3-文件定位-来去自如"><a href="#3-文件定位-来去自如" class="headerlink" title="3. 文件定位 - 来去自如"></a>3. 文件定位 - 来去自如</h2><blockquote><p> 身如不系之舟，一任流任坎止；心似既灰之木，何妨刀割香涂？来去自如乎。<br>出处：战国·庄子《庄子·列御寇》 </p></blockquote><p>文件定位是<strong>非常常用</strong>的操作。</p><ul><li><strong>CTRL + N</strong> 搜索 Java 类文件⭐。</li><li><p><strong>CTRL + SHIFT + N</strong> 搜索所有文件。</p></li><li><p><strong>CTRL + E</strong> 打开最近浏览文件  ，再次 <strong>CTRL + E</strong> 可以只显示更改的文件。</p></li><li><strong>CTRL + SHIFT + E</strong> 打开最近浏览文件 ，再次 <strong>CTRL + SHIFT + E</strong> 可以只显示更改的文件。</li><li><strong>SHIFT + 鼠标左键</strong>，关闭文件。</li></ul><h2 id="4-代码定位-百步穿杨"><a href="#4-代码定位-百步穿杨" class="headerlink" title="4. 代码定位 - 百步穿杨"></a>4. 代码定位 - 百步穿杨</h2><blockquote><p> 楚有养由基者，善射；去柳叶百步而射之，百发百中。<br> 出处： 《战国策 · 西周策》 </p></blockquote><p>用过 Eclipse 的想必都知道 Eclipse 的文本搜索速度是多么缓慢，多个项目搜索时候，看着那缓慢的进度条，仿佛在虚度生命。而 <strong>IDEA</strong> 速度保证让你第一次使用时就为之惊叹。毫秒级的响应速度（自动忽略CPU 百分百，手动滑稽），智能的搜索模式，不要太舒服。</p><p>那么又说了那么多，到底该怎么用呢？</p><p><strong>超级常用</strong>快捷键：</p><ul><li><strong>CTRL + SHIFT + F</strong> 项目代码全文搜索⭐。</li><li><strong>CTRL + SHIFT + ALT + N</strong> 搜索函数，自动模糊匹配，十分强大。</li><li><strong>CTRL + W</strong> 万能选中快捷键，爱不释手，多层嵌套时非常好用⭐。</li></ul><h2 id="5-代码操作-出神入化"><a href="#5-代码操作-出神入化" class="headerlink" title="5. 代码操作 - 出神入化"></a>5. 代码操作 - 出神入化</h2><blockquote><p> 我不曾出声，他连忙答应。金圣叹：‘真正出神入化之笔’<br>出处： 元·王实甫《西厢记》</p></blockquote><p>基本的代码操作在日常开发中才是用的最多的，小小的快捷键让我们的开发舒适感不断爬升。低调低调，都是基本操作。</p><ul><li><strong>ALT + ENTER</strong> 万能智能键，强大到无法自拔⭐。</li><li><strong>CTRL + ALT + L</strong> 代码格式化⭐。</li><li><strong>CTRL + SHIFT + R</strong> 项目全文代码查找与替换⭐。</li><li><strong>SHIFT + F6</strong> 重构 - 重命名⭐。</li><li><strong>iter + Tab</strong> 生成 增强for 循环⭐。</li><li><strong>itar + Tab</strong> 生成 for 循环。</li><li><strong>psvm + Tab</strong> 生成 main 方法。</li><li><strong>sout + Tab</strong> 生成 System.out.println()。</li><li><strong>CTRL + F</strong> 查找文本。</li><li><strong>CTRL + R</strong> 替换文本。</li><li><strong>CTRL + D</strong> 复制行。</li><li><strong>CTRL + X</strong> 剪切行。</li><li><strong>CTRL + Y</strong> 删除行。</li><li><strong>CTRL + /</strong>  行注释或取消行注释。</li><li><strong>CTRL + SHIFT + /</strong> 块注释或取消块注释。</li><li><strong>CTRL + SHIFT + ENTER</strong>  自动补上结尾分号，或者补上结尾花括号{}。</li><li><strong>CTRL + U</strong> 大小写切换。</li></ul><h2 id="6-惊世骇俗-深藏不露"><a href="#6-惊世骇俗-深藏不露" class="headerlink" title="6. 惊世骇俗 - 深藏不露"></a>6. 惊世骇俗 - 深藏不露</h2><p>不得不说， <strong>IDEA</strong> 用起来更加舒服的地方就是它总能想你所想，在使用的过程中，经常发现意料之外的惊喜功能。</p><h3 id="6-1-集成插件"><a href="#6-1-集成插件" class="headerlink" title="6.1  集成插件"></a>6.1  集成插件</h3><p><img src="/assets/idea-skill/1571762835305.png" alt="IDEA 插件"></p><p>一个好用的插件可以让开发事半功倍， IDEA 支持丰富的插件扩展，不管是有助于代码开发类插件，还是帮助分析类插件，还是小工具插件，亦或是主题插件等，都十分丰富，常常你在开发中因为某个问题举步维艰，可能你缺少的只是一款趁手的插件。</p><p>下面仅仅列举我常用的几款插件，更多插件可以自行探索。</p><ol><li><strong>A8Translate</strong> ，一款翻译工具，英语不够，工具来凑。</li><li><strong>Eclipse Code Formatter</strong> ，可以结合阿里代码格式化文件进行格式化。</li><li><strong>Lombok</strong> ，Lombok 注解支持。</li><li><strong>Maven Helper</strong> ，Maven 依赖处理。</li></ol><h3 id="6-2-Rest-Client"><a href="#6-2-Rest-Client" class="headerlink" title="6.2 Rest Client"></a>6.2 Rest Client</h3><p>当你想简单的测试某个接口调用响应情况时候，不必打开你的 postman，<strong>IDEA</strong> 已经默认为你集成了 Rest Client 测试工具。可以 <strong>CTRL+ SHIFT + A</strong> 然后搜索 <strong>restful</strong>。</p><h3 id="6-3-剪切板历史"><a href="#6-3-剪切板历史" class="headerlink" title="6.3 剪切板历史"></a>6.3 剪切板历史</h3><p>听说你拷贝了一串代码，又拷贝了一串代码，尴尬，之前的拷贝丢失了。莫慌， <strong>IDEA</strong> 想你所想，内置了粘贴板历史。只需要使用快捷键  <strong>CTRL + SHIFT + V</strong> 即可。</p><p><img src="/assets/idea-skill/1571788672930.png" alt="剪切板历史"></p><h3 id="6-4-JSON-格式化"><a href="#6-4-JSON-格式化" class="headerlink" title="6.4 JSON 格式化"></a>6.4 JSON 格式化</h3><p>当控制台打印了JSON 字符串时，可以右键格式化显示，对于 JSON 响应的接口调用测试时候十分好用。</p><p><img src="/assets/idea-skill/1571762204121.png" alt="JSON 格式化"></p><h3 id="6-5-演示模式"><a href="#6-5-演示模式" class="headerlink" title="6.5 演示模式"></a>6.5 演示模式</h3><p>按 ALT + V 选择 Enter Presentation Mode 进入演示模式，可以放大编辑窗口，十分适合代码操作演示，如果对于 IDEA 快捷键比较熟练，操作起来依旧行云流水。</p><h3 id="6-6-补全判断"><a href="#6-6-补全判断" class="headerlink" title="6.6 补全判断"></a>6.6 补全判断</h3><p>对某个对象判断是否为 null，或者对某个字符串判空等，都可以使用 <strong>IDEA 智能语法</strong>。</p><p>比如：</p><p><img src="/assets/idea-skill/1571763565635.png" alt="代码"></p><p><strong>content.notnull</strong> 回车可以自动生成下面的代码，类似的操作在 IDEA 中还有很多，不再一一列举。</p><p><img src="/assets/idea-skill/1571763587951.png" alt="生成代码"></p><p>文中的一些 <strong>IDEA</strong> 使用技巧都是工作中经常使用的，当然 <strong>IDEA</strong> 的功能远不止这些。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; “工欲善其事，必先利其器”&lt;br&gt;出处：孔子《论语》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两年了，这是我的 IDEA &lt;strong&gt;实用技巧&lt;/strong&gt;总结，从前我是一个 Eclipse 忠实用户，直到某天我用上了  &lt;strong&gt;IntelliJ IDEA&lt;/strong&gt; ，Eclipse 开始在硬盘躺尸…….&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/idea-skill/1571750577728.png&quot; alt=&quot;IDEA 启动&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDEA&lt;/strong&gt; 是一个非常好用的工具，它的语法十分智能，当你写了一段不怎么聪明（很傻）的代码时候，它会告诉你有更优的写法；当你掌握了常用的快捷键后，开发效率提升 N 倍；当你熟练使用时候，编码速度与编码质量都有质的飞跃。&lt;br&gt;
    
    </summary>
    
      <category term="生产工具" scheme="https://www.codingme.net/categories/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="idea" scheme="https://www.codingme.net/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十四）迅速启用 HTTPS 加密你的网站</title>
    <link href="https://www.codingme.net/2019/08/springboot/springboot-14-https/"/>
    <id>https://www.codingme.net/2019/08/springboot/springboot-14-https/</id>
    <published>2019-08-06T16:10:22.000Z</published>
    <updated>2019-10-29T00:24:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/springboot-14-https/1572308662878.png" alt="HTTPS"></p><h2 id="1-获取-HTTPS-证书"><a href="#1-获取-HTTPS-证书" class="headerlink" title="1. 获取 HTTPS 证书"></a>1. 获取 HTTPS 证书</h2><p>正常情况下 HTTPS 证书需要从证书授权中心获得，这样获得的证书才具有公信力，也会被各种浏览器客户端所认可。常见的证书品牌如 Symantec，GeoTrustm，TrustAsia，Symantec 等。不过在 Springboot 的 HTTPS 实验中就没有必要去申请了，我们可以使用 Java 自带的 <strong>keytool</strong> 生成 HTTPS 证书。</p><a id="more"></a><p>查看 keytool 工具使用说明。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;keytool</span><br><span class="line">密钥和证书管理工具</span><br><span class="line">命令:</span><br><span class="line"> -certreq            生成证书请求</span><br><span class="line"> -changealias        更改条目的别名</span><br><span class="line"> -delete             删除条目</span><br><span class="line"> -exportcert         导出证书</span><br><span class="line"> -genkeypair         生成密钥对</span><br><span class="line"> -genseckey          生成密钥</span><br><span class="line"> -gencert            根据证书请求生成证书</span><br><span class="line"> -importcert         导入证书或证书链</span><br><span class="line"> -importpass         导入口令</span><br><span class="line"> -importkeystore     从其他密钥库导入一个或所有条目</span><br><span class="line"> -keypasswd          更改条目的密钥口令</span><br><span class="line"> -list               列出密钥库中的条目</span><br><span class="line"> -printcert          打印证书内容</span><br><span class="line"> -printcertreq       打印证书请求的内容</span><br><span class="line"> -printcrl           打印 CRL 文件的内容</span><br><span class="line"> -storepasswd        更改密钥库的存储口令</span><br><span class="line"></span><br><span class="line">使用 "keytool -command_name -help" 获取 command_name 的用法</span><br><span class="line"></span><br><span class="line">D:\&gt;keytool -genkeypair --help</span><br><span class="line">keytool -genkeypair [OPTION]...</span><br><span class="line">生成密钥对</span><br><span class="line">选项:</span><br><span class="line"> -alias &lt;alias&gt;                  要处理的条目的别名</span><br><span class="line"> -keyalg &lt;keyalg&gt;                密钥算法名称</span><br><span class="line"> -keysize &lt;keysize&gt;              密钥位大小</span><br><span class="line"> -sigalg &lt;sigalg&gt;                签名算法名称</span><br><span class="line"> -destalias &lt;destalias&gt;          目标别名</span><br><span class="line"> -dname &lt;dname&gt;                  唯一判别名</span><br><span class="line"> -startdate &lt;startdate&gt;          证书有效期开始日期/时间</span><br><span class="line"> -ext &lt;value&gt;                    X.509 扩展</span><br><span class="line"> -validity &lt;valDays&gt;             有效天数</span><br><span class="line"> -keypass &lt;arg&gt;                  密钥口令</span><br><span class="line"> -keystore &lt;keystore&gt;            密钥库名称</span><br><span class="line"> -storepass &lt;arg&gt;                密钥库口令</span><br><span class="line"> -storetype &lt;storetype&gt;          密钥库类型</span><br><span class="line"> -providername &lt;providername&gt;    提供方名称</span><br><span class="line"> -providerclass &lt;providerclass&gt;  提供方类名</span><br><span class="line"> -providerarg &lt;arg&gt;              提供方参数</span><br><span class="line"> -providerpath &lt;pathlist&gt;        提供方类路径</span><br><span class="line"> -v                              详细输出</span><br><span class="line"> -protected                      通过受保护的机制的口令</span><br></pre></td></tr></table></figure><p>通过上面的 keytool ，我们生成自己的自签名证书。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;keytool -genkeypair -alias tomcat_https -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -keystore d:/tomcat_https.keystore -storepass 123456</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  darcy</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  codingme</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  codingme</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  ShangHai</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  ShangHai</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  ZN</span><br><span class="line">CN=darcy, OU=codingme, O=codingme, L=ShangHai, ST=ShangHai, C=ZN是否正确?</span><br><span class="line">  [否]:  y</span><br><span class="line">D:\&gt;</span><br></pre></td></tr></table></figure><p>这时候已经在我们指定的位置下生成了证书文件，如果需要查看证书信息，可以使用 keytool 的 list 命令，可以看到密钥库类型是 JKS，在后面的配置里会用到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;keytool -list -keystore tomcat_https.keystore</span><br><span class="line">输入密钥库口令:</span><br><span class="line"></span><br><span class="line">密钥库类型: JKS</span><br><span class="line">密钥库提供方: SUN</span><br><span class="line"></span><br><span class="line">您的密钥库包含 1 个条目</span><br><span class="line"></span><br><span class="line">tomcat_https, 2019-4-21, PrivateKeyEntry,</span><br><span class="line">证书指纹 (SHA1): 1E:5F:15:9C:45:BD:D3:2A:7E:7F:1F:83:56:B8:74:E0:8B:CA:FD:F6</span><br><span class="line"></span><br><span class="line">D:\&gt;</span><br></pre></td></tr></table></figure><p>自己生成的 HTTPS 证书只能用来自己测试，真正用于网络上时，浏览器会显示证书无法信息。因此如果想要得到一个真实有效的证书，请看文章末尾。</p><h2 id="2-配置-HTTPS-证书"><a href="#2-配置-HTTPS-证书" class="headerlink" title="2. 配置 HTTPS 证书"></a>2. 配置 HTTPS 证书</h2><p>创建一个 Springboot 项目这里不提，拷贝上一步骤中生成的 tomcat_https.keystore 证书文件到<strong>src/main/resource</strong> 文件夹下，先看下总体的项目结构。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/3f4682d8b6eaa6ac7bf29eae9f9d5109.png" alt="项目结构如下"></p><p>然后在 application.yml 文件中配置 HTTPS 相关信息。直接配置了端口号为 <strong>443</strong>，443是 HTTPS 的默认端口，这样在使用 HTTPS 就行访问的时候就不需要写额外的端口号了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 HTTPS 相关信息</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">  http-port:</span> <span class="number">80</span> <span class="comment"># 为了后面的配置使用，暂时无用</span></span><br><span class="line"><span class="attr">  ssl:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    key-store:</span> <span class="attr">classpath:tomcat_https.keystore</span> <span class="comment"># 证书文件</span></span><br><span class="line"><span class="attr">    key-password:</span> <span class="number">123456</span>  <span class="comment"># 密码</span></span><br><span class="line"><span class="attr">    key-store-type:</span> <span class="string">JKS</span> <span class="comment"># 密钥库类型</span></span><br><span class="line"><span class="attr">    key-alias:</span> <span class="string">tomcat_https</span></span><br></pre></td></tr></table></figure><p>这时，已经可以通过 HTTPS 进行页面访问了。</p><h2 id="3-测试-HTTPS-证书"><a href="#3-测试-HTTPS-证书" class="headerlink" title="3. 测试 HTTPS 证书"></a>3. 测试 HTTPS 证书</h2><p>直接编写一个 接口用于测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Https 接口控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/20 22:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello HTTPS"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动之后可以通过 <a href="https://localhost/hello" target="_blank" rel="noopener">https://localhost/hello</a> 进行访问了。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/29a658a7761aa462cb80e1e34e5b0017.png" alt="HTTPS 访问测试"></p><p>当然，由于是自己生成的证书，会提示不安全，继续访问即可，如果是正常申请或者购买的证书就不会有这个问题的。</p><h2 id="4-HTTP-跳转-HTTPS"><a href="#4-HTTP-跳转-HTTPS" class="headerlink" title="4. HTTP 跳转 HTTPS"></a>4. HTTP 跳转 HTTPS</h2><p>在上面的测试里，HTTPS 已经可以访问了，但是 HTTP 却不能访问，大多数情况下在启用了 HTTPS 之后，都会希望 HTTP 的请求会自动跳转到 HTTPS，这个在 Springboot 里自然也是可以实现的。我们只需要写一个配置类把 HTTP 请求直接转发到 HTTPS 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * HTTP 强制跳转 HTTPS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/21 17:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Http2Https</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sslPort;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.http-port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> httpPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title">servletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory tomcat = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(httpPort);</span><br><span class="line">        connector.setRedirectPort(sslPort);</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(connector);</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次启动之后，使用 <a href="http://localhost/hello" target="_blank" rel="noopener">http://localhost/hello</a> 访问会自动跳转到 <a href="https://localhost/hello" target="_blank" rel="noopener">https://localhost/hello</a>.</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>如果需要申请免费证书，可以在腾讯云上免费申请，请参考：</p><ul><li><a href="https://cloud.tencent.com/document/product/400/6813#.E8.8E.B7.E5.8F.96.E8.AF.81.E4.B9.A6" target="_blank" rel="noopener">免费版 DV SSL 证书申请</a>。</li></ul><p>如果想要自己安装证书，请参考：</p><ul><li><a href="https://cloud.tencent.com/document/product/400/35243" target="_blank" rel="noopener">Apache 服务器证书安装</a></li><li><a href="https://cloud.tencent.com/document/product/400/35244" target="_blank" rel="noopener">Nginx 服务器证书安装</a></li><li><a href="https://cloud.tencent.com/document/product/400/35224" target="_blank" rel="noopener">Tomcat 服务器证书安装</a></li><li><a href="https://cloud.tencent.com/document/product/400/35225" target="_blank" rel="noopener">Windows IIS 服务器证书安装</a></li></ul><p>🐟 文章相关代码已经上传 Github <a href="https://github.com/niumoo/springboot/tree/master/springboot-web-https" target="_blank" rel="noopener">Spring Boot https</a>， 欢迎⭐Star️，欢迎 Fork !</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/springboot-14-https/1572308662878.png&quot; alt=&quot;HTTPS&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-获取-HTTPS-证书&quot;&gt;&lt;a href=&quot;#1-获取-HTTPS-证书&quot; class=&quot;headerlink&quot; title=&quot;1. 获取 HTTPS 证书&quot;&gt;&lt;/a&gt;1. 获取 HTTPS 证书&lt;/h2&gt;&lt;p&gt;正常情况下 HTTPS 证书需要从证书授权中心获得，这样获得的证书才具有公信力，也会被各种浏览器客户端所认可。常见的证书品牌如 Symantec，GeoTrustm，TrustAsia，Symantec 等。不过在 Springboot 的 HTTPS 实验中就没有必要去申请了，我们可以使用 Java 自带的 &lt;strong&gt;keytool&lt;/strong&gt; 生成 HTTPS 证书。&lt;/p&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="Https" scheme="https://www.codingme.net/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十三）使用邮件服务</title>
    <link href="https://www.codingme.net/2019/03/springboot/springboot-13-email/"/>
    <id>https://www.codingme.net/2019/03/springboot/springboot-13-email/</id>
    <published>2019-03-11T16:20:22.000Z</published>
    <updated>2019-05-20T16:29:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/00a2b4768bf601da67118c0acb347876.jpg" alt="桌面生活（来自网络）">我们这个时代，邮件服务不管是对于工作上的交流，还是平时的各种邮件通知，都是一个十分重要的存在。Java 从很早时候就可以通过 Java mail 支持邮件服务。Spring 更是对 Java mail 进行了进一步的封装，抽象出了 <code>JavaMailSender</code>. 后来随着 Springboot 的出现，理所当然的出现了 <code>spring-boot-starter-mail</code>. 不管怎么说，每次的封装都让使用变得越来越简单。<br><a id="more"></a></p><h2 id="Springboot-mail-依赖"><a href="#Springboot-mail-依赖" class="headerlink" title="Springboot mail 依赖"></a>Springboot mail 依赖</h2><p>创建 Springboot 项目不提，先看一下总体目录结构。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/87989c22d455e3d428811562649c840d.jpg" alt="项目结构"></p><p>直接引入 Springboot 邮件服务所需的依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 邮件服务 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- Thymeleaf 模版，用于发送模版邮件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Springboot-mail-配置"><a href="#Springboot-mail-配置" class="headerlink" title="Springboot mail 配置"></a>Springboot mail 配置</h2><p>使用邮件服务需要配置自己可以使用的邮箱信息，一般需要配置发送协议 SMTP、邮箱帐号（本次以126邮箱为例）、邮箱密码以及编码格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.mail.host=smtp.126.com</span><br><span class="line">spring.mail.port=25</span><br><span class="line"># 你的邮箱地址</span><br><span class="line">spring.mail.username=niumoo@126.com </span><br><span class="line"># 你的授权码（126 和 163 以及 qq 邮箱 都需要授权码登录，没有授权码的直接登录网页版邮箱设置里设置）</span><br><span class="line">spring.mail.password=password</span><br><span class="line">spring.mail.default-encoding=UTF-8</span><br></pre></td></tr></table></figure></p><h2 id="Springboot-mail-文本邮件"><a href="#Springboot-mail-文本邮件" class="headerlink" title="Springboot mail 文本邮件"></a>Springboot mail 文本邮件</h2><p>文本邮件是最简单也是最基础的一种邮件，使用 Spring 封装的 <code>JavaMailSender</code> 直接发送就可以了。</p><p>创建 <code>MailService</code> 类，注入 <code>JavaMailSender</code> 用于发送邮件，使用 <code>@Value(&quot;${spring.mail.username}&quot;)</code> 绑定配置文件中的参数用于设置邮件发送的来邮箱。使用 <code>@Service</code> 注解把 <code>MailService</code> 注入到 Spring 容器，使用 <code>Lombok</code> 的 <code>@Slf4j</code> 引入日志。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 邮件服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/3/10 21:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.mail.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送简单文本邮件</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleTextMail</span><span class="params">(String to, String subject, String content)</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(content);</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        mailSender.send(message);</span><br><span class="line">        log.info(<span class="string">"【文本邮件】成功发送！to=&#123;&#125;"</span>, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建 Springboot 的单元测试类测试文本邮件，实验中的收信人为了方便，都设置成了自己的邮箱。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailService mailService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleTextMailTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">        String subject = <span class="string">"Springboot 发送简单文本邮件"</span>;</span><br><span class="line">        String content = <span class="string">"&lt;p&gt;第一封 Springboot 简单文本邮件&lt;/p&gt;"</span>;</span><br><span class="line">        mailService.sendSimpleTextMail(to, subject, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行单元测试，测试文本邮件的发送。</p><p>PS：如果运行报出异常 <code>AuthenticationFailedException: 535 Error</code>. 一般都是用户名和密码有误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Caused by: javax.mail.AuthenticationFailedException: 535 Error: authentication failed</span><br><span class="line"></span><br><span class="line">at com.sun.mail.smtp.SMTPTransport$Authenticator.authenticate(SMTPTransport.java:965)</span><br><span class="line">at com.sun.mail.smtp.SMTPTransport.authenticate(SMTPTransport.java:876)</span><br><span class="line">at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:780)</span><br><span class="line">at javax.mail.Service.connect(Service.java:366)</span><br><span class="line">at org.springframework.mail.javamail.JavaMailSenderImpl.connectTransport(JavaMailSenderImpl.java:517)</span><br><span class="line">at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:436)</span><br><span class="line">... 34 more</span><br></pre></td></tr></table></figure></p><p>正常运行输出成功发送的日志。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-03-11 23:35:14.743  INFO 13608 --- [           main] n.codingme.boot.service.MailServiceTest  : Started MailServiceTest in 3.964 seconds (JVM running for 5.749)</span><br><span class="line">2019-03-11 23:35:24.718  INFO 13608 --- [           main] net.codingme.boot.service.MailService    : 【文本邮件】成功发送！to=niumoo@126.com</span><br></pre></td></tr></table></figure></p><p>查看邮箱中的收信。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/e391dbce4b614779ae9a024908ef0275.jpg" alt="文本邮件"></p><p>文本邮件正常收到，同时可见文本邮件中的 HTML 标签也不会被解析。</p><h2 id="Springboot-mail-HTML-邮件"><a href="#Springboot-mail-HTML-邮件" class="headerlink" title="Springboot mail HTML 邮件"></a>Springboot mail HTML 邮件</h2><p>在上面的 <code>MailService</code> 类里新加一个方法 <code>sendHtmlMail</code>，用于测试 HTML 邮件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送 HTML 邮件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String to, String subject, String content)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    messageHelper.setFrom(from);</span><br><span class="line">    messageHelper.setTo(to);</span><br><span class="line">    messageHelper.setSubject(subject);</span><br><span class="line">    <span class="comment">// true 为 HTML 邮件</span></span><br><span class="line">    messageHelper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">    mailSender.send(message);</span><br><span class="line">    log.info(<span class="string">"【HTML 邮件】成功发送！to=&#123;&#125;"</span>, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在测试方法中增加 HTML 邮件测试方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMailTest</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">    String subject = <span class="string">"Springboot 发送 HTML 邮件"</span>;</span><br><span class="line">    String content = <span class="string">"&lt;h2&gt;Hi~&lt;/h2&gt;&lt;p&gt;第一封 Springboot HTML 邮件&lt;/p&gt;"</span>;</span><br><span class="line">    mailService.sendHtmlMail(to, subject, content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行单元测试，查看收信情况。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/147b7f68d12e0080b408a581414fb92a.jpg" alt="HTML 邮件"></p><p>HTML 邮件正常收到，HTML 标签也被解析成对应的样式。</p><h2 id="Springboot-mail-附件邮件"><a href="#Springboot-mail-附件邮件" class="headerlink" title="Springboot mail 附件邮件"></a>Springboot mail 附件邮件</h2><p>在上面的 <code>MailService</code> 类里新加一个方法 <code>sendAttachmentMail</code>，用于测试 附件邮件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送带附件的邮件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileArr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentMail</span><span class="params">(String to, String subject, String content, String... fileArr)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">    messageHelper.setFrom(from);</span><br><span class="line">    messageHelper.setTo(to);</span><br><span class="line">    messageHelper.setSubject(subject);</span><br><span class="line">    messageHelper.setText(content, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加附件</span></span><br><span class="line">    <span class="keyword">for</span> (String filePath : fileArr) &#123;</span><br><span class="line">        FileSystemResource fileResource = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(filePath));</span><br><span class="line">        <span class="keyword">if</span> (fileResource.exists()) &#123;</span><br><span class="line">            String filename = fileResource.getFilename();</span><br><span class="line">            messageHelper.addAttachment(filename, fileResource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">    log.info(<span class="string">"【附件邮件】成功发送！to=&#123;&#125;"</span>, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在测试方法中增加附件邮件测试方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentTest</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">    String subject = <span class="string">"Springboot 发送 HTML 附件邮件"</span>;</span><br><span class="line">    String content = <span class="string">"&lt;h2&gt;Hi~&lt;/h2&gt;&lt;p&gt;第一封 Springboot HTML 附件邮件&lt;/p&gt;"</span>;</span><br><span class="line">    String filePath = <span class="string">"pom.xml"</span>;</span><br><span class="line">    mailService.sendAttachmentMail(to, subject, content, filePath, filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行单元测试，查看收信情况。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/0ab42e65ae35c7970d7954bf5a985a79.jpg" alt="附件邮件"></p><p>带附件的邮件正常收到，多个附件的实现方式同理。</p><h2 id="Springboot-mail-图片邮件"><a href="#Springboot-mail-图片邮件" class="headerlink" title="Springboot mail 图片邮件"></a>Springboot mail 图片邮件</h2><p>图片邮件和其他的邮件方式略有不同，图片邮件需要先在内容中定义好图片的位置并出给一个记录 ID ，然后在把图片加到邮件中的对于的 ID 位置。</p><p>在上面的 <code>MailService</code> 类里新加一个方法 <code>sendImgMail</code>，用于测试 附件邮件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 发送带图片的邮件</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> imgMap</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendImgMail</span><span class="params">(String to, String subject, String content, Map&lt;String, String&gt; imgMap)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">     MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">     MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">     messageHelper.setFrom(from);</span><br><span class="line">     messageHelper.setTo(to);</span><br><span class="line">     messageHelper.setSubject(subject);</span><br><span class="line">     messageHelper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">     <span class="comment">// 添加图片</span></span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : imgMap.entrySet()) &#123;</span><br><span class="line">         FileSystemResource fileResource = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(entry.getValue()));</span><br><span class="line">         <span class="keyword">if</span> (fileResource.exists()) &#123;</span><br><span class="line">             String filename = fileResource.getFilename();</span><br><span class="line">             messageHelper.addInline(entry.getKey(), fileResource);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     mailSender.send(mimeMessage);</span><br><span class="line">     log.info(<span class="string">"【图片邮件】成功发送！to=&#123;&#125;"</span>, to);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>在测试方法中增加图片邮件测试方法，测试方法中使用的 apple.png 是项目里的一个图片。可以看上面的项目结构。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendImgTest</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">    String subject = <span class="string">"Springboot 发送 HTML 图片邮件"</span>;</span><br><span class="line">    String content =</span><br><span class="line">        <span class="string">"&lt;h2&gt;Hi~&lt;/h2&gt;&lt;p&gt;第一封 Springboot HTML 图片邮件&lt;/p&gt;&lt;br/&gt;&lt;img src=\"cid:img01\" /&gt;&lt;img src=\"cid:img02\" /&gt;"</span>;</span><br><span class="line">    String imgPath = <span class="string">"apple.png"</span>;</span><br><span class="line">    Map&lt;String, String&gt; imgMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    imgMap.put(<span class="string">"img01"</span>, imgPath);</span><br><span class="line">    imgMap.put(<span class="string">"img02"</span>, imgPath);</span><br><span class="line">    mailService.sendImgMail(to, subject, content, imgMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行单元测试，查看收信情况。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/a676fadf6b40195c7de746adff0700bc.jpg" alt="图片邮件"></p><p>两个图片正常显示在邮件里。</p><h2 id="Springboot-mail-模版邮件"><a href="#Springboot-mail-模版邮件" class="headerlink" title="Springboot mail 模版邮件"></a>Springboot mail 模版邮件</h2><p>模版邮件的用处很广泛，像经常收到的注册成功邮件或者是操作通知邮件等都是模版邮件，模版邮件往往只需要更改其中的几个变量。Springboot 中的模版邮件首选需要选择一款模版引擎，在引入依赖的时候已经增加了模版引擎 <code>Thymeleaf</code>.</p><p>模版邮件首先需要一个邮件模版，我们在 <code>Templates</code> 下新建一个 <code>HTML</code> 文件 <code>RegisterSuccess.html</code>. 其中的 username 是给我们自定义的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册成功通知<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>[[$&#123;username&#125;]]，您好!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    新的公钥已添加到你的账户:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    标题: HP-WIN10 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    如果公钥无法使用，你可以在这里重新添加： SSH Keys</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在邮件服务 <code>MailService</code> 中注入模版引擎,然后编写邮件模版发送代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送模版邮件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paramMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> template</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTemplateMail</span><span class="params">(String to, String subject, Map&lt;String, Object&gt; paramMap, String template)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    Context context = <span class="keyword">new</span> Context();</span><br><span class="line">    <span class="comment">// 设置变量的值</span></span><br><span class="line">    context.setVariables(paramMap);</span><br><span class="line">    String emailContent = templateEngine.process(template, context);</span><br><span class="line">    sendHtmlMail(to, subject, emailContent);</span><br><span class="line">    log.info(<span class="string">"【模版邮件】成功发送！paramsMap=&#123;&#125;，template=&#123;&#125;"</span>, paramMap, template);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在单元单元测试中增加模版邮件测试方法，然后发送邮件测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTemplateMailTest</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    String to = <span class="string">"niumoo@126.com"</span>;</span><br><span class="line">    String subject = <span class="string">"Springboot 发送 模版邮件"</span>;</span><br><span class="line">    Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    paramMap.put(<span class="string">"username"</span>, <span class="string">"Darcy"</span>);</span><br><span class="line">    mailService.sendTemplateMail(to, subject, paramMap, <span class="string">"RegisterSuccess"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看收信情况。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/8244d50efe797cfa3ceb14aab7b7b461.jpg" alt="模版邮件"></p><p>可以发现模版邮件已经正常发送了。</p><h2 id="Springboot-mail-补充"><a href="#Springboot-mail-补充" class="headerlink" title="Springboot mail 补充"></a>Springboot mail 补充</h2><p>上面的例子中，是 Springboot 邮件服务的基本用法，代码也有很多重复，和实际的使用情况相比还有很多不足，比如缺少<code>异常处理机制</code>，在发送失败时的<code>重试机制</code>也没有，实际情况中邮件服务往往对实时性不高，多说情况下会用于<code>异步请求</code>。</p><p>文章相关代码已经上传 Github <a href="https://github.com/niumoo/springboot/tree/master/springboot-mail" target="_blank" rel="noopener">Spring Boot 相关整合 - 邮件服务</a>。</p><p>&lt;完&gt;<br>本文原发于个人博客：<a href="https://www.codingme.net">https://www.codingme.net</a> 转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/00a2b4768bf601da67118c0acb347876.jpg&quot; alt=&quot;桌面生活（来自网络）&quot;&gt;我们这个时代，邮件服务不管是对于工作上的交流，还是平时的各种邮件通知，都是一个十分重要的存在。Java 从很早时候就可以通过 Java mail 支持邮件服务。Spring 更是对 Java mail 进行了进一步的封装，抽象出了 &lt;code&gt;JavaMailSender&lt;/code&gt;. 后来随着 Springboot 的出现，理所当然的出现了 &lt;code&gt;spring-boot-starter-mail&lt;/code&gt;. 不管怎么说，每次的封装都让使用变得越来越简单。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="邮件" scheme="https://www.codingme.net/tags/%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十二）使用 Mybatis 集成 pagehelper 分页插件和 mapper 插件</title>
    <link href="https://www.codingme.net/2019/03/springboot/springboot-12-data-mybatis-page/"/>
    <id>https://www.codingme.net/2019/03/springboot/springboot-12-data-mybatis-page/</id>
    <published>2019-03-07T16:40:22.000Z</published>
    <updated>2019-05-14T16:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/64cccddf32b7e3f4069ca2459057496e.png" alt="桌面生活（来自网络）"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Springboot 系列文章第十一篇里（<a href="https://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;mid=2247483756&amp;idx=1&amp;sn=902dba8ed665131453bc26de246ccaa1&amp;chksm=e984e808def3611edf0949a9db71ea6dc29432b25fb27015d78bc8117a50a3bedd79194de5ea&amp;token=93558379&amp;lang=zh_CN#rd" target="_blank" rel="noopener">使用 Mybatis（自动生成插件） 访问数据库</a>），实验了 Springboot 结合 Mybatis 以及 Mybatis-generator 生成插件的开发过程，其实对于 Mybatis 来讲还有很多优秀方便好用的插件，比如这次要演示的 通用 Mapper 生成插件和分页插件。<br><a id="more"></a></p><h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p> 既然是持久层框架，先准备一个用于实验操作的数据表，这次还是使用上一个实验使用的 mysql 数据库中的 springboot.book 数据表。</p><p>未创建的可以在 mysql 数据库的 springboot 库中创建表 book 用于演示。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍作者'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍名称'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">float</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍价格'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍描述'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">15</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>增加测试数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (2, &apos;金庸&apos;, &apos;笑傲江湖&apos;, 12, &apos;2018-09-01 10:10:12&apos;, &apos;是作家金庸创作的一部长篇武侠小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (3, &apos;罗贯中&apos;, &apos;三国演义&apos;, 22, &apos;2018-09-01 10:10:16&apos;, &apos;是作家罗贯中创作的一部长篇历史小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (4, &apos;吴承恩&apos;, &apos;西游记&apos;, 17, &apos;2018-09-01 10:10:19&apos;, &apos;是作家吴承恩创作的一部长篇小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (5, &apos;金庸1535767819284&apos;, &apos;笑傲江湖1535767819284&apos;, 43, &apos;2018-09-01 10:10:19&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535767819284&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (6, &apos;金庸1535767819679&apos;, &apos;笑傲江湖1535767819679&apos;, 24, &apos;2018-09-01 10:10:20&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535767819679&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (7, &apos;罗贯中1535769035138&apos;, &apos;三国演义1535769035138&apos;, 20, &apos;2018-09-01 10:30:35&apos;, &apos;是罗贯中创作的一部小说1535769035138&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (9, &apos;金庸1535783613226&apos;, &apos;笑傲江湖1535783613226&apos;, 30, &apos;2018-09-01 14:33:33&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783613226&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (10, &apos;金庸1535783618455&apos;, &apos;笑傲江湖1535783618455&apos;, 30, &apos;2018-09-01 14:33:38&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783618455&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (11, &apos;金庸1535783620634&apos;, &apos;笑傲江湖1535783620634&apos;, 30, &apos;2018-09-01 14:33:41&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783620634&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (12, &apos;金庸1535783672457&apos;, &apos;笑傲江湖1535783672457&apos;, 30, &apos;2018-09-01 14:34:32&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783672457&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (13, &apos;金庸1535783673664&apos;, &apos;笑傲江湖1535783673664&apos;, 30, &apos;2018-09-01 14:34:34&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783673664&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (14, &apos;金庸1535783939262&apos;, &apos;笑傲江湖1535783939262&apos;, 30, &apos;2018-09-01 14:38:59&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783939262&apos;);</span><br></pre></td></tr></table></figure></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>创建 Springboot 项目不提，引入 maven 依赖，主要是 mybastis 核心依赖以及 mybatis mapper 自动生成插件、分页插件、通用 Mapper 插件。依赖中的 druid 数据源部分，可以参考系列文章第九篇。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Spring Boot web 开发整合 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 阿里 fastjson --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Lombok 工具 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 导入配置文件处理器，在配置springboot相关文件时候会有提示 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--添加数据库链接 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Druid 数据源 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis mapper自动生成插件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis pagehelper 分页插件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis 通用 Mapper --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>简单说明一下几个不常见依赖的作用。</p><ol><li>mybatis-generator-core 用于自动生成 model、mapper 接口、mapper xml。</li><li>pagehelper-spring-boot-starter 用于分页</li><li>mapper 用于增强增删改查功能，集成了很多常用操作。</li></ol><h2 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h2><p>关于 Druid 数据源的配置不再说明，可以参考系列文章第九篇。配置中主要配置了项目编码、数据源信息、durid 数据源和 mybatis 的 mapper 位置以及 mybatis 映射别名的包路径。还有 pagehelper 分页插件部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># 服务启动端口号</span><br><span class="line">server.port=8080</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"># 编码</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line">spring.http.encoding.force=true</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">############################################################</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line"># 使用 druid 数据源</span><br><span class="line">spring.datasource.type:com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.initialSize:5</span><br><span class="line">spring.datasource.minIdle:5</span><br><span class="line">spring.datasource.maxActive:20</span><br><span class="line">spring.datasource.maxWait:60000</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis:60000</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis:300000</span><br><span class="line">spring.datasource.validationQuery:SELECT 1 FROM DUAL</span><br><span class="line">spring.datasource.testWhileIdle:true</span><br><span class="line">spring.datasource.testOnBorrow:false</span><br><span class="line">spring.datasource.testOnReturn:false</span><br><span class="line">spring.datasource.poolPreparedStatements:true</span><br><span class="line">spring.datasource.filters:stat</span><br><span class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize:20</span><br><span class="line">spring.datasource.useGlobalDataSourceStat:true</span><br><span class="line">spring.datasource.connectionProperties:druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line">############################################################</span><br><span class="line"># mybatis</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br><span class="line">mybatis.type-aliases-package=net.codingme.boot.domain</span><br><span class="line">############## mybatis page配置#######################</span><br><span class="line"># restart 类加载加载 include 进去的 jar 包。</span><br><span class="line">restart.include.mapper=/mapper-[\\w-\\.]+jar</span><br><span class="line">restart.include.pagehelper=/pagehelper-[\\w-\\.]+jar</span><br><span class="line"># mappers 多个接口时逗号隔开</span><br><span class="line">mapper.mappers=net.codingme.boot.util.MybatisMapper</span><br><span class="line">mapper.not-empty=false</span><br><span class="line">mapper.identity=MYSQL</span><br><span class="line"># pagehelper</span><br><span class="line">pagehelper.helperDialect=mysql</span><br><span class="line">pagehelper.reasonable=true</span><br><span class="line">pagehelper.supportMethodsArguments=true</span><br><span class="line">pagehelper.params=count=countSql</span><br><span class="line"># 输出 mybatis SQL 日志</span><br><span class="line">logging.level.net.codingme.boot.domain.mapper=debug</span><br></pre></td></tr></table></figure><p>一些说明。</p><ol><li><code>mapper.mappers=net.codingme.boot.util.MybatisMapper</code> 用于包含一个自己编写的 mapper。</li><li><code>restart.include</code> 热部署</li><li><code>logging.level.net.codingme.boot.domain.mapper=debug</code> 输出 Mybatis SQL 这里要指定自己 mapper 所在的包路径</li></ol><h2 id="通用-Mapper"><a href="#通用-Mapper" class="headerlink" title="通用 Mapper"></a>通用 Mapper</h2><p>在上一篇文章中也演示了自动生成，那是通用的一种生成方式，这次我们引入通用 Mapper 再进行生成，这样生成的代码更加简洁。</p><p>为了方便理解，先看一下项目最终结构。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/58fef28ddbcf12f769f2424db21d7fa3.png" alt="项目接口"></p><h3 id="自动生成配置"><a href="#自动生成配置" class="headerlink" title="自动生成配置"></a>自动生成配置</h3><p>自动生成通用接口分为两步，第一步是编写生成配置文件，注释已经添加了，直接看代码。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MysqlContext"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否使用通用 Mapper 提供的注释工具，默认 true 使用，这样在生成代码时会包含字段的注释（目前只有 mysql 和 oracle 支持）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useMapperCommentGenerator"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置后生成的 Mapper 接口都会自动继承这个接口--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.common.MySqlMapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置后生成的 Mapper 接口都会自动继承这个接口 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.common.Mapper"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否区分大小写，默认 false --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caseSensitive"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;amp;serverTimezone=GMT%2B8&amp;amp;nullCatalogMeansCurrent=true"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对于生成的pojo所在包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"net.codingme.boot.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对于生成的mapper所在目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置mapper对应的java映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"net.codingme.boot.domain.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 要生成那些表(更改tableName和domainObjectName就可以) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"book"</span> <span class="attr">domainObjectName</span>=<span class="string">"Book"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>与上次不同的是这次增加了两个 <code>plugin</code>，后面生成的 Mapper 接口都会自动继承这些类。</p><h3 id="自动生成代码"><a href="#自动生成代码" class="headerlink" title="自动生成代码"></a>自动生成代码</h3><p>写好配置文件之后，还需要写一个生成程序，用于加载配置文件，运行就可以生成相关的实体类、Mapper 接口、Mapper xml .<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Mybatis generator的逆向生成工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 指定你想工程配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>);</span><br><span class="line">        System.out.println(configFile.getAbsolutePath());</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (String warning : warnings) &#123;</span><br><span class="line">            System.out.println(warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MybatisGenerator mybatisGenerator = <span class="keyword">new</span> MybatisGenerator();</span><br><span class="line">        mybatisGenerator.generator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自动生成结果"><a href="#自动生成结果" class="headerlink" title="自动生成结果"></a>自动生成结果</h3><p>运行完毕上面程序之后，自动生成了 Book.java.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"book"</span>)</span><br><span class="line"><span class="meta">@ToString</span> <span class="comment">// 手动添加的 tostring 注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍作者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书籍价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略下面的自动生成代码</span></span><br></pre></td></tr></table></figure></p><h3 id="通用-Mapper-1"><a href="#通用-Mapper-1" class="headerlink" title="通用 Mapper"></a>通用 Mapper</h3><p>上面的程序也自动生成了 BookMapper 接口，且继承了配置的 MySqlMapper 和 Mapper 接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> <span class="keyword">extends</span> <span class="title">MySqlMapper</span>&lt;<span class="title">Book</span>&gt;, <span class="title">Mapper</span>&lt;<span class="title">Book</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两个接口里实现了很多常用操作。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/51f20a7f33ad27d9495046c236dec145.png" alt="通用 Mapper 里的方法"></p><p>生成完成之后要在 Springboot 启动器上添加 MapperScan 注解指定要扫描的 mapper 位置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@tk</span>.mybatis.spring.annotation.MapperScan(basePackages = <span class="string">"net.codingme.boot.domain.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="单元测试和分页测试"><a href="#单元测试和分页测试" class="headerlink" title="单元测试和分页测试"></a>单元测试和分页测试</h2><p>编写 BookMapperTest 单元测试用于测试 BookMapper 的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.domain.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">2</span>);</span><br><span class="line">        Book selectOne = bookMapper.selectOne(book);</span><br><span class="line">        Assert.assertNotNull(selectOne);</span><br><span class="line">        System.out.println(selectOne);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookMapper.selectByPrimaryKey(<span class="number">2</span>);</span><br><span class="line">        Assert.assertNotNull(book);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPageInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Book&gt; bookList = bookMapper.selectAll();</span><br><span class="line">        Assert.assertNotNull(bookList);</span><br><span class="line">        System.out.println(<span class="string">"查询出数量："</span> + bookList.size());</span><br><span class="line">        PageInfo&lt;Book&gt; pageInfo = PageInfo.of(bookList);</span><br><span class="line">        System.out.println(<span class="string">"总数量："</span> + pageInfo.getTotal());</span><br><span class="line">        System.out.println(<span class="string">"总页数："</span> + pageInfo.getPages());</span><br><span class="line">        System.out.println(<span class="string">"页大小："</span> + pageInfo.getPageSize());</span><br><span class="line">        System.out.println(<span class="string">"第几页："</span> + pageInfo.getPageNum());</span><br><span class="line">        System.out.println(<span class="string">"当前量："</span> + pageInfo.getSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Book&gt; bookList = bookMapper.selectAll();</span><br><span class="line">        Assert.assertNotNull(bookList);</span><br><span class="line">        System.out.println(<span class="string">"查询出数量："</span> + bookList.size());</span><br><span class="line">        System.out.println(<span class="string">"总数量："</span> + ((Page)bookList).getTotal());</span><br><span class="line">        System.out.println(<span class="string">"总页数："</span> + ((Page)bookList).getPages());</span><br><span class="line">        System.out.println(<span class="string">"第几页："</span> + ((Page)bookList).getPageNum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看到分页的实现主要是 PageHelper 的设置，在设置 PageHelper 之后的第一个查询会进行分页。像上面的例子会查询第二页，每页三条这样。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;Book&gt; bookList = bookMapper.selectAll();</span><br></pre></td></tr></table></figure></p><p>其实使用了分页插件之后返回的数据类型是一个 Page 类，总数等分页信息都已经返回，如果要取出来使用就需要强制转换类型然后取出，上面也是演示了两种方式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式 1</span></span><br><span class="line">PageInfo&lt;Book&gt; pageInfo = PageInfo.of(bookList);</span><br><span class="line">System.out.println(<span class="string">"总数量："</span> + pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span> + pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">"页大小："</span> + pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">"第几页："</span> + pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">"当前量："</span> + pageInfo.getSize());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2</span></span><br><span class="line">System.out.println(<span class="string">"查询出数量："</span> + bookList.size());</span><br><span class="line">System.out.println(<span class="string">"总数量："</span> + ((Page)bookList).getTotal());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span> + ((Page)bookList).getPages());</span><br><span class="line">System.out.println(<span class="string">"第几页："</span> + ((Page)bookList).getPageNum());</span><br></pre></td></tr></table></figure></p><p>运行 BookMapperTest 类测试所有的单元测试。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/0dd65eb033d1b3e872cd2ed41f201dca.png" alt="单元测试结果"></p><p>发现单元测试全部通过，查看一个分页查询（testSelectPageInfo）输出情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2019-03-08 16:07:52.226 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectAll_COUNT     : ==&gt;  Preparing: SELECT count(0) FROM book </span><br><span class="line">2019-03-08 16:07:52.227 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectAll_COUNT     : ==&gt; Parameters: </span><br><span class="line">2019-03-08 16:07:52.229 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectAll_COUNT     : &lt;==      Total: 1</span><br><span class="line">2019-03-08 16:07:52.231 DEBUG 26764 --- [           main] n.c.b.d.mapper.BookMapper.selectAll      : ==&gt;  Preparing: SELECT id,author,name,price,create_time,description FROM book LIMIT ?, ? </span><br><span class="line">2019-03-08 16:07:52.233 DEBUG 26764 --- [           main] n.c.b.d.mapper.BookMapper.selectAll      : ==&gt; Parameters: 3(Integer), 3(Integer)</span><br><span class="line">2019-03-08 16:07:52.236 DEBUG 26764 --- [           main] n.c.b.d.mapper.BookMapper.selectAll      : &lt;==      Total: 3</span><br><span class="line">查询出数量：3</span><br><span class="line">总数量：12</span><br><span class="line">总页数：4</span><br><span class="line">页大小：3</span><br><span class="line">第几页：2</span><br><span class="line">当前量：3</span><br></pre></td></tr></table></figure></p><p>再查看一个普通查询（testSelectByPrimaryKey）输出情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-03-08 16:07:52.241 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectByPrimaryKey  : ==&gt;  Preparing: SELECT id,author,name,price,create_time,description FROM book WHERE id = ? </span><br><span class="line">2019-03-08 16:07:52.242 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectByPrimaryKey  : ==&gt; Parameters: 2(Integer)</span><br><span class="line">2019-03-08 16:07:52.244 DEBUG 26764 --- [           main] n.c.b.d.m.BookMapper.selectByPrimaryKey  : &lt;==      Total: 1</span><br><span class="line">Book(id=2, author=金庸, name=笑傲江湖, price=12.0, createTime=Sat Sep 01 10:10:12 GMT+08:00 2018, description=是作家金庸创作的一部长篇武侠小说)</span><br></pre></td></tr></table></figure></p><p>文中代码已经上传到 Github <a href="https://github.com/niumoo/springboot" target="_blank" rel="noopener">Spring Boot 连接数据库 - Mybatis 插件</a></p><p>想要了解这几个插件的其他信息，可以查看官方文档。</p><ol><li><a href="https://pagehelper.github.io/docs/howtouse/" target="_blank" rel="noopener">如何使用分页插件</a></li><li><a href="https://github.com/abel533/Mapper/wiki/1.3-spring-boot" target="_blank" rel="noopener">Mapper插件</a></li><li><a href="http://www.mybatis.org/generator/" target="_blank" rel="noopener"> MyBatis Generator</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/64cccddf32b7e3f4069ca2459057496e.png&quot; alt=&quot;桌面生活（来自网络）&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 Springboot 系列文章第十一篇里（&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1MDIxNjQ1OQ==&amp;amp;mid=2247483756&amp;amp;idx=1&amp;amp;sn=902dba8ed665131453bc26de246ccaa1&amp;amp;chksm=e984e808def3611edf0949a9db71ea6dc29432b25fb27015d78bc8117a50a3bedd79194de5ea&amp;amp;token=93558379&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用 Mybatis（自动生成插件） 访问数据库&lt;/a&gt;），实验了 Springboot 结合 Mybatis 以及 Mybatis-generator 生成插件的开发过程，其实对于 Mybatis 来讲还有很多优秀方便好用的插件，比如这次要演示的 通用 Mapper 生成插件和分页插件。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="插件" scheme="https://www.codingme.net/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="Mybatis" scheme="https://www.codingme.net/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十一）使用 Mybatis（自动生成插件） 访问数据库</title>
    <link href="https://www.codingme.net/2019/03/springboot/springboot-11-data-mybatis/"/>
    <id>https://www.codingme.net/2019/03/springboot/springboot-11-data-mybatis/</id>
    <published>2019-03-06T17:40:01.000Z</published>
    <updated>2019-05-14T16:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/60327e81c9b1f06ed84cb177feded21b.jpg" alt="桌面生活（来自网络）"></p><h2 id="1-Springboot-mybatis-介绍"><a href="#1-Springboot-mybatis-介绍" class="headerlink" title="1. Springboot mybatis 介绍"></a>1. Springboot mybatis 介绍</h2><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数获取结果集的过程。MyBatis 可以使用简单的 <code>XML</code> 或<code>注解</code>来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。<br><a id="more"></a><br>关于 Mybatis 的基础知识可以查询官方文档，十分的详细。<a href="http://www.mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">mybatis 官方文档</a>.</p><h2 id="2-Springboot-mybatis-依赖"><a href="#2-Springboot-mybatis-依赖" class="headerlink" title="2. Springboot mybatis 依赖"></a>2. Springboot mybatis 依赖</h2><p>本系列 Springboot 文章主要是 Springboot 的学习与分析，也因此只会试验 Mybatis 在 Springboot 中的一些用法，关于 Mybatis 的基础知识，还是需要自行学习的。<br>创建 Springboot 项目不提，引入 maven 依赖，主要是 mybastis 核心依赖以及一个 mybatis mapper 自动生成插件。依赖中的 druid 数据源部分，可以参考系列文章第九篇。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Spring Boot web 开发整合 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 阿里 fastjson --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Lombok 工具 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 导入配置文件处理器，在配置springboot相关文件时候会有提示 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Druid 数据源 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- mybatis mapper自动生成插件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--添加数据库链接 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-Springboot-mybatis-配置"><a href="#3-Springboot-mybatis-配置" class="headerlink" title="3. Springboot mybatis 配置"></a>3. Springboot mybatis 配置</h2><p>关于 Druid 数据源的配置不再说明，可以参考系列文章第九篇。配置中主要配置了项目编码、数据源信息、durid 数据源和 mybatis 的 mapper 位置以及 mybatis 映射别名的包路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># 服务启动端口号</span><br><span class="line">server.port=8080</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"></span><br><span class="line"># 编码</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line">spring.http.encoding.force=true</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">############################################################</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.driver-class-name= com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line"></span><br><span class="line"># 使用 druid 数据源</span><br><span class="line">spring.datasource.type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.initialSize: 5</span><br><span class="line">spring.datasource.minIdle: 5</span><br><span class="line">spring.datasource.maxActive: 20</span><br><span class="line">spring.datasource.maxWait: 60000</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis: 300000</span><br><span class="line">spring.datasource.validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">spring.datasource.testWhileIdle: true</span><br><span class="line">spring.datasource.testOnBorrow: false</span><br><span class="line">spring.datasource.testOnReturn: false</span><br><span class="line">spring.datasource.poolPreparedStatements: true</span><br><span class="line">spring.datasource.filters: stat</span><br><span class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">spring.datasource.useGlobalDataSourceStat: true</span><br><span class="line">spring.datasource.connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line"></span><br><span class="line"># mybatis</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br><span class="line">mybatis.type-aliases-package=net.codingme.boot.domain</span><br></pre></td></tr></table></figure></p><h2 id="4-Springboot-mybatis-编码"><a href="#4-Springboot-mybatis-编码" class="headerlink" title="4. Springboot mybatis 编码"></a>4. Springboot mybatis 编码</h2><p>mybatis 是半 ORM 框架，它通过 XML 描述符或者注解把 POJO 对象与 SQL 信息关联起来，也因为是和 SQL 关联起来，使用 mybatis 可以充分的利用数据的各种功能以及强大的 SQL 语句。也可以发发现使用 mybatis 至少应该建立 POJO 对象和 SQL 关联信息以及编写相关操作代码。</p><h3 id="4-1-数据库准备"><a href="#4-1-数据库准备" class="headerlink" title="4.1. 数据库准备"></a>4.1. 数据库准备</h3><p>既然是持久层框架，先准备一个用于实验操作的数据表。上一个步骤中有配置数据库信息为 springboot。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot</span><br></pre></td></tr></table></figure></p><p>因此在 mysql 数据库的 springboot 库中创建表 book 用于演示。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍作者'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍名称'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">float</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍价格'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'书籍描述'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">15</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>增加测试数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (2, &apos;金庸&apos;, &apos;笑傲江湖&apos;, 12, &apos;2018-09-01 10:10:12&apos;, &apos;是作家金庸创作的一部长篇武侠小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (3, &apos;罗贯中&apos;, &apos;三国演义&apos;, 22, &apos;2018-09-01 10:10:16&apos;, &apos;是作家罗贯中创作的一部长篇历史小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (4, &apos;吴承恩&apos;, &apos;西游记&apos;, 17, &apos;2018-09-01 10:10:19&apos;, &apos;是作家吴承恩创作的一部长篇小说&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (5, &apos;金庸1535767819284&apos;, &apos;笑傲江湖1535767819284&apos;, 43, &apos;2018-09-01 10:10:19&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535767819284&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (6, &apos;金庸1535767819679&apos;, &apos;笑傲江湖1535767819679&apos;, 24, &apos;2018-09-01 10:10:20&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535767819679&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (7, &apos;罗贯中1535769035138&apos;, &apos;三国演义1535769035138&apos;, 20, &apos;2018-09-01 10:30:35&apos;, &apos;是罗贯中创作的一部小说1535769035138&apos;);</span><br><span class="line">INSERT INTO `springboot`.`book`(`id`, `author`, `name`, `price`, `create_time`, `description`) VALUES (8, &apos;金庸1535783611785&apos;, &apos;笑傲江湖1535783611785&apos;, 30, &apos;2018-09-01 14:33:32&apos;, &apos;是作家金庸创作的一部长篇武侠小说1535783611785&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="4-2-自动生成插件"><a href="#4-2-自动生成插件" class="headerlink" title="4.2. 自动生成插件"></a>4.2. 自动生成插件</h3><p>传统的 mybatis　开发过程需要依照数据表新建大量的　POJO 类，然后在编写响应的增删改查接口，继而编写增删改查对应的 XML 文件。过程无趣且有重复劳动，因此产生了一个自动生成工具，可以通过 JDBC 连接到数据库，自动的创建 POJO、操作接口、XML 文件。</p><p>在引入依赖的时候已经引入了自动生成插件，也就是 <code>mybatis-generator-core</code>。</p><p>接着在项目根目录下创建自动生成配置文件，主要配置数据库信息和要生成的表已经生成的代码存放位置。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/9de1c6553d3afc7f006f791fdf088b04.png" alt="项目结构"></p><p>在之前作者也介绍过，可以参考博客文章<a href="https://www.codingme.net/2017/11/develop/tool-mybatis-generator/">使用MyBatis Generator自动生成Model、Dao、Mapper相关代码</a>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MysqlContext"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;amp;serverTimezone=GMT%2B8&amp;amp;nullCatalogMeansCurrent=true"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对于生成的pojo所在包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"net.codingme.boot.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对于生成的mapper所在目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置mapper对应的java映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"net.codingme.boot.domain.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 要生成那些表(更改tableName和domainObjectName就可以) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"book"</span> <span class="attr">domainObjectName</span>=<span class="string">"Book"</span> <span class="attr">enableCountByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">"true"</span> <span class="attr">enableUpdateByPrimaryKey</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"true"</span> <span class="attr">enableDeleteByPrimaryKey</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByPrimaryKey</span>=<span class="string">"true"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写好配置文件之后，还需要写一个启动程序，用于加载配置文件，运行就可以生成相关配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Mybatis generator的逆向生成工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 指定你想工程配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>);</span><br><span class="line">        System.out.println(configFile.getAbsolutePath());</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MybatisGenerator mybatisGenerator = <span class="keyword">new</span> MybatisGenerator();</span><br><span class="line">        mybatisGenerator.generator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成的文件如下图。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/de3a01eaf435ed5ab223603a04c9eb71.png" alt="项目结构"></p><p>查看生成的接口以及 XML 映射文件可以发现已经自动生成了常用的几个方法。</p><ol><li>deleteByPrimaryKey</li><li>insert</li><li>updateByPrimaryKey</li><li>selectByPrimaryKey</li><li>selectAll</li></ol><p>生成完成之后要在 Springboot 启动器上添加 MapperScan 注解指定要扫描的 mapper 位置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"net.codingme.boot.domain.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-3-注解配置方式"><a href="#4-3-注解配置方式" class="headerlink" title="4.3. 注解配置方式"></a>4.3. 注解配置方式</h3><p>Mybatis 同样支持注解的方式配置映射关系，使用注解可以替代 XML 的配置，写一个简单的注解例子。在刚才生成的 BookMapper.java 中增加一个根据作者名称查询的方法，并映射字段对应的属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 @Repository 注解，这样在使用 @Autowired 引入的时候不会报横线</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解方式配置映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> author</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Results</span> 字段和属性映射关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Select</span> 查询语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"ids"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"name"</span>, column = <span class="string">"name"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"author"</span>, column = <span class="string">"authors"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"createTime"</span>, column = <span class="string">"create_time"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select id as ids, author as authors, name, price, create_time, description from book where author = #&#123;author&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">selectByAuthor</span><span class="params">(@Param(<span class="string">"author"</span>)</span> String author)</span>;</span><br><span class="line">    <span class="comment">// 省略下面自动生成代码</span></span><br></pre></td></tr></table></figure></p><h2 id="5-Springboot-mybatis-测试"><a href="#5-Springboot-mybatis-测试" class="headerlink" title="5. Springboot mybatis 测试"></a>5. Springboot mybatis 测试</h2><p>正常情况下会在项目中的业务层 service 包下创建接口和类然后通过注解引入使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookMapper bookMapper;</span><br></pre></td></tr></table></figure></p><p>我们只是实验，没有这样写一套的必要，只要能确保 BookMapper 可以正常注入使用就好了。因此创建测试类进行测试。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/730d20139c46c077d4064261ec9290a5.png" alt="创建测试类"></p><p>在生成的（也可以完全手写测试方法）测试类中添加测试方法进行测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; bookList = bookMapper.selectAll();</span><br><span class="line">        Assert.assertNotNull(bookList);</span><br><span class="line">        bookList.forEach((book) -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByAuthro</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; bookList = bookMapper.selectByAuthor(<span class="string">"金庸"</span>);</span><br><span class="line">        Assert.assertNotNull(bookList);</span><br><span class="line">        bookList.forEach((book) -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookMapper.selectByPrimaryKey(<span class="number">2</span>);</span><br><span class="line">        Assert.assertNotNull(book);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> primaryKey = bookMapper.deleteByPrimaryKey(<span class="number">8</span>);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span>, primaryKey);</span><br><span class="line">        System.out.println(primaryKey);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了观察查询接口 book 的信息输出，重写 Book 类的 toString 方法，然后运行单元测试。</p><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/0a059a1c7f49265a61cda7bbd07f1d2d.png" alt="单元测试结果"></p><p>可以发现测试全部通过。结果正常。<br>文章代码已经上传到 Github <a href="https://github.com/niumoo/springboot/tree/master/springboot-data-mybatis" target="_blank" rel="noopener">Spring Boot 连接数据库 - Mybatis</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/60327e81c9b1f06ed84cb177feded21b.jpg&quot; alt=&quot;桌面生活（来自网络）&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-Springboot-mybatis-介绍&quot;&gt;&lt;a href=&quot;#1-Springboot-mybatis-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. Springboot mybatis 介绍&quot;&gt;&lt;/a&gt;1. Springboot mybatis 介绍&lt;/h2&gt;&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数获取结果集的过程。MyBatis 可以使用简单的 &lt;code&gt;XML&lt;/code&gt; 或&lt;code&gt;注解&lt;/code&gt;来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="插件" scheme="https://www.codingme.net/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="Mybatis" scheme="https://www.codingme.net/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（十）使用 Spring data jpa 访问数据库</title>
    <link href="https://www.codingme.net/2019/03/springboot/springboot-10-data-jpa/"/>
    <id>https://www.codingme.net/2019/03/springboot/springboot-10-data-jpa/</id>
    <published>2019-02-28T17:40:01.000Z</published>
    <updated>2019-05-14T16:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/7bea43f15edb0db3ac708c346acd35c4.jpg" alt="桌面生活（来自网络）"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Springboot data jpa 和 Spring jdbc 同属于 Spring开源组织，在 Spring jdbc 之后又开发了持久层框架，很明显 Spring data jpa 相对于 Spring jdbc 更加的便捷强大，不然也就没有开发的必要了。根据下面的文章开始体验下 Spring data jpa 魅力。<br><a id="more"></a></p><h2 id="1-Spring-data-jpa-介绍"><a href="#1-Spring-data-jpa-介绍" class="headerlink" title="1. Spring data jpa 介绍"></a>1. Spring data jpa 介绍</h2><p>Spring data jpa 是 Spring data 系列的一部分，使用它可以轻松的实现对数据访问层的增强支持，在相当长的一段时间内，实现应用程序的数据访问层一直很麻烦，需要编写大量的样板式的代码来执行简单查询或者分页操作。Spring data jpa 的目标是尽量的减少实际编码来改善数据访问层的操作。</p><h2 id="2-Spring-data-jpa-依赖"><a href="#2-Spring-data-jpa-依赖" class="headerlink" title="2. Spring data jpa 依赖"></a>2. Spring data jpa 依赖</h2><p>这次的实验基于系列文章第九篇实验代码，代码中的数据源相关的配置也可以参考系列文章第九篇，这里只演示 Spring data jpa 部分。</p><p>创建Spring boot 项目，引入需要的依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot web 开发整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 阿里 fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Lombok 工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入配置文件处理器，在配置springboot相关文件时候会有提示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库访问 JPA--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加数据库链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 阿里 druid 数据源，Spring boot 中使用Druid要用这个  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-Spring-data-jpa-配置"><a href="#3-Spring-data-jpa-配置" class="headerlink" title="3. Spring data jpa 配置"></a>3. Spring data jpa 配置</h2><p>关于 Druid 数据源的配置不再说明，可以参考系列文章第九篇。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># 服务启动端口号</span><br><span class="line">server.port=8080</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line">############################################################</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.driver-class-name= com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line"># 使用 druid 数据源</span><br><span class="line">spring.datasource.type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.initialSize: 5</span><br><span class="line">spring.datasource.minIdle: 5</span><br><span class="line">spring.datasource.maxActive: 20</span><br><span class="line">spring.datasource.maxWait: 60000</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis: 300000</span><br><span class="line">spring.datasource.validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">spring.datasource.testWhileIdle: true</span><br><span class="line">spring.datasource.testOnBorrow: false</span><br><span class="line">spring.datasource.testOnReturn: false</span><br><span class="line">spring.datasource.poolPreparedStatements: true</span><br><span class="line">spring.datasource.filters: stat</span><br><span class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">spring.datasource.useGlobalDataSourceStat: true</span><br><span class="line">spring.datasource.connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line"># SpringBoot JPA</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line"># create 每次都重新创建表，update，表若存在则不重建</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.database-platform=org.hibernate.dialect.MySQL55Dialect</span><br></pre></td></tr></table></figure></p><p><code>spring.jpa.show-sql=true</code> 打印 SQL 语句。<br><code>spring.jpa.hibernate.ddl-auto=update</code> 根据 Enity 自动创建数据表，Update 表示如果表存在则不重新创建。</p><h2 id="4-Spring-data-jpa-编码"><a href="#4-Spring-data-jpa-编码" class="headerlink" title="4. Spring data jpa 编码"></a>4. Spring data jpa 编码</h2><p>Springboot Data JPA 是 ORM 的完整实现，实体类和数据表关系一一对应，因此实体类也就是数据表结构。<code>spring.jpa.hibernate.ddl-auto=update</code> 会在 JPA 运行时自动在数据表中创建被 <code>@Entity</code> 注解的实体数据表。如果表已经存在，则不会创建。</p><h3 id="4-1-数据实体类"><a href="#4-1-数据实体类" class="headerlink" title="4.1. 数据实体类"></a>4.1. 数据实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> JPA实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span> GET SET TOSTRING</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@NoArgsConstructor</span> 无参构造</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AllArgsConstructor</span> 全参构造</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/12/19 17:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Id</span> 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GeneratedValue</span> 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>, length = <span class="number">32</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户名不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>, length = <span class="number">32</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>, length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd hh:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 技能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String skills;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-JPA-操作接口"><a href="#4-2-JPA-操作接口" class="headerlink" title="4.2. JPA 操作接口"></a>4.2. JPA 操作接口</h3><p>JPA 操作接口只需要继承 JpaRepository 就可以了，JpaRepository 里封装了常用的增删改查分页等方法，可以直接使用，如果需要自定义查询方式，可以通过构造方法名的方式增加。下面增加了一个根据 username 和 password 查询 User 信息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.domain.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/1114:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个自定义方法，根据 username 和 password 查询 User 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，Jpa 的功能已经可以测试使用了，关于 Service 层和 Controller 就不在这里贴了，直接编写 Springboot 单元测试进行 Jpa 测试。</p><h2 id="5-Spring-data-jpa-测试"><a href="#5-Spring-data-jpa-测试" class="headerlink" title="5. Spring data jpa 测试"></a>5. Spring data jpa 测试</h2><p>使用 Springboot 的单元测试方法可以方便的测试 Springboot 项目，对 Springboot 单元测试不了解的可以直接参照<a href="https://docs.spring.io/spring-boot/docs/2.1.x/reference/htmlsingle/#boot-features-testing-spring-applications" target="_blank" rel="noopener">官方文档</a>的说明，当然，也可以直接看下面的示例代码。<br>下面编写四个测试方法分别测试根据 Id 查询、分页查询、更新数据、根据 username 和 password 查询四个功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.codingme.boot.domain.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.codingme.boot.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIdUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;User&gt; userOptional = userRepository.findById(<span class="number">1</span>);</span><br><span class="line">        User user = userOptional.orElseGet(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        Assert.assertNotNull(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        Page&lt;User&gt; userPage = userRepository.findAll(pageRequest);</span><br><span class="line">        List&lt;User&gt; userList = userPage.getContent();</span><br><span class="line">        userList.forEach((user) -&gt; System.out.println(user));</span><br><span class="line">        Assert.assertNotNull(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;User&gt; userOptional = userRepository.findById(<span class="number">1</span>);</span><br><span class="line">        User user = userOptional.orElseThrow(() -&gt; <span class="keyword">new</span> RuntimeException(<span class="string">"用户信息没有取到"</span>));</span><br><span class="line">        System.out.println(user.getAge());</span><br><span class="line">        ;</span><br><span class="line">        user.setAge(user.getAge() + <span class="number">1</span>);</span><br><span class="line">        User updateResult = userRepository.save(user);</span><br><span class="line">        Assert.assertNotNull(updateResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Username 和 Password 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByUsernameAndPasswordTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsernameAndPassword(<span class="string">"Darcy"</span>, <span class="string">"123"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        Assert.assertNotNull(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先看到四个方法全部运行通过。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/77d538a467dd500356c519b67f41b7a6.png" alt="单元测试结果"><br>分页查询查出数据库中的两条数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_, user0_.age as age2_0_, user0_.birthday as birthday3_0_, user0_.password as password4_0_, user0_.skills as skills5_0_, user0_.username as username6_0_ from user user0_ limit ?</span><br><span class="line">Hibernate: select count(user0_.id) as col_0_0_ from user user0_</span><br><span class="line">User(id=1, username=Darcy, password=123, age=18, birthday=2019-01-12 21:02:30.0, skills=Go)</span><br><span class="line">User(id=3, username=Chris, password=456, age=23, birthday=2019-01-01 00:11:22.0, skills=Java)</span><br></pre></td></tr></table></figure></p><p>根据 Id 查询也没有问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_0_, user0_.age as age2_0_0_, user0_.birthday as birthday3_0_0_, user0_.password as password4_0_0_, user0_.skills as skills5_0_0_, user0_.username as username6_0_0_ from user user0_ where user0_.id=?</span><br><span class="line">User(id=1, username=Darcy, password=123, age=18, birthday=2019-01-12 21:02:30.0, skills=Go)</span><br></pre></td></tr></table></figure></p><p>更新操作也是正常输出 SQL ，没有任何异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_0_, user0_.age as age2_0_0_, user0_.birthday as birthday3_0_0_, user0_.password as password4_0_0_, user0_.skills as skills5_0_0_, user0_.username as username6_0_0_ from user user0_ where user0_.id=?</span><br><span class="line">18</span><br><span class="line">Hibernate: select user0_.id as id1_0_0_, user0_.age as age2_0_0_, user0_.birthday as birthday3_0_0_, user0_.password as password4_0_0_, user0_.skills as skills5_0_0_, user0_.username as username6_0_0_ from user user0_ where user0_.id=?</span><br><span class="line">Hibernate: update user set age=?, birthday=?, password=?, skills=?, username=? where id=?</span><br></pre></td></tr></table></figure></p><p>最后一个是自定义查询操作，上面三个方法的输出中，Darcy 用户对应的年龄是 18，在经过更新加1 之后应该变为19，下面是自定义查询的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: select user0_.id as id1_0_, user0_.age as age2_0_, user0_.birthday as birthday3_0_, user0_.password as password4_0_, user0_.skills as skills5_0_, user0_.username as username6_0_ from user user0_ where user0_.username=? and user0_.password=?</span><br><span class="line">User(id=1, username=Darcy, password=123, age=19, birthday=2019-01-12 21:02:30.0, skills=Go)</span><br></pre></td></tr></table></figure></p><p>可见是没有任何问题的。<br>文章代码已经上传到 <a href="https://github.com/niumoo/springboot/tree/master/springboot-data-jpa" target="_blank" rel="noopener">GitHub</a>。<br>测试代码中使用了一些 JDK8 的特性，如 <code>Optional</code> 类的使用，以后会单独写一部分关于 JDK 新特性的文章，欢迎扫码关注公众号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/7bea43f15edb0db3ac708c346acd35c4.jpg&quot; alt=&quot;桌面生活（来自网络）&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Springboot data jpa 和 Spring jdbc 同属于 Spring开源组织，在 Spring jdbc 之后又开发了持久层框架，很明显 Spring data jpa 相对于 Spring jdbc 更加的便捷强大，不然也就没有开发的必要了。根据下面的文章开始体验下 Spring data jpa 魅力。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
      <category term="Jpa" scheme="https://www.codingme.net/tags/Jpa/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（九）使用 Spring JDBC 和 Druid 数据源监控</title>
    <link href="https://www.codingme.net/2019/02/springboot/springboot-09-data-jdbc/"/>
    <id>https://www.codingme.net/2019/02/springboot/springboot-09-data-jdbc/</id>
    <published>2019-02-27T15:40:01.000Z</published>
    <updated>2019-10-30T07:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="/assets/springboot-09-data-jdbc/129bdbc0a9f53e0fd3b748978ccd5fe6.png" alt="监控"></p><p>作为一名 Java 开发者，相信对 JDBC（Java Data Base Connectivity）是不会陌生的，JDBC作为 Java 基础内容，它提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。下面演示下 Springboot 中如何使用 JDBC 操作，并配置使用 Druid 连接池，体验 Druid 对数据库操作强大的监控和扩展功能。Alibaba-Durid 官方手册<a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">点这里</a>。<br><a id="more"></a></p><h2 id="1-数据库准备"><a href="#1-数据库准备" class="headerlink" title="1. 数据库准备"></a>1. 数据库准备</h2><p>使用mysql数据库创建数据库 springboot，并在库中新建数据表 user 并新增两条信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`skills`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"># 新增数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`age`</span>, <span class="string">`birthday`</span>, <span class="string">`password`</span>, <span class="string">`skills`</span>, <span class="string">`username`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">17</span>, <span class="string">'2019-01-12 21:02:30'</span>, <span class="string">'123'</span>, <span class="string">'Go'</span>, <span class="string">'Darcy'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`age`</span>, <span class="string">`birthday`</span>, <span class="string">`password`</span>, <span class="string">`skills`</span>, <span class="string">`username`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">23</span>, <span class="string">'2019-01-01 00:11:22'</span>, <span class="string">'456'</span>, <span class="string">'Java'</span>, <span class="string">'Chris'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h2><p>新建一个 Springboot项目，这里不说。添加依赖如下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring jdbc 操作模版 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springboot web开发 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mysql 数据库连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入druid数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-配置数据源信息"><a href="#3-配置数据源信息" class="headerlink" title="3. 配置数据源信息"></a>3. 配置数据源信息</h2><p>常规的 JDBC 配置不需要配置这么多内容，这里因为使用了 Druid 连接池，所以配置了 Druid 部分。对自动配置不理解的可以查看系列文章<a href="https://www.codingme.net/2019/01/springboot/springboot02-config/#4-%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8">Springboot 系列（二）Spring Boot 配置文件</a>。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></p><p>配置完毕之后，配置信息还不能绑定到 Druid数据源中，还需要新建一个配置类绑定数据源和配置信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Druid 数据源配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/1/14 22:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">druid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里，数据源已经配置完毕，编写测试方法测试 druid 连接池是否生效。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试JDBC数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行看到 contextLoads 输出信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">Loading class `com.mysql.jdbc.Driver&apos;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&apos;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br><span class="line">2019-02-27 14:14:56.144  INFO 12860 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3e104d4b</span><br></pre></td></tr></table></figure></p><p>输出日志中的 com.alibaba.druid 说明 Druid 已经生效。</p><h2 id="4-使用-Spring-JDBC"><a href="#4-使用-Spring-JDBC" class="headerlink" title="4. 使用 Spring-JDBC"></a>4. 使用 Spring-JDBC</h2><p>传统的 JDBC 使用中，需要编写大量代码，从构造 PreparedStatement 到查询不胜其烦。面对这样的开发痛点，Spring 封装了 Spring-jdbc. 让我们使用 JdbcTemplate 即可轻松的操作数据库。Spring-jdbc 的详细使用不是这篇文章重点，只简单演示下是否生效。<br>编写控制器，查询一个 user 信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">"select * FROM user"</span>);</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动spring 项目，请求 /query 接口得到正常响应。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"age"</span>: <span class="number">17</span>,</span><br><span class="line"><span class="attr">"birthday"</span>: <span class="string">"2019-01-12T13:02:30.000+0000"</span>,</span><br><span class="line"><span class="attr">"password"</span>: <span class="string">"123"</span>,</span><br><span class="line"><span class="attr">"skills"</span>: <span class="string">"Go"</span>,</span><br><span class="line"><span class="attr">"username"</span>: <span class="string">"Darcy"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见 Spring-JDBC 已经从数据库中取出了数据信息。</p><h2 id="5-使用-Druid-监控"><a href="#5-使用-Druid-监控" class="headerlink" title="5. 使用 Druid 监控"></a>5. 使用 Druid 监控</h2><p>如果使用 Druid 连接池却不使用监控功能，那么就有点暴殄天物了。下面开始配置 Druid 的 SQL 监控功能。在上面写的 DruidConfig 配置类中增加配置 Druid 的 Servlet 和 Filter.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Druid的servlet</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet());</span><br><span class="line">      Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      initParams.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">      initParams.put(<span class="string">"loginPassword"</span>, <span class="string">"123"</span>);</span><br><span class="line">      initParams.put(<span class="string">"allow"</span>,<span class="string">"127.0.0.1"</span>);</span><br><span class="line">      bean.setInitParameters(initParams);</span><br><span class="line">      bean.setUrlMappings(Arrays.asList(<span class="string">"/druid/*"</span>));</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      FilterRegistrationBean&lt;WebStatFilter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">      HashMap&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      initParams.put(<span class="string">"exclusions"</span>, <span class="string">"/css,/druid/*"</span>);</span><br><span class="line">      bean.setInitParameters(initParams);</span><br><span class="line">      bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>上面配置了 Druid 监控访问路径为 <code>/druid</code>、登录用户是 <code>admin</code>、登录密码是<code>123</code>、允许访问的IP是<code>127.0.0.1</code> 本机、不需要监控的请求是 <code>/css</code> 和 <code>/druid</code> 开头的请求。</p><p>重新启动项目，访问测试 <code>/query</code>，然后访问 <code>/durid</code> 登录页。<br><img src="/assets/springboot-09-data-jdbc/d6f42164708fcd4c8e5009386bb9837e.png" alt="Druid 登录页"></p><p>登录后可以看到 SQL 监控信息和 URL 监控等信息。<br><img src="/assets/springboot-09-data-jdbc/64a71b68b6afb74e22a2eb274e8956c3.png" alt="SQL 监控"><br>URL 监控。<br><img src="/assets/springboot-09-data-jdbc/7b96df5bbd8698295696a3805ad82e26.png" alt="URL 监控"></p><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/springboot-data-jdbc" target="_blank" rel="noopener">Spring Boot jdbc</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/springboot-09-data-jdbc/129bdbc0a9f53e0fd3b748978ccd5fe6.png&quot; alt=&quot;监控&quot;&gt;&lt;/p&gt;
&lt;p&gt;作为一名 Java 开发者，相信对 JDBC（Java Data Base Connectivity）是不会陌生的，JDBC作为 Java 基础内容，它提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。下面演示下 Springboot 中如何使用 JDBC 操作，并配置使用 Druid 连接池，体验 Druid 对数据库操作强大的监控和扩展功能。Alibaba-Durid 官方手册&lt;a href=&quot;https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点这里&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 系列（八）动态Banner与图片转字符图案的手动实现</title>
    <link href="https://www.codingme.net/2019/02/springboot/springboot-08-banner/"/>
    <id>https://www.codingme.net/2019/02/springboot/springboot-08-banner/</id>
    <published>2019-02-25T15:40:01.000Z</published>
    <updated>2019-05-14T16:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本 Spring Boot 系列文章基于 Spring Boot 版本 <strong>v2.1.1.RELEASE</strong> 进行学习分析，版本不同可能会有细微差别。</p></blockquote><p><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/33e6877404fed0daf8c894cec6a4d37c.png" alt="Springboot 启动 banner"></p><p>使用过 Springboot 的对上面这个图案肯定不会陌生，Springboot 启动的同时会打印上面的图案，并带有版本号。查看官方文档可以找到关于 banner 的描述</p><blockquote><p>The banner that is printed on start up can be changed by adding a banner.txt file to your classpath or by setting the spring.banner.location property to the location of such a file. If the file has an encoding other than UTF-8, you can set spring.banner.charset. In addition to a text file, you can also add a banner.gif, banner.jpg, or banner.png image file to your classpath or set the spring.banner.image.location property. Images are converted into an ASCII art representation and printed above any text banner.</p></blockquote><a id="more"></a><p>就不翻译了，直接有道翻译贴过来看个大概意思。</p><blockquote><p>可以通过向类路径中添加一个banner.txt文件或设置spring.banner来更改在start up上打印的banner。属性指向此类文件的位置。如果文件的编码不是UTF-8，那么可以设置spring.banner.charset。除了文本文件，还可以添加横幅。将gif、banner.jpg或banner.png图像文件保存到类路径或设置spring.banner.image。位置属性。图像被转换成ASCII艺术形式，并打印在任何文本横幅上面。</p></blockquote><h1 id="1-自定义-banner"><a href="#1-自定义-banner" class="headerlink" title="1. 自定义 banner"></a>1. 自定义 banner</h1><p>根据官方的描述，可以在类路径中自定义 banner 图案，我们进行尝试在放 resouce 目录下新建文件 banner.txt 并写入内容（<a href="http://patorjk.com/software/taag/#p=testall&amp;f=Graffiti&amp;t=niumoo" target="_blank" rel="noopener">在线字符生成</a>）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    (_)</span><br><span class="line"> _ __  _ _   _ _ __ ___   ___   ___</span><br><span class="line">| &apos;_ \| | | | | &apos;_ ` _ \ / _ \ / _ \</span><br><span class="line">| | | | | |_| | | | | | | (_) | (_) |</span><br><span class="line">|_| |_|_|\__,_|_| |_| |_|\___/ \___/ 版本：$&#123;spring-boot.formatted-version&#125;</span><br></pre></td></tr></table></figure></p><p>启动 Springboot 在控制台看到下面的输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     (_)</span><br><span class="line">  _ __  _ _   _ _ __ ___   ___   ___</span><br><span class="line"> | &apos;_ \| | | | | &apos;_ ` _ \ / _ \ / _ \</span><br><span class="line"> | | | | | |_| | | | | | | (_) | (_) |</span><br><span class="line"> |_| |_|_|\__,_|_| |_| |_|\___/ \___/ 版本：(v2.1.3.RELEASE)</span><br><span class="line">2019-02-25 14:00:31.289  INFO 12312 --- [           main] net.codingme.banner.BannerApplication    : Starting BannerApplication on LAPTOP-L1S5MKTA with PID 12312 (D:\IdeaProjectMy\springboot-git\springboot-banner\target\classes started by Niu in D:\IdeaProjectMy\springboot-git\springboot-banner)</span><br><span class="line">2019-02-25 14:00:31.291  INFO 12312 --- [           main] net.codingme.banner.BannerApplication    : No active profile set, falling back to default profiles: default</span><br><span class="line">2019-02-25 14:00:32.087  INFO 12312 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br></pre></td></tr></table></figure></p><p>发现自定义 banner 已经生效了，官方文档的介绍里说还可以放置图片，下面放置图片 banner.jpg 测试。<br>网上随便找了一个图片。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/d9879377e30b5f37f9116e7927e35604.jpg" alt="Google Log">再次启动观察输出。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/935928a0c76faa399a6f49252c713afa.png" alt="自定义 Banner">Springboot 把图案转成了 ASCII 图案。</p><h1 id="2-ASCII-图案生成原理"><a href="#2-ASCII-图案生成原理" class="headerlink" title="2. ASCII 图案生成原理"></a>2. ASCII 图案生成原理</h1><p>看了上面的例子，发现 Springboot 可以把图片转换成 ASCII 图案，那么它是怎么做的呢？我们或许可以想象出一个大概流程。</p><ol><li>获取图片。</li><li>遍历图片像素点。</li><li>分析像素点，每个像素点根据颜色深度得出一个值，根据明暗度匹配不同的字符。</li><li>输出图案。</li></ol><p>Springboot 对图片 banner 的处理到底是不是我们上面想想的那样呢？直接去源码中寻找答案。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 位置：org.springframework.boot.SpringApplicationBannerPrinter */</span></span><br><span class="line"><span class="comment">//方法1：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Banner <span class="title">print</span><span class="params">(Environment environment, Class&lt;?&gt; sourceClass, Log logger)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 banner  调用方法记为2</span></span><br><span class="line">Banner banner = getBanner(environment);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">logger.info(createStringFromBanner(banner, environment, sourceClass));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UnsupportedEncodingException ex) &#123;</span><br><span class="line">logger.warn(<span class="string">"Failed to create String for banner"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 banner</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PrintedBanner(banner, sourceClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">getBanner</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">Banners banners = <span class="keyword">new</span> Banners();</span><br><span class="line"><span class="comment">// 获取图片banner，我们只关注这个，调用方法记为3</span></span><br><span class="line">banners.addIfNotNull(getImageBanner(environment));</span><br><span class="line">banners.addIfNotNull(getTextBanner(environment));</span><br><span class="line"><span class="keyword">if</span> (banners.hasAtLeastOneBanner()) &#123;</span><br><span class="line"><span class="keyword">return</span> banners;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.fallbackBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.fallbackBanner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DEFAULT_BANNER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法3</span></span><br><span class="line"><span class="comment">/** 获取自定义banner文件信息 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">getImageBanner</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line"><span class="comment">// BANNER_IMAGE_LOCATION_PROPERTY = "spring.banner.image.location";</span></span><br><span class="line">String location = environment.getProperty(BANNER_IMAGE_LOCATION_PROPERTY);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(location)) &#123;</span><br><span class="line">Resource resource = <span class="keyword">this</span>.resourceLoader.getResource(location);</span><br><span class="line"><span class="keyword">return</span> resource.exists() ? <span class="keyword">new</span> ImageBanner(resource) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// IMAGE_EXTENSION = &#123; "gif", "jpg", "png" &#125;;</span></span><br><span class="line"><span class="keyword">for</span> (String ext : IMAGE_EXTENSION) &#123;</span><br><span class="line">Resource resource = <span class="keyword">this</span>.resourceLoader.getResource(<span class="string">"banner."</span> + ext);</span><br><span class="line"><span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ImageBanner(resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是寻找自定义图片 banner 文件源码，如果把图片转换成 ASCII 图案继续跟进，追踪方法1中的<code>PrintedBanner(banner, sourceClass)</code>方法。最终查找输出图案的主要方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位置：org.springframework.boot.ImageBanner#printBanner</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printBanner</span><span class="params">(BufferedImage image, <span class="keyword">int</span> margin, <span class="keyword">boolean</span> invert,</span></span></span><br><span class="line"><span class="function"><span class="params">PrintStream out)</span> </span>&#123;</span><br><span class="line">AnsiElement background = invert ? AnsiBackground.BLACK : AnsiBackground.DEFAULT;</span><br><span class="line">out.print(AnsiOutput.encode(AnsiColor.DEFAULT));</span><br><span class="line">out.print(AnsiOutput.encode(background));</span><br><span class="line">out.println();</span><br><span class="line">out.println();</span><br><span class="line">AnsiColor lastColor = AnsiColor.DEFAULT;</span><br><span class="line"><span class="comment">// 图片高度遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; image.getHeight(); y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; margin; i++) &#123;</span><br><span class="line">out.print(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片宽度遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; image.getWidth(); x++) &#123;</span><br><span class="line"><span class="comment">// 获取每一个像素点</span></span><br><span class="line">Color color = <span class="keyword">new</span> Color(image.getRGB(x, y), <span class="keyword">false</span>);</span><br><span class="line">AnsiColor ansiColor = AnsiColors.getClosest(color);</span><br><span class="line"><span class="keyword">if</span> (ansiColor != lastColor) &#123;</span><br><span class="line">out.print(AnsiOutput.encode(ansiColor));</span><br><span class="line">lastColor = ansiColor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 像素点转换成字符输出，调用方法记为2</span></span><br><span class="line">out.print(getAsciiPixel(color, invert));</span><br><span class="line">&#125;</span><br><span class="line">out.println();</span><br><span class="line">&#125;</span><br><span class="line">out.print(AnsiOutput.encode(AnsiColor.DEFAULT));</span><br><span class="line">out.print(AnsiOutput.encode(AnsiBackground.DEFAULT));</span><br><span class="line">out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2，像素点转换成字符</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">getAsciiPixel</span><span class="params">(Color color, <span class="keyword">boolean</span> dark)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 根据 color 算出一个亮度值</span></span><br><span class="line"><span class="keyword">double</span> luminance = getLuminance(color, dark);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PIXEL.length; i++) &#123;</span><br><span class="line"><span class="comment">// 寻找亮度值匹配的字符</span></span><br><span class="line"><span class="keyword">if</span> (luminance &gt;= (LUMINANCE_START - (i * LUMINANCE_INCREMENT))) &#123;</span><br><span class="line"><span class="comment">// PIXEL = &#123; ' ', '.', '*', ':', 'o', '&amp;', '8', '#', '@' &#125;;</span></span><br><span class="line"><span class="keyword">return</span> PIXEL[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> PIXEL[PIXEL.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过查看源码，发现 Springboot 的图片 banner 的转换和我们预想的大致一致，这么有趣的功能我们能不能自己写一个呢？</p><h1 id="3-自己实现图片转-ASCII字符"><a href="#3-自己实现图片转-ASCII字符" class="headerlink" title="3.自己实现图片转 ASCII字符"></a>3.自己实现图片转 ASCII字符</h1><p>根据上面的分析，总结一下思路，我们也可以手动写一个图片转 ASCII 字符图案。<br>思路如下：</p><ol><li>图片大小缩放，调整到合适大小。</li><li>遍历图片像素。</li><li>获取图片像素点亮度（RGB颜色通过公式可以得到亮度数值）。</li><li>匹配字符。</li><li>输出图案。</li></ol><p>上面的5个步骤直接使用 Java 代码就可以完整实现，下面是编写的源码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 根据图片生成字符图案</span></span><br><span class="line"><span class="comment"> * 1.图片大小缩放</span></span><br><span class="line"><span class="comment"> * 2.遍历图片像素点</span></span><br><span class="line"><span class="comment"> * 3.获取图片像素点亮度</span></span><br><span class="line"><span class="comment"> * 4.匹配字符</span></span><br><span class="line"><span class="comment"> * 5.输出图案</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  niujinpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span> www.codingme.net</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-02-25 23:03:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorTextImage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] PIXEL = &#123;<span class="string">'@'</span>, <span class="string">'#'</span>, <span class="string">'8'</span>, <span class="string">'&amp;'</span>, <span class="string">'o'</span>, <span class="string">':'</span>, <span class="string">'*'</span>, <span class="string">'.'</span>, <span class="string">' '</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 图片缩放</span></span><br><span class="line">        BufferedImage bufferedImage = makeSmallImage(<span class="string">"src/main/resources/banner.jpg"</span>);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        printImage(bufferedImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printImage</span><span class="params">(BufferedImage image)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> width = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = image.getHeight();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> rgb = image.getRGB(j, i);</span><br><span class="line">                Color color = <span class="keyword">new</span> Color(rgb);</span><br><span class="line">                <span class="keyword">int</span> red = color.getRed();</span><br><span class="line">                <span class="keyword">int</span> green = color.getGreen();</span><br><span class="line">                <span class="keyword">int</span> blue = color.getBlue();</span><br><span class="line">                <span class="comment">// 一个用于计算RGB像素点亮度的公式</span></span><br><span class="line">                Double luminace = <span class="number">0.2126</span> * red + <span class="number">0.7152</span> * green + <span class="number">0.0722</span> * blue;</span><br><span class="line">                <span class="keyword">double</span> index = luminace / (Math.ceil(<span class="number">255</span> / PIXEL.length) + <span class="number">0.5</span>);</span><br><span class="line">                System.out.print(PIXEL[(<span class="keyword">int</span>)(Math.floor(index))]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">makeSmallImage</span><span class="params">(String srcImageName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File srcImageFile = <span class="keyword">new</span> File(srcImageName);</span><br><span class="line">        <span class="keyword">if</span> (srcImageFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件不存在"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        BufferedImage tagImage = <span class="keyword">null</span>;</span><br><span class="line">        Image srcImage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            srcImage = ImageIO.read(srcImageFile);</span><br><span class="line">            <span class="keyword">int</span> srcWidth = srcImage.getWidth(<span class="keyword">null</span>);<span class="comment">// 原图片宽度</span></span><br><span class="line">            <span class="keyword">int</span> srcHeight = srcImage.getHeight(<span class="keyword">null</span>);<span class="comment">// 原图片高度</span></span><br><span class="line">            <span class="keyword">int</span> dstMaxSize = <span class="number">90</span>;<span class="comment">// 目标缩略图的最大宽度/高度，宽度与高度将按比例缩写</span></span><br><span class="line">            <span class="keyword">int</span> dstWidth = srcWidth;<span class="comment">// 缩略图宽度</span></span><br><span class="line">            <span class="keyword">int</span> dstHeight = srcHeight;<span class="comment">// 缩略图高度</span></span><br><span class="line">            <span class="keyword">float</span> scale = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 计算缩略图的宽和高</span></span><br><span class="line">            <span class="keyword">if</span> (srcWidth &gt; dstMaxSize) &#123;</span><br><span class="line">                dstWidth = dstMaxSize;</span><br><span class="line">                scale = (<span class="keyword">float</span>)srcWidth / (<span class="keyword">float</span>)dstMaxSize;</span><br><span class="line">                dstHeight = Math.round((<span class="keyword">float</span>)srcHeight / scale);</span><br><span class="line">            &#125;</span><br><span class="line">            srcHeight = dstHeight;</span><br><span class="line">            <span class="keyword">if</span> (srcHeight &gt; dstMaxSize) &#123;</span><br><span class="line">                dstHeight = dstMaxSize;</span><br><span class="line">                scale = (<span class="keyword">float</span>)srcHeight / (<span class="keyword">float</span>)dstMaxSize;</span><br><span class="line">                dstWidth = Math.round((<span class="keyword">float</span>)dstWidth / scale);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 生成缩略图</span></span><br><span class="line">            tagImage = <span class="keyword">new</span> BufferedImage(dstWidth, dstHeight, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            tagImage.getGraphics().drawImage(srcImage, <span class="number">0</span>, <span class="number">0</span>, dstWidth, dstHeight, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> tagImage;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileOutputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tagImage = <span class="keyword">null</span>;</span><br><span class="line">            srcImage = <span class="keyword">null</span>;</span><br><span class="line">            System.gc();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还是拿上面的 Google log 图片作为实验对象，运行得到字符图案输出。<br><img src="https://raw.githubusercontent.com/niumoo/files/master/images/blog/ddc9487dd2050f9188825195427ed0a1.png" alt="图片转 ASCII 字符"></p><p>文章代码已经上传到 GitHub <a href="https://github.com/niumoo/springboot/tree/master/" target="_blank" rel="noopener">Spring Boot</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：本 Spring Boot 系列文章基于 Spring Boot 版本 &lt;strong&gt;v2.1.1.RELEASE&lt;/strong&gt; 进行学习分析，版本不同可能会有细微差别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niumoo/files/master/images/blog/33e6877404fed0daf8c894cec6a4d37c.png&quot; alt=&quot;Springboot 启动 banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用过 Springboot 的对上面这个图案肯定不会陌生，Springboot 启动的同时会打印上面的图案，并带有版本号。查看官方文档可以找到关于 banner 的描述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The banner that is printed on start up can be changed by adding a banner.txt file to your classpath or by setting the spring.banner.location property to the location of such a file. If the file has an encoding other than UTF-8, you can set spring.banner.charset. In addition to a text file, you can also add a banner.gif, banner.jpg, or banner.png image file to your classpath or set the spring.banner.image.location property. Images are converted into an ASCII art representation and printed above any text banner.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Springboot" scheme="https://www.codingme.net/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://www.codingme.net/tags/Springboot/"/>
    
  </entry>
  
</feed>
